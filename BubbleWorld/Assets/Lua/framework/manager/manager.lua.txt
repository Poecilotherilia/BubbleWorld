---
--- Generated by lvyuqiang
--- File name : manager.lua.txt
--- DateTime : 2021/06/04
--- Description : 管理器
---

---@class manager
local df_manager = 
{ 
    cname = 'df_manager',
    
    ---是否初始化完毕
    ---@private
    ---@type boolean
    is_init = nil
}

---初始化
---@public
function df_manager.init()
    ---@type table<string, table>
    df_manager.manager_dict = {}
    
    ---@type fun[]
    df_manager.init_list = {}
    ---@type fun[]
    df_manager.update_list = {}
    ---@type fun[]
    df_manager.clear_list = {}
    ---@type fun[]
    df_manager.dispose_list = {}
    ---@type fun[]
    df_manager.app_quit_list = {}
end

---添加管理器
---@public
function df_manager.add(mgr)
    if mgr == nil then
        log.error("can't add nil manager")
        return
    end

    local name = mgr.cname
    if df_manager.manager_dict[name] ~= nil then
        log.error("manager already exists, name: ", name)
        return
    end
    -- log.info("add manager, name: ", name)

    df_manager.manager_dict[name] = mgr

    if mgr.init ~= nil or mgr.init_sync then
        df_manager.init_list[#df_manager.init_list + 1] = mgr
    end

    if mgr.on_update ~= nil then
        df_manager.update_list[#df_manager.update_list + 1] = mgr
    end

    if mgr.clear ~= nil then
        df_manager.clear_list[#df_manager.clear_list + 1] = mgr
    end

    if mgr.dispose ~= nil then
        df_manager.dispose_list[#df_manager.dispose_list + 1] = mgr
    end

    if mgr.on_application_quit ~= nil then
        df_manager.app_quit_list[#df_manager.app_quit_list + 1] = mgr
    end
end

---初始化后
---@public
function df_manager.init_after()
    for i = 1, #df_manager.init_list do
        local mgr = df_manager.init_list[i]
        if mgr.init ~= nil then
            mgr.init()
        elseif mgr.init_sync ~= nil then
            mgr.init_sync()
        end
    end

    df_manager.is_init = true
end

---更新
---@public
function df_manager.on_update()
    if not df_manager.is_init then
        return
    end
    
    for i = 1, #df_manager.update_list do
        df_manager.update_list[i].on_update()
    end
end

---清理
---@public
function df_manager.clear()
    if not df_manager.clear_list then
        return
    end

    for i = 1, #df_manager.clear_list do
        df_manager.clear_list[i].clear()
    end
end

---销毁
---@public
function df_manager.dispose()
    if not df_manager.dispose_list then
        return
    end

    for i = #df_manager.dispose_list, 1, -1 do
        df_manager.dispose_list[i].dispose()
    end
    
    df_manager.manager_dict = nil
    df_manager.update_list = nil
    df_manager.clear_list = nil
    df_manager.dispose_list = nil
    df_manager.app_quit_list = nil
end

---退出游戏
---@public
function df_manager.on_application_quit()
    if not df_manager.app_quit_list then
        return
    end

    for i = 1, #df_manager.app_quit_list do
        df_manager.app_quit_list[i].on_application_quit()
    end
end

manager = df_manager