---
--- Generated by bbhuang
--- File name : tablefunc.lua.txt
--- DateTime : 2022/05/19
--- Description : 对 table的扩展
---
local math = math

--- 参数转化为 数字
local formatSortValue = function(v)
    if type(v) ~= "number" then
        return v and 1 or 0
    end
    return v
end

-- 多条件排序
---@public
---@param tab table
---@param compare function
function table.mul_sort(tab, compare)
    local cache = {}
    return table.sort(tab, function(a, b)
        local oa, ob = cache[a] or compare(a), cache[b] or compare(b)
        cache[a], cache[b] = oa, ob
        for i = 1, math.max(#oa, #ob) do
            local t = type(oa[i])
            if t == "string" then
                if oa[i] ~= ob[i] then
                    return oa[i] < ob[i]
                end
            else
                local ai, bi = formatSortValue(oa[i]), formatSortValue(ob[i])
                if ai ~= bi then return ai > bi end
            end
        end
        return false
    end)
end

-- 获取table 长度
---@param tab table
function table.count(tab)
    if not tab or type(tab) ~= 'table' then
        return 0
    end

    local count = 0
    for i, v in pairs(tab) do
        count = count + 1
    end

    return count
end

---对table判空（nil or {}）
---@public
---@param t any
---@return boolean
function table.is_table_nil_or_empty(t)
    if t and table.count(t) > 0 then
        return false
    else
        return true
    end
end

---深度拷贝
---@param orig any 源
---@param copies any 可选
---@return table
function table.deep_copy(orig, copies)
    copies = copies or {}
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        if copies[orig] then
            copy = copies[orig]
        else
            copy = {}
            copies[orig] = copy
            for orig_key, orig_value in next, orig, nil do
                copy[table.deep_copy(orig_key, copies)] = table.deep_copy(orig_value, copies)
            end
            setmetatable(copy, table.deep_copy(getmetatable(orig), copies))
        end
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

---获取table keys
---@param tab table
function table.keys(tab)
    local res = {}
    for k, v in pairs(tab or {}) do
        table.insert(res, k)
    end
    return res
end

---可以按顺序遍历map迭代器
---@public
---@param tbl table 要迭代的表 
---@example  for k, v in table.spairs(any_table) do
function table.spairs(tbl)
    -- 为tbl创建一个对key排序的数组
    -- 自己实现插入排序，table.sort遇到nil时会失效
    local ary = {}
    local lastUsed = 0
    for key, _ in pairs(tbl) do
        if (lastUsed == 0) then
            ary[1] = key
        else
            local done = false
            for j = 1,lastUsed do  -- 进行插入排序
                if (table.default_comp(key, ary[j]) == true) then
                    table.insert(ary, j, key)
                    done = true
                    break
                end
            end
            if (done == false) then
                ary[lastUsed + 1] = key
            end
        end
        lastUsed = lastUsed + 1
    end

    -- 定义并返回迭代器
    local i = 0
    local iter = function ()
        i = i + 1
        if ary[i] == nil then
            return nil
        else
            return ary[i], tbl[ary[i]]
        end
    end
    return iter
end

---通用比较器
---@private
---@return boolean
function table.default_comp(op1, op2)
    local type1, type2 = type(op1), type(op2)
    local num1,  num2  = tonumber(op1), tonumber(op2)

    if ( num1 ~= nil) and (num2 ~= nil) then
        return  num1 < num2
    elseif type1 ~= type2 then
        return type1 < type2
    elseif type1 == "string"  then
        return op1 < op2
    elseif type1 == "boolean" then
        return op1
        -- 以上处理: number, string, boolean
    else -- 处理剩下的:  function, table, thread, userdata
        return tostring(op1) < tostring(op2)  -- tostring后比较字符串
    end
end

---table中是否包含指定的元素
---@public
---@param list table table
---@param value any 元素
---@return boolean, any
function table.contains(dict, value)
    if dict == nil or value == nil then
        return false, nil
    end

    for k, v in pairs(dict) do
        if v == value then
            return true, k
        end
    end
    return false, nil
end