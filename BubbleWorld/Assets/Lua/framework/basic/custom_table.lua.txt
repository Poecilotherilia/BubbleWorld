---
--- Generated by wuhaijun
--- File name : custom_table.lua.txt
--- DateTime : 2021/12/03
--- Description : 
---

local table_remove = table.remove

---比较是否一致
---@private
---@param key1 any
---@param key2 any
local function equivalent(key1, key2)
    -- 1. 不是table可以直接比较
    local type_key1 = type(key1)
    local type_key2 = type(key2)
    if type_key1 ~= 'table' or type_key2 ~= 'table' then
        return key1 == key2
    end

    -- 2. 事件了比较方法可以直接比较
    if key1.__eq ~= nil then
        return key1 == key2
    end
    if key2.__eq ~= nil then
        return key2 == key1 
    end
    
    -- 3. 比较包含的参数个数
    local counta, countb = 0, 0
    for k, v in pairs(key1) do
        if not equivalent(v, key2[k]) then
            return false
        end
        counta = counta + 1
    end
    for _, _ in pairs(key2) do
        countb = countb + 1
    end
    return counta == countb
end

---__new_index
---@private
local function instance_new_index(t, key, value)
    local key_list = t._key_list
    local key_count = #key_list
    local index = 0
    for i = 1, key_count do
        if equivalent(key_list[i], key) then
            index = i
            break
        end
    end

    local value_list = t._value_list
    if value ~= nil then
        if index == 0 then
            index = key_count + 1
        end
        
        key_list[index] = key
        value_list[index] = value
    else
        table_remove(key_list, index)
        table_remove(value_list, index)
    end
end

---__index
---@private
local function instance_index(t, key)
    local key_list = t._key_list
    for i = 1, #key_list do
        if equivalent(key_list[i], key) then
            return t._value_list[i]
        end
    end

    local meta = getmetatable(t)
    return rawget(meta, key)
end

---@class custom_table
local custom_table = {}

---new一个
---@public
---@return custom_table
function custom_table.new()
    local t =
    {
        cname = 'custom_table',
        _key_list = {},
        _value_list = {},
    }
    return setmetatable(t, custom_table)
end

---数量
---@public
---@return number
function custom_table:count()
    return #self._key_list
end

---遍历
---@public
---@param callback fun(key:any, value:any, ...)
function custom_table:foreach(callback, ...)
    local key_list = self._key_list
    local value_list = self._value_list
    for i = 1, #key_list do
        if callback(key_list[i], value_list[i], ...) then
            break
        end
    end
end

---清理
---@public
function custom_table:clear()
    local key_list = self._key_list
    local value_list = self._value_list
    for i = 1, #key_list do
        key_list[i] = nil
        value_list[i] = nil
    end
end

---销毁
---@public
function custom_table:dispose()
    self:clear()
    
    self._key_list = nil
    self._value_list = nil
end

custom_table.__index = instance_index
custom_table.__newindex = instance_new_index

return custom_table