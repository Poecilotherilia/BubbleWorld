---
--- Generated by lvyuqiang
--- File name : string.lua.txt
--- DateTime : 2021/04/16
--- Description : 字符串相关功能
---

local string_gsub = string.gsub
local string_char = string.char
local string_byte = string.byte
local tostring = tostring

---string是否为空或空串
---@public
---@return boolean
---@param str string 来源字符串
function string.is_nil_or_empty(str)
    return str == nil or str == ''
end

---获取url中的文件名（带后缀）
---@public
---@return string
---@param str string 来源字符串
function string.get_file_name(str)
    local r = str:match("^.+/(.+)$")
    if not r then
        r = str
    end
    return r
end

---获取url中的文件名（不带后缀）
---@public
---@return string
---@param str string 来源字符串
function string.get_file_name_without_extension(str)
    local r = str:match("^.+/(.+)%..+")
    if not r then
        r = str:match("^(.+)%..+")
    end
    return r
end

---字符串转字节数组
---@public
---@return number[]
---@param str string 来源字符串
function string.to_bytes(str)
    return { string.byte(str, 1, -1) }
end

---字节数组转字符串
---@public
---@param bytes number[] 字节数组
---@return string
function string.from_bytes(bytes)
    local str = ''
    for i = 1, #bytes do
        str = str .. str.char(bytes[i])
    end
    return str
end

---字节数组转字符串
---@public
---@param str string
---@param target string
---@return boolean
function string.contains(str, target)
    if string.is_nil_or_empty(target) then
        return false
    end

    return string.find(str, target) ~= nil
end

---分割字符串
---@param str string 来源字符串
---@param separator string 分隔符
---@param buffer string[] 缓存array，若此参数传空，则函数返回新的字符数组，否则返回nil
---@public
---@return string[]
function string.split(str, separator, buffer)
    if string.is_nil_or_empty(separator) then
        return buffer
    end

    local arr = buffer or {}
    local pos = 0

    for st, sp in function()
        return string.find(str, separator, pos, true)
    end do
        table.insert(arr, string.sub(str, pos, st - 1))
        pos = sp + 1
    end
    table.insert(arr, string.sub(str, pos))

    return arr
end

---转换输入字符串中的任何转义字符
---@param str string
function string.unescape(str)
    return cs.Regex.Unescape(str)
end

---字符串转char数组
---@public
---@param str string 来源字符串
---@param buffer string[] 缓存array，若此参数传空，则函数返回新的字符数组，否则返回nil
---@return string[]
function string.convert_to_char_array(str, buffer)
    local string_is_nil_or_empty = string.is_nil_or_empty
    if string_is_nil_or_empty(str) then
        return buffer
    end
    local array_table = array_table
    local length = #str
    local arr = buffer or {}
    local j = 1
    local tmp_byte, byte_count
    for byte in function()
        if j <= length then
            tmp_byte = string_byte(str, j)
            if tmp_byte > 239 then
                byte_count = 4  -- 4字节字符
            elseif tmp_byte > 223 then
                byte_count = 3  -- 汉字
            elseif tmp_byte > 128 then
                byte_count = 2  -- 双字节字符
            else
                byte_count = 1  -- 单字节字符
            end
            j = j + byte_count
            return tmp_byte
        end
    end do
        array_table.insert(arr, string_char(byte))
    end

    return arr
end

---字符串格式化
---@public
---@param fmt string
---@vararg any 参数
---@return string
function string.str_format(fmt, ...)
    if ... == nil then
        return fmt
    end

    local params = { ... }
    local search = function(k)
        k = k + 1
        return tostring(params[k])
    end

    return (string_gsub(fmt, "{(%d+)}", search))
end

---是否以指定字符串开始
---@return boolean
---@public
function string.starts(str, start_str)
    return string.sub(str, 1, string.len(start_str)) == start_str
end

---是否以指定字符串结束
---@return boolean
---@public
function string.ends(str, end_str)
    return end_str == '' or string.sub(str, -string.len(end_str)) == end_str
end