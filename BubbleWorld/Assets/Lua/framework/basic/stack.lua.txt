---
--- Generated by wuhaijun
--- File name : stack.lua.txt
--- DateTime : 2021/3/19
--- Description : 栈
---

local table_remove = table.remove

---@class stack
local stack = {}
stack.__index = stack

---@public
---@return stack
function stack.new(is_weak)
    local instance =
    {
        cname = "stack",
        array = {},
        size = 0,
    }
    if is_weak then
        setmetatable(instance.array, { __mode = "v" })
    end
    return setmetatable(instance, stack)
end

---在栈的顶部插入一个对象
---@public
---@param item any 对象
function stack:push(item)
    if item == nil then return end

    self.size = self.size + 1
    self.array[self.size] = item
end

---移除并返回位于顶部的对象
---@public
---@return any
function stack:pop()
    local count = self:count()
    if count == 0 then return nil end

    return self:remove_at(count)
end

---是否包含对象
---@public
---@return boolean
---@param item any 对象
function stack:contains(item)
    local arr = self.array
    for i = 1, self:count() do
        if arr[i] == item then
            return true
        end
    end

    return false
end

---返回顶部对象，但不移除
---@public
---@return any
function stack:peek()
    local count = self:count()
    if count == 0 then return nil end

    return self.array[count]
end

---删除对象
---@public
---@return boolean
---@param item any 对象
function stack:remove(item)
    local arr = self.array
    for i = 1, self:count() do
        if arr[i] == item then
            if item ~= nil and item.dispose ~= nil then
                item:dispose()
            end
            self:remove_at(i)
            return true
        end
    end

    return false
end

---根据index移除并返回对象
---@public
---@param index number index
---@return any
function stack:remove_at(index)
    if index <= 0 or index > self.size then return end
    
    local item = table_remove(self.array, index)
    if item ~= nil then
        self.size = self.size - 1
        return item
    end
    return nil
end

---包含的对象数量
---@public
---@return number
function stack:count()
    return self.size
end

---是否为空
---@public
---@return boolean
function stack:is_empty()
    return self:count() == 0
end

---遍历
---@public
---@param action fun(item:any, ...) 遍历回调
---@vararg any
function stack:foreach(action, ...)
    if action == nil then return end

    for i = 1, self:count() do
        if action(self.array[i], ...) then
            break
        end
    end
end

---清理
---@public
function stack:clear()
    for i = 1, self.size do
        self.array[i] = nil
    end
    self.size = 0
end

---销毁
---@public
function stack:dispose()
    self.array = nil
    self.size = nil
end

return stack