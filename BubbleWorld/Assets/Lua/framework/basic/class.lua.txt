---
--- Generated by wuhaijun
--- File name : class.lua.txt
--- DateTime : 2021/2/22
--- Description : 面向对象开发
---

---类原型
---@param class_name string 类名[必须]
---@param super table 父类[可选]
function class(class_name, super)
    assert(class_name ~= nil, "class name can't be nil")

    -- class type
    local class_type =
    {
        ---类名
        cname = class_name 
    }

    if super then
        setmetatable(class_type, { __index = super })
    end

    ---创建类对象实例
    ---@public
    class_type.new = function(...)
        -- 实例对象
        local instance = { setters = {}, getters = {} }

        ---创建复合属性
        ---@param name string 属性名称
        ---@param getter function getter
        ---@param setter function setter
        ---@param default_value any 默认值
        ---@public
        function instance:create_complex_property(name, getter, setter, default_value)
            if getter then
                self.getters[name] = getter
            end

            if setter then
                self.setters[name] = setter
            end
            self[name] = default_value
        end

        local instance_index = function(t, k)
            -- 获取实例属性或方法
            local v = rawget(t, k)
            if not v then
                -- 获取父类属性或方法
                v = class_type[k]
                if not v then
                    -- 获取实例getter方法并执行
                    local getter = t.getters[k]
                    if getter then
                        v = getter()
                    end
                end
            end
            return v
        end

        local instance_new_index = function(t, k, v)
            -- 获取实例setter方法并执行
            local setter = t.setters[k]
            if setter then
                setter(v)
            else
                -- 向实例赋值
                rawset(t, k, v)
            end
        end

        setmetatable(instance, { __index = instance_index, __newindex = instance_new_index })

        -- 执行构造函数
        if class_type.ctor then
            class_type.ctor(instance, ...)
        end

        return instance
    end

    return class_type
end