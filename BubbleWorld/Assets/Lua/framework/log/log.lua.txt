---
--- Generated by lvyuqiang
--- File name : log.lua.txt
--- DateTime : 2021/04/16
--- Description : 日志
---

local log_level = {
    info = 0,
    warning = 1,
    error = 2,
    none = 3
}
local print = print
local str_table = {}
local str_table1 = {}
local str_table2 = {}
local array_table = array_table

---@private
local convert_table_to_str = function(t, desc)
    -- key值格式化
    local function format_key(key)
        local tt = type(key)
        if tt == "number" then
            return "[" .. key .. "]"
        elseif tt == "string" then
            local n = tonumber(key)
            if n then
                return "[" .. key .. "]"
            end
        end
        return key
    end
    -- table转字符串
    local function table_to_string(args, cache_table, temp_table, depth)
        array_table.insert(cache_table, args)
        if type(depth) == "number" then
            depth = depth + 1
        else
            depth = 1
        end
        local indent = ""
        for _ = 1, depth do
            indent = indent .. "    "
        end
        for k, v in pairs(args) do
            local key = tostring(k)
            local v_type = type(v)
            if v_type == "table" then
                if array_table.contains(cache_table, v) then
                    array_table.insert(temp_table, indent .. format_key(key) .. " = {检测到循环引用!},\n")
                else
                    array_table.insert(temp_table, string.format("%s%s =\n%s{\n", indent, format_key(key), indent))
                    table_to_string(v, cache_table, temp_table, depth)
                    array_table.insert(temp_table, indent .. "},\n")
                end
            elseif v_type == "string" then
                array_table.insert(temp_table, string.format("%s%s = \"%s\",\n", indent, format_key(key), tostring(v)))
            else
                array_table.insert(temp_table, string.format("%s%s = %s,\n", indent, format_key(key), tostring(v)))
            end 
        end
        table.remove(cache_table)
    end

    local temp = str_table1
    local cache = str_table2
    array_table.clear(temp)
    array_table.clear(cache)

    array_table.insert(temp, (desc or "tableValue = ") .. " \n{\n")
    table_to_string(t, cache, temp)
    array_table.insert(temp, "}")
    return table.concat(temp)
end

---@private
local create_log_content = function(trace, ...)
    array_table.clear(str_table)
    for i = 1, select('#', ...) do
        local s = select(i, ...)
        if type(s) ~= "table" then
            s = tostring(s)
        elseif s.__tostring ~= nil then
            s = s.__tostring(s)
        elseif log.config.output_table then
            s = convert_table_to_str(s, "")
        else
            s = tostring(s)
        end
        array_table.insert(str_table, s)
    end

    local content = table.concat(str_table)
    if trace then
        content = content .. "\n" .. trace
    end
    return content
end

local df_log = { cname = 'df_log' }

---@type boolean 是否是Debug包
local is_debug

---日志设置
---@public
df_log.config = {
    log_level = log_level.info,
    output_table = true,
    enable_trace = true
}

function df_log.init()
    is_debug = game.is_debug
    if is_debug then
        df_log.config.log_level = log_level.info
    else
        df_log.config.log_level = log_level.error
    end
end

---获取枚举字符串名字
---@public
---@param type number
---@param target_eunm enum
function df_log.enum_name(type, target_eunm)
    if is_debug then
        for key, value in pairs(target_eunm) do
            if value == type then
                return key
            end
        end
    end
    return type
end

---打印Info日志
---@public
---@vararg any
function df_log.info(...)
    --if df_log.config.log_level > log_level.info then
    --    return
    --end
    local trace = df_log.config.enable_trace == true and debug.traceback() or nil
    local content = create_log_content(trace, ...)
    print(log_level.info, content)
end

---打印Warning日志
---@public
---@vararg any
function df_log.warning(...)
    if df_log.config.log_level > log_level.warning then
        return
    end
    local trace = df_log.config.enable_trace == true and debug.traceback() or nil
    local content = create_log_content(trace, ...)
    print(log_level.warning, content)
end

---打印Error日志
---@public
---@vararg any
function df_log.error(...)
    if df_log.config.log_level > log_level.error then
        return
    end
    local trace = df_log.config.enable_trace == true and debug.traceback() or nil
    local content = create_log_content(trace, ...)
    print(log_level.error, content)
end

log = df_log