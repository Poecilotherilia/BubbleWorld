---
--- Generated by chenmingzhu
--- File name : housekeeper_system.lua.txt
--- DateTime : 2022/07/20
--- Description : 管家系统
---

local housekeeper_controller = require 'game/systems/housekeeper/housekeeper_controller'
local housekeeper_data = game_data_manager.housekeeper
local message = message
---@type message_type
local message_type = enum.message_type
local data = data
local tables = tables
local camera_manager = camera_manager
local enum_common = enum.common
local camera_layer = enum_common.camera_layer
local camera_blend_type = enum_common.camera_blend_type
---@class housekeeper_system
local housekeeper_system = class("housekeeper_system")

---构造函数
---@protected
function housekeeper_system:ctor()
    self:init()
end

---初始化
---@private
function housekeeper_system:init()

end

---销毁
---@public
function housekeeper_system:dispose()
    self:dispose_controller()
end

--region public functions

---进入管家系统相机模式
---@public
function housekeeper_system:into_housekeeper_system_camera_mode()
    ---隐藏场景中的英雄
    message.broadcast(message_type.COLLEGE_CONTROL_HERO_SHOW_HIDDEN, false)
    self:init_virtual_camera()
end

---还原相机模式
---@public
function housekeeper_system:revert_camera_mode()
    -- 显示场景中英雄
    message.broadcast(message_type.COLLEGE_CONTROL_HERO_SHOW_HIDDEN, true)

    if self.view_camera_id ~= nil then
        camera_manager.remove_virtual_camera(self.view_camera_id)
        self.view_camera_id = nil
    end
end

function housekeeper_system:revert_camera_state()
    if self.view_camera_id ~= nil then
        camera_manager.remove_virtual_camera(self.view_camera_id)
        self.view_camera_id = nil
    end
end

---初始化管家
---@public
function housekeeper_system:init_housekeeper()
    if housekeeper_data.cur_housekeeper_id and housekeeper_data.cur_housekeeper_skin_id then
        self.housekeeper_controller = housekeeper_controller.new()
        self.housekeeper_controller:init_witch_model(housekeeper_data.cur_housekeeper_skin_id)
    end
end

---销毁控制器
---@public
function housekeeper_system:dispose_controller()
    if self.housekeeper_controller then
        self.housekeeper_controller:dispose()
        self.housekeeper_controller = nil
    end
    if self.role_res_go then
        --GameObject.Destroy(self.role_res_go)
        self.role_res_go = nil
    end
end

---预加载下一个模型
---@public
---@param role_res_id string 模型id
function housekeeper_system:preload_next_role_res(role_res_id)
    self.housekeeper_controller:preload_role_action(role_res_id)
    message.broadcast(message_type.HOUSEKEEPER_NEXT_ROLE_RES_LOADED_FINISH)
end

---预加载动作
---@public
---@param action_id string 动作id
function housekeeper_system:preload_action(action_id)
    self.housekeeper_controller:preload_action(action_id)
end

---预加载动作
---@public
---@param action_ids string[] 动作id
function housekeeper_system:preload_actions(action_ids)
    self.housekeeper_controller:preload_actions(action_ids)
end

---播放动作
---@public
---@param action_id string 动作id
---@param callback function 动作完成回调
function housekeeper_system:play_animation(action_id, callback)
    self.housekeeper_controller:play_animation(action_id, callback)
end

---播放换装动作
---@public
function housekeeper_system:play_change_skin_action()
    self.housekeeper_controller:play_change_skin_action()
end

---获取父节点
---@public
function housekeeper_system:get_parent_node()
    return self.housekeeper_controller:get_parent_node()
end

--endregion

---初始化镜头
---@private
function housekeeper_system:init_virtual_camera()
    local point_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_HOUSEKEEPER_CAMERA, tables.ConstClient.properties.String)
    ---@type Point
    local point = data.get(tables.Point.name, point_id)

    -- 创建虚拟相机
    ---@type UnityEngine.GameObject
    local point_go = self:get_parent_node()
    local v_camera, camera_id = camera_manager.generate_virtual_camera(point_go, camera_layer.UI)
    self.view_camera_id = camera_id

    -- 设置相机位置
    if point ~= nil then
        v_camera:SetPosition(point.PositionX / 10000, point.PositionY / 10000, point.PositionZ / 10000)
        v_camera:SetRotation(point.RotationX / 10000, point.RotationY / 10000, point.RotationZ / 10000)
        local camera_lens = v_camera.m_Lens
        camera_lens.FieldOfView = point.Fov / 10000
        v_camera.m_Lens = camera_lens

        camera_manager.show_virtual_camera(camera_id, camera_blend_type.Cut)
    else
        log.error("point data is nil")
    end
end

return housekeeper_system