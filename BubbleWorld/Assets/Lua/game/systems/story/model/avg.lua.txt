---
--- Generated by lvyuqiang
--- File name : avg.lua.txt
--- DateTime : 2022/02/24
--- Description : AVG剧情对话类
---

---@class avg
local avg = class("avg")
local data = data
local table = table
local t = tables
local res = res
local array = array_table
local asset_type = df.enum.asset_type
local tween = cs.TweenUtil
local ease = cs.Ease
local msg = message
local msg_types = enum.message_type
local timer = timer_manager
local camera = camera_manager
local string_is_nil_or_empty = string.is_nil_or_empty
local log = log
local cs = cs
local string = string
local math_max = math.max
local is_table_nil_or_empty = table.is_table_nil_or_empty
local list_util = CS.DeusFramework.Utilities.DfListUtility
local timer_model_enter
local timer_model_leave
local battle = system_manager.battle
local avg_camera_asset = 'Assets/Art/Character/Common/avg_camera.prefab'
--local expression_common_talk_asset = 'Assets/Art/Character/Common/Expression/expression_common_talk.asset'
local story_const = require 'game/systems/story/story_const'
local story_mode = require 'game/systems/story/model/story_mode'
local role_res_util = require 'game/utils/role_res_util'
local enter_direction = require 'game/systems/story/model/actor_enter_direction'
local enter_mode = require 'game/systems/story/model/actor_enter_mode'
local leave_direction = require 'game/systems/story/model/actor_leave_direction'
local leave_mode = require 'game/systems/story/model/actor_leave_mode'
local wwise_util = require 'game/utils/wwise_util/wwise_util'
local wwise_const = wwise_const
local playing_audios = {}
local ui_camera_name = "UICamera"
local scene_camera_name = "SceneCamera"

---构造函数
---@private
function avg:ctor(start_clip_id, camera_pid, mode)
    self.story_mode = mode
    self.avg_table_name = self:get_avg_table_name()
    self.start_clip_id = start_clip_id
    ---当前AVG中所有的角色，key=role_res_id
    self.actors = {}
    ---当前AVG幕中的角色，key（1=左，2=右，3=中间）
    self.clip_actors = {}
    ---播放中的人声
    self.voice_ids = {}
    self.camera_pid = camera_pid
    self.avg_node = cs.GameObject('avg_node')
    self.res_loader = res.create_res_loader()
    self.pool = res.create_res_pool(self.res_loader, self.avg_node.transform)
    self.start_clip = data.get(self.avg_table_name, start_clip_id)
    ---@type AvgMain
    self.current_clip = nil
    self.clips = { [start_clip_id] = self.start_clip }
    self:init_next_clip(self.start_clip)
    msg.add_listener(msg_types.STORY_AVG_CLIP_RESUME_FOR_EXPLORE, self.resume, self)
end

function avg:get_avg_table_name()
    if self.story_mode == story_mode.main_story then
        return t.AvgMain.name
    elseif self.story_mode == story_mode.branch_story then
        return t.AvgBranch.name
    elseif self.story_mode == story_mode.explorer_story then
        return t.AvgExplore.name
    elseif self.story_mode == story_mode.func_story then
        return t.AvgSide.name
    else
        return t.AvgCharacter.name
    end
end

function avg:init_next_clip(current_clip)
    if not is_table_nil_or_empty(current_clip.NextAvg) then
        current_clip.next = {}
        for i = 1, #current_clip.NextAvg do
            local clip_id = current_clip.NextAvg[i]
            if not string_is_nil_or_empty(clip_id) then
                local clip = data.get(self.avg_table_name, clip_id)
                array.insert(current_clip.next, clip)
                if not self.clips[clip_id] then
                    self.clips[clip_id] = clip
                    self:init_next_clip(clip)
                end
            end
        end
    end
end

--region 预加载

---预加载资源
---@public
function avg:preload_sync()
    local role_res_array = {}
    local role_action_array = {}
    for _, clip in pairs(self.clips) do
        if clip.Action ~= nil then
            for i = 1, #clip.Action do
                local action_data = clip.Action[i].Array
                if not is_table_nil_or_empty(action_data) then
                    local role_res = action_data[1]
                    local action1 = action_data[2]
                    local action2 = action_data[3]
                    if not string.is_nil_or_empty(role_res) and not array.contains(role_res_array, role_res) then
                        array.insert(role_res_array, role_res)
                    end
                    if not string.is_nil_or_empty(action1) and not array.contains(role_action_array, action1) then
                        array.insert(role_action_array, action1)
                    end
                    if not string.is_nil_or_empty(action2) and not array.contains(role_action_array, action2) then
                        array.insert(role_action_array, action2)
                    end
                end
            end
        end
    end

    ---预加载角色模型
    for i = 1, #role_res_array do
        local role_res_id = role_res_array[i]
        ---@type RoleRes
        local role_res = data.get(t.RoleRes.name, role_res_id)
        local model_path = role_res.ModelPath
        local avg_point = role_res.SpecialAvgPoint
        local scale = role_res.Scale / 10000
        local role_res_go = res.load_instance_sync(model_path, string.get_file_name_without_extension(model_path), self.avg_node.transform, nil, self.res_loader, nil)
        local pos_x = 2000 + (i - 1) * 2
        role_res_go:SetPosition(pos_x, 0, 0)
        role_res_go:SetLocalScale(scale, scale, scale)
        local actor = { go = role_res_go, avg_point = avg_point, game_unit_behavior = role_res_go:GetComponent(typeof(cs.GameUnitLuaBehaviour)), pos = pos_x, id = role_res_id }
        self.actors[role_res_id] = actor
        local actor_idle_action_id = data.get(t.RoleRes.name, actor.id, t.RoleRes.properties.AvgDefaultAction)
        if string_is_nil_or_empty(actor_idle_action_id) then
            log.error("AvgDefaultAction is nil, RoleRes id: ", actor.id)
        end

        role_res_util.play_animation(actor.game_unit_behavior, actor_idle_action_id, 1, nil, self.res_loader, self.pool)
    end

    ---预加载角色动作
    for i = 1, #role_action_array do
        local action_path = data.get(t.Action.name, role_action_array[i], t.Action.properties.Name)
        res.preload_asset_sync(self.pool, action_path, asset_type.animation_clip)
    end

    -----预加载通用表情
    -----@type DeusFramework.Expression.DfExpression
    --self.expression_talk_common = res.load_asset_sync(expression_common_talk_asset, asset_type.scriptableobject, nil, self.res_loader, nil).Result

    ---预加载镜头
    local avg_camera_go = res.load_instance_sync(avg_camera_asset, 'avg_camera', self.avg_node.transform, nil, self.res_loader, nil)

    ---查找镜头
    ---@type UnityEngine.Transform
    local scene_camera_transform = avg_camera_go.transform:Find('SceneCamera')
    self.model_camera = avg_camera_go.transform:Find('ModelCamera'):GetComponent(typeof(cs.Camera))

    ---未配置场景的功能、探索剧情，需要禁用场景镜头
    if (self.story_mode == story_mode.func_story or self.story_mode == story_mode.explorer_story) and system_manager.story:get_running_story().current_module.Scene == 0 then
        scene_camera_transform:SetActive(false)
    else
        scene_camera_transform:SetActive(true)
        ---设置场景镜头位置
        local pdata = data.get(t.Point.name, self.camera_pid)
        scene_camera_transform:SetPosition(pdata.PositionX / 10000, pdata.PositionY / 10000, pdata.PositionZ / 10000)
        scene_camera_transform:SetRotation(pdata.RotationX / 10000, pdata.RotationY / 10000, pdata.RotationZ / 10000)
    end

    ---设置角色镜头位置
    local model_point = story_const.role_camera_point
    self.model_camera:SetPosition(model_point.PositionX / 10000, model_point.PositionY / 10000, model_point.PositionZ / 10000)
    self.model_camera:SetRotation(model_point.RotationX / 10000, model_point.RotationY / 10000, model_point.RotationZ / 10000)
    ---设置镜头堆栈
    self.camera_stack = camera.main_camera:GetUniversalAdditionalCameraData().cameraStack;
    self.camera_stack:Add(self.model_camera)
    cs.CameraUtility.SetCameraIndex(ui_camera_name, 1)
    cs.CameraUtility.SetCameraIndex(scene_camera_name, 0)
end

--endregion

--region 开始

---开始AVG
function avg:play(end_callback)
    ---战中触发avg，降低音量
    if battle:is_in_battle() then
        wwise_util.set_state_by_id(wwise_const.StateIds.State_Volume_2)
    end
    self.end_callback = end_callback
    self:switch_next_clip()
end

---切换到下一幕
---@public
function avg:switch_next_clip(index)
    self:end_last_clip(false, function()
        local explore_animate = self.current_clip ~= nil and not table.is_table_nil_or_empty(self.current_clip.ExploreAnimate)
        if explore_animate then
            self:pause()
            msg.broadcast(msg_types.STORY_AVG_CLIP_PAUSE_OR_SKIP_FOR_EXPLORE, { is_skip = false, data = self.current_clip.ExploreAnimate })
        else
            self:switch_next_clip_internal(index)
        end
    end)
end

---@private
function avg:switch_next_clip_internal(index)
    if self.is_paused then
        return
    end
    local next_clip = self:get_next_clip(index)
    ---继续下一幕
    if next_clip then
        self.current_clip = next_clip
        msg.broadcast(msg_types.STORY_AVG_CLIP_START, self.current_clip)
        ---添加灰色滤镜
        if array.contains(self.current_clip.MemoryFilter, 1) then
            msg.broadcast(msg_types.STORY_ADD_AVG_GRAY_FILTER)
        end
        self:play_clip_model_enter()
    else
        self:stop(false)
    end
end

---暂停
---@public
function avg:pause()
    self.is_paused = true
end

---恢复播放
---@public
---@param is_next boolean
function avg:resume(is_next)
    if self.is_paused then
        self.is_paused = false
        if timer_model_leave ~= nil then
            timer.remove_timer(timer_model_leave, true)
            timer_model_leave = nil
        end
        if is_next then
            self:switch_next_clip_internal()
        end
    end
end

---获取下一幕
function avg:get_next_clip(index)
    if index == nil then
        index = 1
    end
    local next_clip
    if self.current_clip then
        if self.current_clip.next and index <= #self.current_clip.next then
            next_clip = self.current_clip.next[index]
        else
            next_clip = nil
        end
    else
        next_clip = self.start_clip
    end
    return next_clip
end

---模型进入
function avg:play_clip_model_enter()
    self.entering = true
    local wait_timer
    if self.current_clip.EnterAvg then
        for i = 1, #self.current_clip.EnterAvg do
            local enter_data = self.current_clip.EnterAvg[i].Array
            if not is_table_nil_or_empty(enter_data) then
                ---站位点
                local actor_pos = enter_data[1]
                ---入场方向
                local actor_enter_direction = enter_data[2]
                ---入场方式
                local actor_enter_mode = enter_data[3]
                local action_data
                if not is_table_nil_or_empty(self.current_clip.Action) then
                    local action_data_group = self.current_clip.Action[actor_pos]
                    if action_data_group then
                        action_data = action_data_group.Array
                    else
                        log.error("Action data error for play_clip_model_enter: ", self.current_clip.Id, ", actor_pos error: ", actor_pos)
                    end
                end

                if is_table_nil_or_empty(action_data) then
                    log.error("Action data error for play_clip_model_enter: ", self.current_clip.Id)
                end

                ---角色模型
                local actor_res_id = action_data[1]
                local actor = self.actors[actor_res_id]

                ---刷新当前幕中角色位置
                for k, v in pairs(self.clip_actors) do
                    if v == actor then
                        self.clip_actors[k] = nil
                        break
                    end
                end
                self.clip_actors[actor_pos] = actor

                ---@type UnityEngine.GameObject
                local role_res_go = actor.go
                local avg_point = actor.avg_point

                ---设置入场动作
                if actor_enter_direction ~= enter_direction.from_current then
                    local actor_enter_action_id = data.get(t.RoleRes.name, actor.id, t.RoleRes.properties.AvgDefaultAction)
                    role_res_util.play_animation(actor.game_unit_behavior, actor_enter_action_id, 1, nil, self.res_loader, self.pool)
                end

                ---模型置灰
                actor.game_unit_behavior.IsGray = true

                local pos_x = 0
                local pos_y = 0
                local pos_z = 0
                local rotation_x = 0
                local rotation_y = 0
                local rotation_z = 0
                if not is_table_nil_or_empty(avg_point) then
                    local dev_group = avg_point[actor_pos].Array
                    if not is_table_nil_or_empty(dev_group) then
                        pos_x = dev_group[1] / 10000
                        pos_y = dev_group[2] / 10000
                        pos_z = dev_group[3] / 10000
                        rotation_x = dev_group[4] / 10000
                        rotation_y = dev_group[5] / 10000
                        rotation_z = dev_group[6] / 10000
                    else
                        log.error("avg point data error: ", actor.id)
                    end
                else
                    local default_point = story_const.role_points[actor_pos]
                    pos_x = default_point.PositionX / 10000
                    pos_y = default_point.PositionY / 10000
                    pos_z = default_point.PositionZ / 10000
                    rotation_x = default_point.RotationX / 10000
                    rotation_y = default_point.RotationY / 10000
                    rotation_z = default_point.RotationZ / 10000
                end
                role_res_go:SetRotation(rotation_x, rotation_y, rotation_z)
                if actor_enter_mode == enter_mode.translation then
                    wait_timer = true
                    local start_pos = story_const.role_points_outside[actor_enter_direction]
                    if start_pos then
                        local start_pos_x = start_pos.PositionX / 10000
                        local start_pos_y = start_pos.PositionY / 10000
                        local start_pos_z = start_pos.PositionZ / 10000
                        role_res_go:SetPosition(start_pos_x, start_pos_y, start_pos_z)
                    end
                    tween.DOLocalMove(role_res_go, pos_x, pos_y, pos_z, story_const.actor_move_duration, 0, ease.Linear)
                else
                    ---闪现
                    role_res_go:SetPosition(pos_x, pos_y, pos_z)
                end
            end
        end
    end

    local callback = function()
        timer_model_enter = nil
        self:play_clip_role_show()
        self:shake()
        msg.broadcast(msg_types.STORY_AVG_CLIP_MODEL_ENTER_END)
        self.entering = false

        ---展示AVG背景图片
        if not is_table_nil_or_empty(self.current_clip.BackGroundImage) then
            msg.broadcast(msg_types.STORY_SET_AVG_BACK_IMAGE, self.current_clip.BackGroundImage[1], self.current_clip.BackGroundImage[2])
        end
        ---展示AVG前景图片
        if not is_table_nil_or_empty(self.current_clip.FrontImage) then
            msg.broadcast(msg_types.STORY_SET_AVG_FRONT_IMAGE, self.current_clip.FrontImage[1], self.current_clip.FrontImage[2], self.current_clip.FrontImage[3] == '1')
        end
        ---展示AVG前景特效
        if not is_table_nil_or_empty(self.current_clip.Effect) then
            msg.broadcast(msg_types.STORY_ADD_AVG_FRONT_EFFECT, self.current_clip.Effect)
        end
    end

    if wait_timer then
        timer_model_enter = timer.add_timer(story_const.actor_move_duration, callback)
    else
        callback()
    end
end

---震动
function avg:shake()
    for _, v in pairs(self.current_clip.ShakingRole) do
        if v == -1 then
            msg.broadcast(msg_types.STORY_AVG_SHAKE_SCENE)
        else
            local go = self.clip_actors[v].go
            tween.DoShake(go, 0.3, 0.1)
        end
    end
end

---角色表演动作、声音、BGM
function avg:play_clip_role_show()
    if self.current_clip.Action then
        for i = 1, #self.current_clip.Action do
            local action_data = self.current_clip.Action[i].Array
            if not is_table_nil_or_empty(action_data) then
                ---角色模型
                local actor_res_id = action_data[1]
                ---引导动作
                local actor_show_action_id = action_data[2]
                ---循环动作
                local actor_loop_action_id = action_data[3]
                if string.is_nil_or_empty(actor_loop_action_id) then
                    log.error("loop action is nil: ", self.current_clip.Id)
                    return
                end
                local actor = self.actors[actor_res_id]
                ---播放角色动作
                if not string.is_nil_or_empty(actor_show_action_id) then
                    role_res_util.play_animation(actor.game_unit_behavior, actor_show_action_id, 1, nil, self.res_loader, self.pool, function()
                        role_res_util.play_animation(actor.game_unit_behavior, actor_loop_action_id, 1, nil, self.res_loader, self.pool)
                    end)
                else
                    role_res_util.play_animation(actor.game_unit_behavior, actor_loop_action_id, 1, nil, self.res_loader, self.pool)
                end
            end
        end
    end

    -----播放角色表情 
    --for i = 1, #self.current_clip.SpeakingRole do
    --    local speak_actor_index = self.current_clip.SpeakingRole[i]
    --    local speak_actor = self.clip_actors[speak_actor_index]
    --    speak_actor.expression:Play(self.expression_talk_common)
    --end

    ---播放角色语音
    --if self.current_clip.RoleVoice ~= '' and speak_actor then
    if self.current_clip.RoleVoice ~= '' then
        array.insert(self.voice_ids, self.current_clip.RoleVoice)
        wwise_util.play_audio(self.current_clip.RoleVoice, nil, function(ct)
            local normal_callback = array.contains(self.voice_ids, ct.audio_id)
            array.remove(self.voice_ids, ct.audio_id)
            --self:stop_current_clip_expression()
            if normal_callback then
                msg.broadcast(msg_types.STORY_AVG_CLIP_VOICE_END)
            end
        end)
    else
        msg.broadcast(msg_types.STORY_AVG_CLIP_VOICE_END)
    end

    ---模型置灰变化
    for key, actor in pairs(self.clip_actors) do
        if array.contains(self.current_clip.SpeakingRole, key) then
            actor.game_unit_behavior.IsGray = false
        else
            actor.game_unit_behavior.IsGray = true
        end
    end

    ---播放音效
    if not table.is_table_nil_or_empty(self.current_clip.AudioEffectStart) then
        for i = 1, #self.current_clip.AudioEffectStart do
            local ae_id = self.current_clip.AudioEffectStart[i]
            wwise_util.play_audio(ae_id)
            array.insert(playing_audios, ae_id)
        end
    end

    ---播放bgm
    local bgm_id = self.current_clip.BGMStart
    if not string_is_nil_or_empty(bgm_id) then
        wwise_util.play_audio(bgm_id)
        array.insert(playing_audios, bgm_id)
    end
end

--endregion

--region 结束

---结束上一幕
function avg:end_last_clip(is_skip, callback)
    self.exiting = true
    local actor_move_duration = 0
    local wait_duration = 0
    ---结束语音
    for i = 1, #self.voice_ids do
        local voice_id = self.voice_ids[i]
        wwise_util.stop_audio(voice_id)
    end
    array.clear(self.voice_ids)

    if self.current_clip then
        -----结束表情
        --self:stop_current_clip_expression()
        ---结束音效
        if not table.is_table_nil_or_empty(self.current_clip.AudioEffectEnd) then
            for i = 1, #self.current_clip.AudioEffectEnd do
                local ae_id = self.current_clip.AudioEffectEnd[i]
                wwise_util.stop_audio(ae_id)
                array.remove(playing_audios, ae_id)
            end
        end
        ---结束BGM
        local stop_bgm_id = self.current_clip.BGMEnd
        if not string_is_nil_or_empty(stop_bgm_id) then
            wwise_util.stop_audio(stop_bgm_id)
            array.remove(playing_audios, stop_bgm_id)
        end

        ---角色离场
        if self.current_clip.ExitAvg and not is_skip then
            for i = 1, #self.current_clip.ExitAvg do
                local exit_data = self.current_clip.ExitAvg[i].Array
                if exit_data then
                    ---站位点
                    local actor_pos = exit_data[1]
                    ---离场方向
                    local actor_leave_direction = exit_data[2]
                    ---离场方式
                    local actor_leave_mode = exit_data[3]
                    local actor = self.clip_actors[actor_pos]
                    if actor then
                        if actor_leave_mode == leave_mode.translation then
                            if actor_leave_direction == leave_direction.none then
                                log.error("actor_leave_direction is 0")
                            end
                            local end_pos = story_const.role_points_outside[actor_leave_direction]
                            actor_move_duration = story_const.actor_move_duration
                            tween.DOLocalMove(actor.go, end_pos.PositionX / 10000, end_pos.PositionY / 10000, end_pos.PositionZ / 10000, story_const.actor_move_duration, 0, ease.Linear, function()
                                actor.go:SetPosition(actor.pos, 0, 0)
                            end)
                        else
                            ---瞬间消失
                            actor.go:SetPosition(actor.pos, 0, 0)
                        end
                        self.clip_actors[actor_pos] = nil
                    else
                        log.error('leave actor from last clip is nil: ', self.current_clip.Id)
                    end
                end
            end
        end

        ---移除AVG背景图片
        if self.current_clip.BackGroundImageRemove > 0 then
            if self.current_clip.BackGroundImageRemove ~= 3 then
                wait_duration = story_const.back_sprite_duration
            end
            msg.broadcast(msg_types.STORY_CLEAR_AVG_BACK_IMAGE, self.current_clip.BackGroundImageRemove)
        end
        ---移除AVG前景图片
        if self.current_clip.FrontImageRemove > 0 then
            if self.current_clip.FrontImageRemove ~= 3 then
                wait_duration = story_const.back_sprite_duration
            end
            msg.broadcast(msg_types.STORY_CLEAR_AVG_FRONT_IMAGE, self.current_clip.FrontImageRemove)
        end
        ---移除AVG前景特效
        if not string.is_nil_or_empty(self.current_clip.EffectRemove) then
            msg.broadcast(msg_types.STORY_REMOVE_AVG_FRONT_EFFECT, self.current_clip.EffectRemove)
        end
        ---为当前幕移除灰色滤镜
        if array.contains(self.current_clip.MemoryFilterEnd, 1) then
            wait_duration = story_const.back_sprite_duration
            msg.broadcast(msg_types.STORY_REMOVE_AVG_GRAY_FILTER)
        end
        ---幕之间淡入淡出
        if self:is_clip_fade_in_out_enable() then
            wait_duration = story_const.back_sprite_duration
        end
    end
    if self.current_clip then
        msg.broadcast(msg_types.STORY_AVG_CLIP_STOP, self.current_clip)
    end
    local callback_func = function()
        if callback then
            callback()
        end
    end
    if actor_move_duration > 0 or wait_duration > 0 then
        local duration = math_max(actor_move_duration, wait_duration)

        timer_model_leave = timer.add_timer(duration + 0.1, function()
            timer_model_leave = nil
            self.exiting = false
            callback_func()
        end)
    else
        self.exiting = false
        callback_func()
    end
end

---幕之间淡入淡出是否可用
---@protected
function avg:is_clip_fade_in_out_enable()
    local next_clip = self:get_next_clip()
    if next_clip then
        ---AVG下一幕添加褪色滤镜
        local avg_add_fade_filter_mask = array.contains(next_clip.MemoryFilter, 2)
        ---AVG当前幕移除褪色滤镜
        local avg_remove_fade_filter_mask = array.contains(self.current_clip.MemoryFilterEnd, 2)
        return avg_add_fade_filter_mask or avg_remove_fade_filter_mask
    end
    return false
end

-----结束当前说话角色的表情
--function avg:stop_current_clip_expression()
--    if self.current_clip and #self.voice_ids == 0 then
--        for i = 1, #self.current_clip.SpeakingRole do
--            local speak_actor_index = self.current_clip.SpeakingRole[i]
--            local speak_actor = self.clip_actors[speak_actor_index]
--            if speak_actor and speak_actor.expression then
--                speak_actor.expression:Stop()
--            end
--        end
--    end
--end

---结束AVG
function avg:stop(skip)
    ---入场或出场时，禁止跳过
    if self.entering or self.exiting then
        return
    end

    ---停止全部声音
    for i = 1, #playing_audios do
        local audio_id = playing_audios[i]
        wwise_util.stop_audio(audio_id)
    end
    array.clear(playing_audios)

    if skip then
        self:end_last_clip(true, function()
            self:invoke_end_callback()
            msg.broadcast(msg_types.STORY_AVG_CLIP_PAUSE_OR_SKIP_FOR_EXPLORE, { is_skip = true })
        end)
    else
        self:invoke_end_callback()
    end
end

---@private
function avg:invoke_end_callback()
    ---战中触发avg，恢复音量
    if battle:is_in_battle() then
        wwise_util.set_state_by_id(wwise_const.StateIds.State_Volume_Normal)
    end
    if self.end_callback then
        self.end_callback()
    end
end

--endregion

---@public
function avg:dispose()
    msg.remove_listener(msg_types.STORY_AVG_CLIP_RESUME_FOR_EXPLORE, self.resume, self)
    ---取消定时器
    if timer_model_enter ~= nil then
        timer.remove_timer(timer_model_enter)
        timer_model_enter = nil
    end
    if timer_model_leave ~= nil then
        timer.remove_timer(timer_model_leave)
        timer_model_leave = nil
    end
    ---恢复相机堆栈
    self.camera_stack:Remove(self.model_camera)
    cs.CameraUtility.SetCameraIndex(ui_camera_name, 0)
    cs.CameraUtility.SetCameraIndex(scene_camera_name, 1)
    self.camera_stack = nil
    self.model_camera = nil
    --self.expression_talk_common = nil
    self.pool:Clear()
    self.res_loader:Dispose()
    cs.GameObject.Destroy(self.avg_node)
    self.end_callback = nil
    self.clips = nil
    self.start_clip = nil
    self.current_clip = nil
    self.index = 0
    self.actors = nil
    self.clip_actors = nil
    self.avg_node = nil
    self.res_loader = nil
    self.pool = nil
end

return avg