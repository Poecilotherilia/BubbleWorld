---
--- Generated by pan zhi yuan
--- File name : guild_controller.lua.txt
--- DateTime : 2023/10/31
--- Description :
---
local role_res_util = require 'game/utils/role_res_util'
local super = require 'game/modelshow/model_show_controller'
local data = data
local camera_manager = camera_manager
local CinemachineVirtualCamera = cs.CinemachineVirtualCamera
local GameUnitLuaBehaviour = cs.GameUnitLuaBehaviour
local Ease = cs.Ease
local tables = tables
local res = res
local log = log
local cs = cs
local GameObject = cs.GameObject
local string = string
local scene = scene
local typeof = typeof

---@class guild_controller:model_show_controller
local guild_controller = class("guild_controller", super)

---构造函数
---@protected
function guild_controller:ctor()
    ---ui特效根节点
    ---@type UnityEngine.GameObject
    self.ui_eff_root = nil

    ---@type UnityEngine.GameObject
    self.model_root = GameObject.Find("Faker/ModelRoot")

    --@type UnityEngine.GameObject
    self.camera_root = GameObject.Find("Faker/CameraRoot")

    ---@type UnityEngine.GameObject
    self.pool_root = GameObject.Find("Faker/PoolRoot")
    
    ---@type DeusFramework.Res.DfResLoader
    self.res_loader = res.create_res_loader()
    ---@type DeusFramework.Pool.DfResPool
    self.res_pool = res.create_res_pool(self.res_loader, self.pool_root.transform)
    self.role_dict = {}
end

function guild_controller:init_camera()
    local camera_path = "Assets/Art/Character/Common/model_show_camera.prefab";
    res.load_instance_async(camera_path,
            string.get_file_name_without_extension(camera_path),
            self.camera_root.transform,
            nil,
            self.res_loader,
            nil,
            function(obj)
                self:on_load_v_camera_callback(obj)
            end
    )
end

---预加载资源
---@public
function guild_controller:preload_sync(role_res, role_action)
    self.role_res = role_res
    if self.role_dict[role_res] then
        local obj
        for i, v in pairs(self.role_dict) do
            if i == role_res then
                v.go:SetActive(true)
                obj = v.go
            else
                v.go:SetActive(false)
            end
        end
        return obj
    else
        local point_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_WITCH_MODEL_INITIAL_POSITION).String
        local idle_action = role_action or data.get(tables.RoleRes.name, role_res).IdleAction
        if idle_action then
            ---预加载角色动作
            role_res_util.preload_action(idle_action, self.res_pool)
        end
        local role_res_go = role_res_util.load_role_res_sync(role_res, role_res,
                self.model_root.transform, point_id, self.res_loader, self.res_pool)
        role_res_go:SetLocalPosition(0, -0.79, 2.3)
        role_res_go:SetLocalRotation(0, 180, 0)
        local role = {
            go = role_res_go,
            game_unit_behavior = role_res_go:GetComponent(typeof(cs.GameUnitLuaBehaviour)),
            id = role_res,
            action_id = idle_action,
            behavior = role_res_go:GetComponent(typeof(cs.CharacterLuaBehaviour))
        }
        for i, v in pairs(self.role_dict) do
            v.go:SetActive(false)
        end
        self.role_dict[role_res] = role
        return self.role_dict[role_res].go
    end
end

function guild_controller:get_effect_root()
    return self.model_root
end

function guild_controller:hide_role()
    for i, v in pairs(self.role_dict) do
        v.go:SetActive(false)
    end
end

function guild_controller:zoom_in_camera(callback)
    self.virtual_camera:DOFov(50, 1, 0, Ease.Linear, callback)
end

function guild_controller:zoom_out_camera(callback)
    self.virtual_camera:DOFov(70, 1, 0, Ease.Linear, callback)
end

function guild_controller:hide_virtual_camera()
    camera_manager.hide_virtual_camera(self.camera_id)
end

function guild_controller:unload_sync()
    for i, v in pairs(self.role_dict) do
        res.unload_instance(v.go, self.res_loader)
        self.role_dict[i] = nil
    end
    self.role_dict = {}
end

---播放待机动作
---@public
function guild_controller:play_idle_action(callback)
    if self.role_dict[self.role_res] then
        ---@type Game.Behaviour.GameUnitLuaBehaviour
        local game_unit_behavior = self.role_dict[self.role_res].game_unit_behavior
        if game_unit_behavior then
            local idle_action_id = data.get(tables.RoleRes.name, self.role_res, tables.RoleRes.properties.IdleAction)
            role_res_util.play_animation(game_unit_behavior, idle_action_id, 1, nil, self.res_loader, self.pool, callback)
        else
            log.error("role go is nil")
        end
    end
end

function guild_controller:dispose()
    self.model_root = nil
    self.camera_root = nil
    self.res_pool:Clear()
    self.res_pool = nil
    self.res_loader:Dispose()
    self.res_loader = nil
end

return guild_controller