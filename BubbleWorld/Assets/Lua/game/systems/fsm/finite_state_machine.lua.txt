---
--- Generated by bbhuang
--- File name : finite_state_machine.lua.txt
--- DateTime : 2023/02/14
--- Description : 有限状态机 区别于战斗使用的ecs
---

---@class finite_state_machine
local finite_state_machine = class("finite_state_machine")

---构造函数
---@protected
function finite_state_machine:ctor()
    ---@type table<string, guide_state>
    self.states = {}
    
    ---@type guide_state
    self.cur_state = nil
end

---添加状态
---@public
---@param state guide_state
function finite_state_machine:add_state(state)
    local cur_states = self.states
    
    local id = state:getId()
    if cur_states[id] then
        log.error("repeat state ", id)
        return
    end

    if not next(cur_states) then
        self.cur_state = state
    end
    
    cur_states[id] = state
end

---删除状态
---@public
---@param id string
function finite_state_machine:del_state(id)
    self.states[id] = nil
end

---获取下一状态
---@public
---@param t string
function finite_state_machine:get_map_state(t)
    local cur_state = self.cur_state
    local id = cur_state:get_next_state(t)
    return id
end

---切换状态
---@public
---@param id string
function finite_state_machine:change_state(id, ...)
    local cur_state = self.cur_state
    
    id = id and cur_state:get_next_state(id) or cur_state:get_next_state(t)
    if not id then 
        return
    end

    if not cur_state:can_change(...) then
        return
    end
    
    local next_state = self.states[id]
    if not next_state then return end
    
    cur_state:exit(id)
    
    self.cur_state = next_state
    next_state:enter(...)
    
    return next_state
end

---强制切换状态
---@public
---@param id string
---@param a any
function finite_state_machine:force_state(id, a)
    local next_state = self.states[id]
    if not next_state then return end
    
    self.cur_state:exit()
    self.cur_state = next_state
    next_state:enter(a)
    
    return next_state
end

---获取当前状态
---@public
---@return guide_state 
function finite_state_machine:get_cur_state()
    return self.cur_state
end

---设置当前状态，仅仅在set fsm 时 使用
---@param id string
function finite_state_machine:set_cur_state(id)
    if not self.states[id] then return end
    
    self.cur_state = self.states[id]
end

---获取状态
---@public
---@param id
---@return guide_state
function finite_state_machine:get_state(id)
   return self.states[id] 
end

---轮询
---@public
function finite_state_machine:on_update()
    if not self.cur_state then return end
    
    self.cur_state:on_update()
end

---@public
function finite_state_machine:dispose()
    if self.cur_state then
        self.cur_state:exit()
    end
    
    self.cur_state = nil
    for i, v in pairs(self.states or {}) do
        v:dispose()
    end
    self.states = nil
end

return finite_state_machine