---
--- Generated by bbhuang
--- File name : guide_state.lua.txt
--- DateTime : 2023/02/14
--- Description : 引导状态
---
local data = data
local tables = tables
local guide_util = require 'game/utils/guide_utility'
local message_type = enum.message_type
local message = message
local guide_node_type = enum.guide.guide_node_type
local guide_trigger_type = enum.guide.guide_trigger_type

local string_is_nil_empty = string.is_nil_or_empty
---@class guide_state
local guide_state = class("guide_state")

---构造函数
---@protected
function guide_state:ctor(id)
    ---@type string
    self.id = id
    
    ---@type string
    self.trigger_id = nil
    
    ---@type string
    self.finish_id = nil
    
    ---@type finite_state_machine
    self.fsm = nil
    
    ---@type boolean
    self.is_finish = nil
    
    ---@type boolean
    self.is_trigger = nil
    
    ---是否是final node
    ---@type boolean
    self.is_final = nil
    
    ---@type string
    self.next_id = nil
    
    ---@type string
    self.timer_id = nil
    
    ---@type boolean
    self.is_timer_state = data.get(tables.Guide.name, id, tables.Guide.properties.BindingResourceType) == guide_node_type.TIMER

    ---@type number
    self.timer_duration = nil
    if self.is_timer_state then
        self.timer_duration = tonumber(data.get(tables.Guide.name, id, tables.Guide.properties.BindingResource)[1])
        message.add_listener(message_type.PLAYER_OPERATE_START, self.on_player_operate_start, self)
    end
    
    ---@type function
    self.timer_complete_back = function()
        message.broadcast(message_type.GUIDE_TIMER_END)
        message.broadcast(message_type.GUIDE_TRY_TRIGGER, guide_trigger_type.guide_timer_over)
        self.timer_id = nil
    end
end

---@public
---@param trigger_id string
---@param finish_id string
---@param next_id string
---@param is_final boolean
function guide_state:init(trigger_id, finish_id, next_id, is_final)
    self.trigger_id = trigger_id
    self.finish_id = finish_id
    self.next_id = next_id
    self.is_final = is_final
end

---@public
function guide_state:getId()
    return self.id
end

---获取下一节点
---@public
function guide_state:get_next_state()
    return self.next_id
end

---获取finish_id
---@public
function guide_state:get_trigger_id()
    return self.trigger_id
end

---获取finish_id
---@public
function guide_state:get_finish_id()
    return self.finish_id
end

---是否是final节点
---@public
---@return boolean
function guide_state:is_final_state()
    return self.is_final    
end

---是否是final节点
---@public
---@return boolean
function guide_state:is_finish_state()
    return self.is_finish
end

---是否触发
---@public
function guide_state:is_trigger_state()
    return self.is_trigger
end

---设置是否触发
---@public
function guide_state:set_trigger_state(trigger)
    if self.is_trigger == trigger then
        return
    end
    self.is_trigger = trigger
    if self.is_trigger then
        if self.is_timer_state then
            self.timer_id = timer_manager.add_timer(self.timer_duration, self.timer_complete_back)
            message.broadcast(enum.message_type.GUIDE_TIMER_START, self.id)
        else
            message.broadcast(enum.message_type.GUIDE_START, self.id)
        end
    end
end

---能否切换下一状态
---@private
function guide_state:can_change(...)
    if self.is_finish then
        return true
    end
    
    local func = self.finish_id
    if string_is_nil_empty(func) then
        log.error("no finish func id = ", self.id)
        return true
    end
    
    self.is_finish = guide_util.check_exe_guide_func(func, ...)
    
    return self.is_finish
end

---检测是否完成
---@public
function guide_state:check_is_finish(...)
    if not self.is_finish then
        local is_empty_click = data.get(tables.Guide.name, self.id, tables.Guide.properties.EmptyClickValue) == 1
        self.is_finish = is_empty_click
    end
    
    local res = self:can_change(...)
    return res
end

---进入
---@public
function guide_state:enter(type, ...)
    if type == self.trigger_id then
        self:check_trigger(...)
    end
end

---检测是否触发
---@public
function guide_state:check_trigger(...)
    if self.is_trigger then
        return
    end

    local type = ...
    local func = self.trigger_id
    if string_is_nil_empty(func) then
        self.is_trigger = true
    else
        self.is_trigger = guide_util.check_exe_guide_func(func, ...)
    end

    if self.is_trigger then
        if self.is_timer_state then
            self.timer_id = timer_manager.add_timer(self.timer_duration, self.timer_complete_back)
            message.broadcast(enum.message_type.GUIDE_TIMER_START, self.id)
        else
            message.broadcast(enum.message_type.GUIDE_START, self.id)
        end
    end
end

---轮询触发
---@private
function guide_state:check_tick()
    
end

---@public
function guide_state:on_update()
    do return end
    if not self.is_trigger then
        self:check_trigger()
        return
    end
    
    self:check_tick()
end

---退出
---@public
function guide_state:exit()
    if self.is_trigger then
        message.broadcast(message_type.GUIDE_END, self.id)
    end
    self.is_finish = nil
    self.is_trigger = nil
end

---@public
---@param fsm finite_state_machine
function guide_state:set_fsm(fsm)
    self.fsm = fsm
end

---是否是计时状态
---@public
---@return boolean
function guide_state:get_is_timer_state()
    return self.is_timer_state
end

---玩家操作
---@private
function guide_state:on_player_operate_start()
    if not self.is_timer_state then
        return
    end

    if not self.is_trigger then
        return
    end

    if self.is_finish then
        return
    end

    message.broadcast(message_type.GUIDE_TIMER_ABORT)
end

---销毁
---@public
function guide_state:dispose()
    self.fsm = nil
    self.id = nil
    self.finish_id = nil
    self.is_finish = nil
    self.trigger_id = nil
    self.is_trigger = nil
    self.is_final = nil
    self.next_id = nil
    if self.timer_id then
        timer_manager.remove_timer(self.timer_id)
        message.broadcast(message_type.GUIDE_TIMER_END)
    end
    self.timer_id = nil

    if self.is_timer_state then
        message.remove_listener(message_type.PLAYER_OPERATE_START, self.on_player_operate_start, self)
    end
    self.is_timer_state = nil
end

return guide_state