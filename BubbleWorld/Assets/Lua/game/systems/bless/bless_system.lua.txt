---
--- Generated by lvyuqiang
--- File name : bless_system.lua.txt
--- DateTime : 2022/10/11
--- Description : 
---

---@class bless_system
local bless_system = class("bless_system")
local bless_class = require "game/systems/bless/model/bless"
local t = tables
local log = log
local data = data
local string = string
local array = array_table
local unpack = table.unpack
local item_util = require 'game/utils/item_utility'
local localization = localization
local string_keys = string_keys

---构造函数
---@private
function bless_system:ctor()
end

---获取生效中的祝福列表
---@return Bless[]
---@public
function bless_system:get_bless()
    local blesses = {}
    local bless_datas = data.get_all(t.Bless.name)
    local player_obj = game_data_manager.player.player_net_obj
    local bless_record_rows = player_obj:get_record(t.Player.records.BlessActivated.name):get_rows()
    for _, v in pairs(bless_record_rows) do
        ---@type Player_Record_BlessActivated
        local row = v
        local id = row.Id

        ---从配表查询配置数据
        local bless_data = nil
        for k, v in pairs(bless_datas) do
            if k == id then
                bless_data = v
                break
            end
        end

        if bless_data then
            ---开始时间戳
            bless_data.StartTs = row.StartTs
            ---层数
            bless_data.Count = row.Count
            array.insert(blesses, bless_data)
        else
            log.error("bless doesn't exist:", id)
        end
    end
    return blesses
end

---获取生效中的祝福分组列表
---@public
function bless_system:get_bless_group()
    local bless_groups = {}
    local bless_datas = self:get_bless()
    local time_type_id_prefix = 'KW_BLESS_TYPE_ICON_0'
    for i = 1, #bless_datas do
        ---@type Bless
        local bless_data = bless_datas[i]
        local group = bless_groups[bless_data.SourceType]
        if not group then
            group = {}
            bless_groups[bless_data.SourceType] = group
        end

        local bless = bless_class.new()
        bless.id = bless_data.Id
        bless.quality_icon = item_util.get_item_quality_icon_by_type(bless_data.Quality)
        bless.icon = bless_data.Picture
        bless.name = bless_data.Name
        --bless.desc = string.str_format(bless_data.Desc, unpack(bless_data.ParaNum))
        bless.desc = bless_data.Desc
        bless.interval = bless_data.Interval
        bless.source_type = bless_data.SourceType
        bless.bless_type = bless_data.BlessType

        if bless_data.TimeType ~= 0 then
            bless.time_type_icon = data.get(t.ConstClient.name, time_type_id_prefix .. bless_data.TimeType, t.ConstClient.properties.String)
            bless.time_type_string = bless_data.TimeType == 1 and localization.get_string(string_keys.bless_time_type_daily) or localization.get_string(string_keys.bless_time_type_online)
        end
        bless.start_ts = bless_data.StartTs
        bless.count = bless_data.Count
        array.insert(group, bless)
    end
    return bless_groups
end

return bless_system