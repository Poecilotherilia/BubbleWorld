---
--- Generated by libin
--- File name : chat_system.lua.txt
--- DataTime : 2022/12/08
--- Description : 
---

local chat_net = require "game/systems/chat/network/chat_network"
local string = string
local timer_mgr = timer_manager
local game_sdk_manager = game_sdk_manager
local data = data
local tables = tables
local message_box = message_box
local conversation_type = CS.AgoraChat.ConversationType

---@class chat_system
local chat_system = class("chat_system")

--region base api

---构造函数
---@protected
function chat_system:ctor()
    
    ---@type chat_network
    self.network = chat_net.new()
    
    ---@type table<string, number> key:聊天频道mid
    self.chat_limit_dict = {}
    
    ---@type table<string, number> key:聊天频道mid
    self.limit_timer_id_dict = {}
    
    ---@type number 
    self.chat_limit_time = data.get(tables.ConstComm.name, tables.ConstComm.ids.KW_CHAT_SEND_INTERVAL, tables.ConstComm.properties.Int)

    ---@type boolean
    self.is_start_system = false
    ---@type number
    self.loop_timer_id = nil
end

---销毁
---@public
function chat_system:dispose()
    game_sdk_manager.agora_sdk.logout()
    
    self.network:dispose()
    self.network = nil

    for _, v in pairs(self.limit_timer_id_dict) do
        if nil ~= v then
            timer_mgr.remove_timer(v)
        end
    end
    self.limit_timer_id_dict = nil
    self.chat_limit_dict = nil
    self.chat_limit_time = nil
    self.is_start_system = nil
    if nil ~= self.loop_timer_id then
        timer_mgr.remove_timer(self.loop_timer_id)
        self.loop_timer_id = nil
    end
end

--endregion

--region

---启动聊天系统
---@public
function chat_system:start()
    self.is_start_system = true
    self:int_chat_limit()
    --step1:sdk初始化
    game_sdk_manager.agora_sdk.init()
    --step2:请求聊天频道数据
    self.network:req_sdk_logic_info_and_chat_room()
    --step3:检查轮巡
    self.loop_timer_id = timer_mgr.add_timer_loop(10, function()
        self:check_sdk_state()
    end)
end

--endregion

--region sdk

---@private
function chat_system:check_sdk_state()
    if self.is_start_system then
        --TODO 判断SDK各种状态
        
        local is_connected = game_sdk_manager.agora_sdk.is_connected()
        local is_logged_in = game_sdk_manager.agora_sdk.is_logged_in()
        if is_connected and not is_logged_in then
            --TODO 客户端Sdk登录
            self.network:req_sdk_logic_info_and_chat_room()
        end
    end
    --log.error("loop check")
end


---环信sdk登录
---@public
---@param user_name string
---@param password string
function chat_system:login_sdk(user_name, password)
    local logic_callback = function(is_succeed) 
        if is_succeed then
            --加入各个频道
            local world_channel_uid = game_data_manager.chat:get_channel_uid_by_mid(tables.Channel.ids.Channel_1)
            self:join_room(world_channel_uid, nil)
            local system_channel_uid = game_data_manager.chat:get_channel_uid_by_mid(tables.Channel.ids.Channel_2)
            self:join_room(system_channel_uid, nil)
        end
    end

    game_sdk_manager.agora_sdk.login(user_name, password, logic_callback)
end

---加入聊天室
---@public
---@param room_id string
---@param callback function
function chat_system:join_room(room_id, callback)
    if not string.is_nil_or_empty(room_id) then
        game_sdk_manager.agora_sdk.join_room(room_id, callback)
    end
end

---加入群组
---@public
---@param group_id string 群组Id
---@param callback function 加入成功后的回调
function chat_system:join_group(group_id, callback)
    if not string.is_nil_or_empty(group_id) then
        game_sdk_manager.agora_sdk.join_group(group_id, callback)
    end
end

--endregion

--region msg

---通用发送文本消息
---@public
---@param channel_mid string 聊天频道mid
---@param chat_id string 对方用户或者群聊的ID
---@param content string 聊天内容
---@param group_type number 聊天组织类型：0=单聊 1=群聊 2=聊天室
---@param msg_type number 聊天类型，参考chat_msg_type
---@param expression_id string 表情Id
---@param bubble_id string 气泡Id
---@param chat_type number 聊天类型（0：公共频道，1：战团频道，2：好友私聊）
---@param other_player_id Ident 聊天对象（目前只有好友聊天需要设置）
function chat_system:send_message(channel_mid, chat_id, content, group_type, msg_type, expression_id, bubble_id, chat_type, other_player_id)
    --TODO 检查SDK状态
    
    
    local flag = self:is_can_send_msg(channel_mid)
    if flag then
        if string.is_nil_or_empty(content) then
            log.info("Can' t send nil chat msg")
            return
        end
        --取出换行
        content = string.gsub(content, "\\n", "")
        content = string.gsub(content, "\n", "")

        game_sdk_manager.agora_sdk.send_message(chat_id, content, group_type, msg_type, expression_id, bubble_id, chat_type, other_player_id)
        self:do_chat_limit(channel_mid)
    else
        --TODO 聊天限制Tips
        self:show_chat_limit_tip(channel_mid)
    end
    
  
    --if string.is_nil_or_empty(content) then
    --    log.info("Can' t send nil chat msg")
    --    return
    --end
    ----取出换行
    --content = string.gsub(content, "\\n", "")
    --content = string.gsub(content, "\n", "")
    --
    --game_sdk_manager.agora_sdk.send_message(chat_id, content, group_type, msg_type, expression_id, bubble_id, chat_type, other_player_id)
end

---好友发送文本消息
---@public
---@param chat_id string 对方用户或者群聊的ID
---@param content string 聊天内容
---@param group_type number 聊天组织类型：0=单聊 1=群聊 2=聊天室
---@param msg_type number 聊天类型，参考chat_msg_type
---@param expression_id string 表情Id
---@param bubble_id string 气泡Id
---@param chat_type number 聊天类型（0：公共频道，1：战团频道，2：好友私聊）
---@param other_player_id Ident 聊天对象（目前只有好友聊天需要设置）
function chat_system:send_friend_message(chat_id, content, group_type, msg_type, expression_id, bubble_id, chat_type, other_player_id)
    --TODO 检查SDK状态
    
    
    ----去空格
    --if string.is_nil_or_empty(content) then
    --    log.info("Can' t send nil chat msg")
    --    return
    --end
    --取出换行
    content = string.gsub(content, "\\n", "")
    content = string.gsub(content, "\n", "")

    game_sdk_manager.agora_sdk.send_message(chat_id, content, group_type, msg_type, expression_id, bubble_id, chat_type, other_player_id)
end


--endregion

--region sys msg history

---获得系统消息历史
---@public
---@param channel_uid
---@param callback function
function chat_system:get_system_msg_history(channel_uid, callback)
    game_sdk_manager.agora_sdk.get_room_announcement(channel_uid, callback)
end

--endregion

--region limit

---初始化聊天限制
---@private
function chat_system:int_chat_limit()
    --世界频道
    self.chat_limit_dict[tables.Channel.ids.Channel_1] = 0
    --战团频道
    self.chat_limit_dict[tables.Channel.ids.Channel_3] = 0
    
    local limit_time = data.get(tables.ConstComm.name, tables.ConstComm.ids.KW_CHAT_SEND_INTERVAL, tables.ConstComm.properties.Int)
    if nil ~= limit_time and limit_time > 0 then
        self.chat_limit_time = limit_time
    else
        self.chat_limit_time = 10
    end
end

---执行聊天限制
---@private
---@param channel_mid string
function chat_system:do_chat_limit(channel_mid)
    self.chat_limit_dict[channel_mid] = self.chat_limit_time
    local timer_id = timer_mgr.add_timer_repeated(1, function(mid)
        local time = self.chat_limit_dict[mid]
        time = time - 1
        self.chat_limit_dict[mid] = time
        
        --log.error(channel_mid.." limit time : "..time)
        
        if time <= 0 then
            self.chat_limit_dict[mid] = 0
            local id = self.limit_timer_id_dict[mid]
            if nil ~= id then
                timer_mgr.remove_timer(id)
            end
            self.limit_timer_id_dict[mid] = nil
        end
    end, self.chat_limit_time, channel_mid)
    
    self.limit_timer_id_dict[channel_mid] = timer_id
end

---是否能发送消息
---@private
---@param channel_mid string
---@return boolean
function chat_system:is_can_send_msg(channel_mid)
    if nil ~= self.chat_limit_dict[channel_mid] then
        local time = self.chat_limit_dict[channel_mid]   
        return time <= 0
    end
    return false
end

---显示聊天限制Tips
---@private
---@param channel_mid string
function chat_system:show_chat_limit_tip(channel_mid)
    if nil ~= self.chat_limit_dict[channel_mid] then
        local time = self.chat_limit_dict[channel_mid]
        ---@type string
        local msg = data.get(tables.Prompt.name, tables.Prompt.ids.Prompt_Chat_Cold_Down_Tips, tables.Prompt.properties.Text)
        msg = string.str_format(msg, time)
        message_box.show_tip_by_context(msg)
    end
end


--endregion

--region friend

---获得好友未读消息数
---@public
---@param friend_uid Ident
function chat_system:get_friend_unread_count(friend_uid)
    local user_name = friend_uid.svrid.."-"..friend_uid.index
    ---@type AgoraChat.Conversation
    local conversion = game_sdk_manager.agora_sdk.get_conversation(user_name, 0)
    if nil ~= conversion then
        local unread_count = game_sdk_manager.agora_sdk.get_unread_count(conversion.Id, 0)
        return unread_count
    end
    
    return 0
end

---好友消息全部已读
---@public
---@param friend_uid Ident
function chat_system:clear_friend_unread_count(friend_uid)
    local user_name = friend_uid.svrid.."-"..friend_uid.index
    ---@type AgoraChat.Conversation
    local conversion = game_sdk_manager.agora_sdk.get_conversation(user_name, 0)
    if nil ~= conversion then
        conversion:MarkAllMessageAsRead()
    end
end

---删除好友本地聊天记录
---@public
---@param friend_uid Ident
function chat_system:clear_friend_cache_msg(friend_uid)
    local user_name = friend_uid.svrid.."-"..friend_uid.index
    ---@type AgoraChat.Conversation
    local conversion = game_sdk_manager.agora_sdk.get_conversation(user_name, 0)
    if nil ~= conversion then
        game_sdk_manager.agora_sdk.clear_conversation(conversion.Id, true)
    end
end

--endregion

return chat_system