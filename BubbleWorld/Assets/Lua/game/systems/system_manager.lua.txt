---
--- Generated by wuhaijun
--- File name : system_manager.lua.txt
--- DateTime : 2022/06/20
--- Description : 系统管理层
---         1. 为了方便管理，游戏中的系统类需要添加到该类中
---         2. 假设xxx是系统名称，需要在 game/systems/ 路径下建立和系统名一致的文件夹，用于存放系统相关文件
---         3. 系统的类文件命名格式为：xxx_system，并以class的方式实现该类，可以包含 on_update / clear / dispose 生命周期函数
---         4. 举例说明，比如家园系统, 类路径为：game/systems/home/home_system.lua.txt
---         5. 添加系统类时，需要在 manager.init() 方法中注册，代码提示需要在 local manager 上添加（搜索---@field）
---         6. 如果需要执行 system 的 init 之类的初始化方法，可以在 ctor() 构造函数中直接调用，请参考其他 system
---

local rawget = rawget
local rawset = rawset

---@class system_manager
---@field battle battle_system 战斗系统
---@field college college_system 学院系统
---@field trigger trigger_system 触发器系统
---@field experience experience_system 历练系统
---@field explore explore_system 探索系统
---@field building building_system 居所建筑物系统
---@field chat chat_system 聊天系统
---@field dispatch dispatch_system 派遣系统
---@field controller_collector controller_collector_system ctrl收集系统
---@field custom_str_format custom_str_format_system 自定义字符串格式化系统
---@field housekeeper housekeeper_system 管家系统
---@field bless bless_system 祝福系统
---@field protagonist protagonist_system 主角系统
---@field black_store black_store_system 黑市商人系统
---@field guide guide_system 引导系统
---@field story story_system 剧情系统
---@field witch witch_system 魔女系统
---@field item_jump item_jump_system 道具获取途径跳转系统
---@field jump jump_system 功能跳转系统
---@field red_point red_point_system 红点系统
---@field capture_screen capture_screen 截屏
---@field guild guild_system 战团系统
local manager = {
    cname = 'system_manager',

    ---Getter访问器
    ---@private
    ---@type table<string, string>
    getter = {},

    ---更新方法列表
    ---@private
    ---@type table[]
    update_list = {},
    ---清理列表列表
    ---@private
    ---@type table[]
    clear_list = {},
    ---销毁方法列表
    ---@private
    ---@type table[]
    dispose_list = {},

    ---应用退出方法列表
    application_quit_list = {},
}

---加载系统类文件
---@private
local index_func = function(t, k)
    local v = rawget(t, k)
    if v == nil then
        local key = t.getter[k]
        if key ~= nil then
            v = require('game/systems/' .. key).new()
            --log.info("加载系统 ", 'game/systems/' .. key)
            -- 记录需要更新的系统
            if v.on_update ~= nil then
                t.update_list[#t.update_list + 1] = v
            end
            -- 记录需要清理的系统
            if v.clear ~= nil then
                t.clear_list[#t.clear_list + 1] = v
            end
            -- 记录需要销毁的系统
            if v.dispose ~= nil then
                t.dispose_list[#t.dispose_list + 1] = v
            end
            -- 记录需要退出方法的系统
            if v.on_application_quit ~= nil then
                t.application_quit_list[#t.application_quit_list + 1] = v
            end

            rawset(t, k, v)
        end
    end
    return v
end
manager = setmetatable(manager, { __index = index_func })

---初始化
---@private
function manager.init()
    -- 当开发新的系统类时，需要在此处进行注册

    manager.register("battle") -- 战斗
    manager.register("college") -- 学院
    manager.register("trigger") -- 触发器
    manager.register("experience") --历练
    manager.register("explore") --探索
    manager.register("building") --建筑物
    manager.register("chat") --聊天
    manager.register("dispatch") -- 派遣
    manager.register("controller_collector") --ctrl收集器
    manager.register("custom_str_format")  --自定义字符串格式化
    manager.register("housekeeper") -- 管家
    manager.register("bless") -- 祝福
    manager.register("protagonist") -- 主角
    manager.register("black_store") -- 黑市
    manager.register("guide") --引导
    manager.register("story") --剧情
    manager.register("witch") --魔女
    manager.register("item_jump") --道具跳转
    manager.register("jump") --功能跳转
    manager.register("red_point") --红点
    manager.register("capture_screen") --截屏
    manager.register("guild") --战团
end

---注册属性
---@private
function manager.register(name)
    manager.getter[name] = string.format('%s/%s_system', name, name)
end

---执行方法
---@private
---@param name string 方法名字
function manager.execute_function(name)
    local getter = manager.getter
    if getter ~= nil then
        local tt = manager
        for key, _ in pairs(getter) do
            local data = rawget(tt, key)
            if data ~= nil then
                local func = data[name]
                if func ~= nil then
                    func(data)
                end
            end
            getter[key] = nil
        end
    end
end

---清理
---@private
function manager.on_update()
    local list = manager.update_list
    for i = 1, #list do
        list[i]:on_update()
    end
end

---清理
---@private
function manager.clear()
    local list = manager.clear_list
    for i = 1, #list do
        list[i]:clear()
        list[i] = nil
    end
end

---销毁
---@private
function manager.dispose()
    if manager.dispose_list == nil then
        return
    end

    manager.clear()

    local dispose_list = manager.dispose_list
    for i = #dispose_list, 1, -1 do
        dispose_list[i]:dispose()
        dispose_list[i] = nil
    end

    for i, _ in ipairs(manager.update_list) do
        manager.update_list[i] = nil
    end
    for i, _ in ipairs(manager.application_quit_list) do
        manager.application_quit_list[i] = nil
    end

    manager.update_list = nil
    manager.application_quit_list = nil
    manager.clear_list = nil
    manager.dispose_list = nil

    system_manager = nil
end

---退出
---@private
function manager.on_application_quit()
    local list = manager.application_quit_list
    for i = 1, #list do
        list[i]:on_application_quit()
    end
end

system_manager = manager