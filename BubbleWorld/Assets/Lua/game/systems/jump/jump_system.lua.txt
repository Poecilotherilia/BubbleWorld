---
--- Generated by lvyuqiang
--- File name : jump_system.lua.txt
--- DateTime : 2023/07/17
--- Description : 功能跳转系统
---

---@class jump_system
local jump_system = class("jump_system")
local data = data
local t = tables
local log = log
local window = window
local trigger_system = system_manager.trigger
local story_system = system_manager.story
local game_scene_manager = game_scene_manager
local game_data_manager = game_data_manager
local message = message
local message_type = enum.message_type
local window_status = df.enum.window_status
local lua = lua
local player_data = game_data_manager.player
local message_box = message_box
local is_string_nil_or_empty = string.is_nil_or_empty
local string_split = string.split
local explore_util = require "game/windows/explore/explore_util"
local hero_manager = require 'game/hero/hero_manager'

---开始功能跳转
---@param id string JumpId
---@return boolean 是否跳转成功
function jump_system:jump(id)
    ---@type Jump
    local jump = data.get(t.Jump.name, id)
    if jump then
        local func_id = jump.SystemFunc
        -- 判断功能解锁
        if not is_string_nil_or_empty(func_id) then
            if not player_data:check_system_function_open(func_id) then
                -- 功能未开启 提示
                local cond_id = data.get(t.SystemFunction.name, func_id, t.SystemFunction.properties.ConditionId)
                local context = data.get(t.Condition.name, cond_id, t.Condition.properties.Name)
                message_box.show_tip_by_context(context)
                return false
            end
        end
        local jump_target_type = jump.JumpTargetType
        if jump_target_type == 1 or jump_target_type == 9 then
            --探索跳转
            local explore_flag = explore_util.jump_to_explore_by_outside(jump)
            if explore_flag then
                message.broadcast(message_type.UI_BOTTOM_BAR_CALLBACK_INVOKE, "goto_explore")                
            end
            return explore_flag
        elseif jump_target_type == 4 then
            self:jump_to_bottom_bar_func(jump)
        elseif jump_target_type == 6 then
            return self:handle_pneuma_boss_jump_action(jump)
        else
            -- 主线剧情跳转判断是否解锁
            if jump_target_type == 7 then
                local main_story_chapter = system_manager.story:get_main_story_chapter()
                if not main_story_chapter.is_chapter_unlock then
                    -- 提示
                    message_box.show_tip_by_context(main_story_chapter.chapter_unlock_condition)
                    return false
                end
            end
            if not is_string_nil_or_empty(jump.JumpScene) then
                local current_scene_id = game_scene_manager.current_scene().id
                if jump.JumpScene == current_scene_id then
                    ---已经在当前场景，先回退到当前场景导航栈的第一个窗体，再设置底部菜单选中第一个页签
                    local first_nav_window = window.get_first_nav_window()
                    if first_nav_window then
                        window.go_back_until(first_nav_window.id, true)
                    end
                    message.broadcast(message_type.UI_BOTTOM_BAR_SET_ACTIVE, true)
                    message.broadcast(message_type.UI_BOTTOM_BAR_SHOW_WINDOW)
                    self:do_jump_after_switch_scene(jump)
                else
                    ---切换场景
                    game_scene_manager.set_finish_callback(function()
                        game_scene_manager.set_finish_callback(nil)
                        self:do_jump_after_switch_scene(jump)
                    end)
                    game_scene_manager.switch_scene(jump.JumpScene, 0)
                end
            elseif not is_string_nil_or_empty(jump.JumpTarget) then
                window.open(jump.JumpTarget, { is_jump = true, jump = jump })
            else
                log.error("jump data error: ", id)
                return false
            end
        end
        return true
    end
end

---跳转到目标场景后的逻辑
---@private
---@param jump_data Jump
function jump_system:do_jump_after_switch_scene(jump_data)
    local jump_target_type = jump_data.JumpTargetType
    if jump_target_type == 10 or jump_target_type == 3 then
        -- 触发器触发：答题；黑市商人
        local params = string_split(jump_data.JumpParam, ',')
        local trigger_id = params[1]
        local p = params[2]
        if not is_string_nil_or_empty(trigger_id) then
            lua.wait_until_async(function()
                return hero_manager.get_controller_enable()
            end, function()
                trigger_system:path_finding_trigger(trigger_id, p)
            end)
        end
    elseif jump_target_type == 4 then
        -- 底部栏功能类型
        local bottom_bar_window = window.get_window(t.Window.ids.BottomBar)
        if bottom_bar_window then
            lua.wait_until_async(function()
                return bottom_bar_window.status == window_status.show
            end, function()
                local params = string_split(jump_data.JumpParam, ',')
                local bottom_bar_id = params[1]
                local func_name = data.get(t.BottomBar.name, bottom_bar_id).FuncBinder
                message.broadcast(message_type.UI_BOTTOM_BAR_CALLBACK_INVOKE, func_name, { is_jump = true, jump = jump_data })
                message.broadcast(message_type.UI_BOTTOM_BAR_ON_ITEM_SELECTED, bottom_bar_id)
            end)
        end
    elseif jump_target_type == 7 then
        ---开始主线剧情
        story_system:start_main_story()
    end
end

---跳转至底部栏某个功能页签
---@private
function jump_system:jump_to_bottom_bar_func(jump)
    -- 判定当前场景是否支持底部栏 不支持 则跳转至居所
    local scene_types_str = data.get(t.ConstClient.name, t.ConstClient.ids.KW_BOTTOMBAR_SCENE_TYPE, t.ConstClient.properties.String)
    local scene_types = scene_types_str and string_split(scene_types_str, ',')
    if scene_types then
        local cur_scene_type = data.get(t.Scene.name, scene.current().id, t.Scene.properties.Type)
        if array_table.contains(scene_types, tostring(cur_scene_type)) then
            -- 当前场景支持底部栏
            local cur_nav_window_id = window.get_current_nav_window().id
            local params = string_split(jump.JumpParam, ',')
            local scene_item_id = "BottomBar_SceneIcon_" .. cur_scene_type
            local w_d = data.get(t.BottomBar.name, scene_item_id).FuncBinder
            if w_d then
                local w_data = string_split(w_d, ',')
                if w_data then
                    -- 当前场景主界面id
                    local main_window_id = w_data[1]
                    -- 当前显示导航窗体为当前场景的主界面
                    if cur_nav_window_id == main_window_id then
                        local bottom_bar_id = params[1]
                        local func_name = data.get(t.BottomBar.name, bottom_bar_id).FuncBinder
                        message.broadcast(message_type.UI_BOTTOM_BAR_SET_ACTIVE, true)
                        message.broadcast(message_type.UI_BOTTOM_BAR_CALLBACK_INVOKE, func_name, { is_jump = true, jump = jump })
                        message.broadcast(message_type.UI_BOTTOM_BAR_ON_ITEM_SELECTED, bottom_bar_id)
                    else
                        -- 当前显示的导航窗体不是当前场景的主界面 则跳转至主界面
                        window.open(main_window_id, { is_jump = true, jump = jump })
                        if cur_nav_window_id == t.Window.ids.WitchInfo then
                            local w = window.get_window(cur_nav_window_id)
                            if w then
                                window.close(w, true)
                            end
                        elseif cur_nav_window_id == t.Window.ids.BlackStore then
                            system_manager.black_store:exit_black_store_simple(1)
                            local w = window.get_window(cur_nav_window_id)
                            if w then
                                window.close(w, true)
                            end
                        end
                    end
                end
            end
        else
            -- 当前场景不支持底部栏 则跳转至居所场景
            if self.home_scene_id == nil then
                self.home_scene_id = tostring(data.get(t.ConstComm.name, t.ConstComm.ids.KW_SCENE_HOME).Int)
            end
            game_scene_manager.switch_scene(self.home_scene_id, nil, { is_jump = true, jump = jump })
        end
    end
end

---场景主界面处理底部栏跳转
---@public
---@param jump Jump
function jump_system:handle_bottom_jump_action(jump)
    local bottom_bar_window = window.get_window(t.Window.ids.BottomBar)
    if bottom_bar_window then
        lua.start_coroutine(function()
            bottom_bar_window:wait_show_sync()
            local params = string_split(jump.JumpParam, ',')
            local bottom_bar_id = params[1]
            local func_name = data.get(t.BottomBar.name, bottom_bar_id).FuncBinder
            message.broadcast(message_type.UI_BOTTOM_BAR_SET_ACTIVE, true)
            message.broadcast(message_type.UI_BOTTOM_BAR_CALLBACK_INVOKE, func_name, { is_jump = true, jump = jump })
            message.broadcast(message_type.UI_BOTTOM_BAR_ON_ITEM_SELECTED, bottom_bar_id)
        end)
    end
end

---跳转至魔灵岛boss详情界面
---@private
function jump_system:handle_pneuma_boss_jump_action(jump)
    -- 魔灵岛跳转boss界面 判定boss是否解锁
    local group_id = jump.JumpParam
    local is_group_unlocked = game_data_manager.pneuma_island:check_pneuma_group_unlocked(group_id)
    if is_group_unlocked then
        window.open(jump.JumpTarget, { is_jump = true, jump = jump })
        return true
    else
        -- 提示
        local context = game_data_manager.pneuma_island:get_pneuma_group_unlock_context(group_id)
        if not is_string_nil_or_empty(context) then
            message_box.show_tip_by_context(context)
        end
        return false
    end
end

return jump_system