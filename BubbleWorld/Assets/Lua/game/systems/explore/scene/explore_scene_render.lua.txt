---
--- Generated by libin
--- File name : explore_scene_render.lua.txt
--- DataTime : 2022/07/06
--- Description : 探索场景渲染器
---

local GameObject = cs.GameObject
local LuaUtil = cs.LuaUtil
local ExploreNodeUnit = cs.ExploreNodeUnit
local ExploreNodeSwitch = cs.ExploreNodeSwitch
local explore_node_event_type = enum.experience.explore_node_event_type

local ExploreLineUnit = cs.ExploreLineUnit
local explore_line_render_unit = require "game/systems/explore/line/explore_line_render_unit"
local explore_data = game_data_manager.explore
local ExploreCamera = cs.ExploreCamera
local ExploreBuilding = cs.ExploreBuilding
local string = string
local data = data
local tables = tables
local explore_camera_state_type = enum.experience.explore_camera_state_type
local explore_node_render_unit = require "game/systems/explore/node/explore_node_render_unit"
local explore_three_star_node_render_unit = require "game/systems/explore/node/explore_three_star_node_render_unit"
local explore_transmit_node_render_unit = require "game/systems/explore/node/explore_transmit_node_render_unit"
local explore_guide_node_render_unit = require "game/systems/explore/node/explore_guide_node_render_unit"
local explore_dungeon_node_render_unit = require "game/systems/explore/node/explore_dungeon_node_render_unit"
local ExploreFadeMaskUnit = cs.ExploreFadeMaskUnit
local explore_mask_brush_pool = require "game/systems/explore/mask/explore_mask_brush_pool"
local explore_fade_mask_render_unit = require "game/systems/explore/mask/explore_fade_mask_render_unit"
local explore_building_render_unit = require "game/systems/explore/change/explore_building_render_unit"
local explore_task_node_render_unit = require "game/systems/explore/node/explore_task_node_render_unit"
local explore_raid_node_render_unit = require "game/systems/explore/node/explore_raid_node_render_unit"
local explore_box_node_render_unit = require "game/systems/explore/node/explore_box_node_render_unit"
local timer_mgr = timer_manager

---@class explore_scene_render
local explore_scene_render = class("explore_scene_render")

--region base api

---构造方法
---@protected
function explore_scene_render:ctor()
    ---@type table<string, explore_node_render_unit>  key:节点编号
    self.node_render_unit_dict = {}
    ---@type table<string, explore_line_render_unit>   key:name
    self.line_render_unit_dict = {}
    ---@type table<string, explore_fade_mask_render_unit>  key:节点编号
    self.mask_render_unit_dict = {}
    
    ---@type Game.Explore.ExploreCamera
    self.explore_camera = nil
    
    ---@type explore_mask_brush_pool
    self.mask_brush_pool = explore_mask_brush_pool.new()
    
    ---@type UnityEngine.GameObject
    self.node_root = nil
    
    ---@type table<string, explore_building_render_unit> key:ExploreChange表ID
    self.building_render_unit_dict = {}
end

---清理
---@public
function explore_scene_render:clear()
    for _, v in pairs(self.node_render_unit_dict) do
        v:dispose()
    end
    self.node_render_unit_dict = {}
    
    for _, v in pairs(self.line_render_unit_dict) do
        v:dispose()
    end
    self.line_render_unit_dict = {}

    for _, v in pairs(self.mask_render_unit_dict) do
        v:dispose()
    end
    self.mask_render_unit_dict = {}

    self.mask_brush_pool:dispose(false)

    self.explore_camera = nil
    self.node_root = nil

    for _, v in pairs(self.building_render_unit_dict) do
        v:dispose()
    end
    self.building_render_unit_dict = {}
end

---@public
function explore_scene_render:dispose()
    for _, v in pairs(self.node_render_unit_dict) do
        v:dispose()
    end
    self.node_render_unit_dict = nil

    for _, v in pairs(self.line_render_unit_dict) do
        v:dispose()
    end
    self.line_render_unit_dict = nil

    for _, v in pairs(self.mask_render_unit_dict) do
        v:dispose()
    end
    self.mask_render_unit_dict = nil

    self.mask_brush_pool:dispose(true)

    self.explore_camera = nil
    self.node_root = nil

    for _, v in pairs(self.building_render_unit_dict) do
        v:dispose()
    end
    self.building_render_unit_dict = nil
end

--endregion

--region logic

---初始化
---@public
---@param layer_index number
function explore_scene_render:init(layer_index)
    self:init_node()
    self:init_line()
    self:init_mask()
    self:init_building()
    self:init_camera(layer_index)
end


--endregion

--region map pos

---默认场景位置
---@public
---@param chapter_id string
---@param immediately boolean
function explore_scene_render:do_default_location(chapter_id, immediately)
    local node_id = explore_data:get_cur_map_pos(chapter_id)
    if not string.is_nil_or_empty(node_id) then
        ---@type explore_node_data
        local node_data = explore_data:get_explore_node_data_by_id(node_id)
        if nil ~= node_data then
            local node_name = node_data:get_node_name()
            self:look_at_target(node_name, immediately, function()
                system_manager.explore:set_cur_camera_state(explore_camera_state_type.NORMAL)
            end)
        end
    end
end

---场景位置
---@public
---@param chapter_id string
---@return number, number, number
function explore_scene_render:get_cur_node_position(chapter_id)
    local node_id = explore_data:get_cur_map_pos(chapter_id)
    if not string.is_nil_or_empty(node_id) then
        ---@type explore_node_data
        local node_data = explore_data:get_explore_node_data_by_id(node_id)
        if nil ~= node_data then
            local node_name = node_data:get_node_name()
            ---@type explore_node_render_unit
            local render = self:get_node_render_unit(node_name)
            if nil ~= render then
                return render:get_position()
            end
        end
    end
    
    return 0, 0, 0
end

---查看目标
---@public
---@param node_name string
---@param immediately boolean
---@param callback function
function explore_scene_render:look_at_target(node_name, immediately, callback)
    ---@type explore_node_render_unit
    local render = self:get_node_render_unit(node_name)
    if nil ~= render then
        local x,_,z = render:get_position()
        if immediately then
            system_manager.explore:set_cur_camera_state(explore_camera_state_type.NORMAL)
        else
            system_manager.explore:set_cur_camera_state(explore_camera_state_type.FOLLOW)
        end
        self.explore_camera:DOFollow(x, z, immediately, callback)
    end
end

---查看目标
---@public
---@param x number
---@param z number
---@param callback function
function explore_scene_render:look_at_pos(x, z, callback)
    self.explore_camera:DOFollow(x, z, false, callback)
end

--endregion

--region node board

---获得漂浮节点目标
---@public
---@return UnityEngine.Transform
function explore_scene_render:get_target_by_name(name)
    local render = self:get_node_render_unit(name)
    if nil ~= render then
        return render:get_transform()
    end
    
    return nil
end

--endregion

--region camera

---初始化相机
---@private
---@param layer_index number
function explore_scene_render:init_camera(layer_index)
    --相机
    ---@type UnityEngine.GameObject
    local camera_obj = GameObject.Find("ExploreCamera")
    if not LuaUtil.IsNull(camera_obj) then
        self.explore_camera = camera_obj:GetComponent(typeof(ExploreCamera))
        self.explore_camera:ChangeLayerCameraLimit(layer_index)
        local follow_computer = system_manager.explore:get_default_follow()
        if nil ~= follow_computer then
            self.explore_camera:SetDefaultFollow(follow_computer)
        end
    end
end

---相机跟随连线
---@public
---@param computer
---@param from
---@param to
---@param time
---@param direction 
function explore_scene_render:camera_follow_line(computer, from, to, time, direction)
    if not LuaUtil.IsNull(self.explore_camera) then
        self.explore_camera:SplineFollow(computer, from, to, time, direction)
    end
end

---重置跟随相机
---@public
function explore_scene_render:reset_camera_follow_line()
    if not LuaUtil.IsNull(self.explore_camera) then
        self.explore_camera:ResetSplineFollow()
    end
end

---是否能拖拽相机
---@public
---@param is_can boolean
function explore_scene_render:set_can_drag_camera(is_can)
    if not LuaUtil.IsNull(self.explore_camera) then
        self.explore_camera:SetCanDragCamera(is_can)
    end
end

--endregion

--region node

---初始化路点
---@private
function explore_scene_render:init_node()
    ---@type UnityEngine.GameObject
    local node_root = GameObject.Find("ExploreNodeRoot")
    self.node_root = node_root
    if not LuaUtil.IsNull(node_root) then
        ---路点
        ---@type Game.Explore.ExploreNodeSwitch[]
        local node_switch_arr = node_root:GetComponentsInChildren(typeof(ExploreNodeSwitch))
        if nil ~= node_switch_arr and node_switch_arr.Length > 0 then
            for i = 0, node_switch_arr.Length - 1 do
                ---@type Game.Explore.ExploreNodeUnit
                local switch = node_switch_arr[i]
                local name = switch:GetNodeName()
                ---@type explore_node_data
                local node_data = explore_data:get_explore_node_data_by_name(name)
                if nil == node_data then
                    log.error("NodeName : "..name.." 's Data is Not Find !!!")
                end
                local node_type = node_data.node.EventType
                ---@type Game.Explore.ExploreNodeUnit
                local unit = switch:SwitchNode(node_type)

                ---@type explore_node_render_unit
                local render_unit = nil
                if node_type == explore_node_event_type.BATTLE then
                    --普通战斗
                    render_unit = explore_node_render_unit.new(unit, node_data)
                elseif node_type == explore_node_event_type.THREE_STAR then
                    --三星
                    render_unit = explore_three_star_node_render_unit.new(unit, node_data)
                elseif node_type == explore_node_event_type.GUIDE then
                    --指引
                    render_unit = explore_guide_node_render_unit.new(unit, node_data)
                elseif node_type == explore_node_event_type.RARE_MONSTER then
                    --稀有怪
                elseif node_type == explore_node_event_type.TRANSMIT_HOME
                        or node_type == explore_node_event_type.TRANSMIT_OTHER
                        or node_type == explore_node_event_type.TRANSMIT_SELF
                then
                    --传送
                    render_unit = explore_transmit_node_render_unit.new(unit, node_data)
                elseif node_type == explore_node_event_type.MATERIAL then
                    --材料
                    render_unit = explore_dungeon_node_render_unit.new(unit, node_data)
                elseif node_type == explore_node_event_type.TASK then
                    --任务
                    render_unit = explore_task_node_render_unit.new(unit, node_data)
                elseif node_type == explore_node_event_type.RAID then
                    --副本
                    render_unit = explore_raid_node_render_unit.new(unit, node_data)
                elseif node_type == explore_node_event_type.BOX then
                    --宝箱
                    render_unit = explore_box_node_render_unit.new(unit, node_data)
                end

                if nil ~= render_unit then
                    self.node_render_unit_dict[name] = render_unit
                end
            end
        end
    end
end

---设置指定路点显/隐藏
---@public
---@param name string
---@param is_active boolean
function explore_scene_render:set_node_active(name, is_active)
    ---@return explore_node_render_unit
    local render = self:get_node_render_unit(name)
    if nil ~= render then
        render:set_active(is_active)
    end
end

---获得指定节点渲染器
---@public
---@param node_num string
---@return explore_node_render_unit
function explore_scene_render:get_node_render_unit(node_num)
    return self.node_render_unit_dict[node_num]
end

---播放新路点激活动画
---@public
---@param node_num string
function explore_scene_render:play_node_active_effect(node_num)
    ---@return explore_node_render_unit
    local render = self:get_node_render_unit(node_num)
    if nil ~= render then
        render:play_active_effect()        
    end
end


--endregion

--region line

---初始化连线
---@private
function explore_scene_render:init_line()
    ---@type UnityEngine.GameObject
    local line_root = GameObject.Find("ExploreLineRoot")
    if not LuaUtil.IsNull(line_root) then
        ---连线
        ---@type Game.Explore.ExploreLineUnit
        local line_unit_arr = line_root:GetComponentsInChildren(typeof(ExploreLineUnit))
        if nil ~= line_unit_arr and line_unit_arr.Length > 0 then
            for i = 0, line_unit_arr.Length - 1 do
                ---@type Game.Explore.ExploreLineUnit
                local unit = line_unit_arr[i]
                local name = unit:GetLineName()
                ---@type explore_line_data
                local line_data = explore_data:get_explore_line_data_by_name(name)
                if nil == line_data then
                    log.error("LineName : "..name.." 's Data is Not Find !!!")
                end
                local render_unit = explore_line_render_unit.new(unit, line_data)
                self.line_render_unit_dict[name] = render_unit
            end
        end
    end
end

---获得连线渲染器
---@public
---@param line_name string
---@return explore_line_render_unit
function explore_scene_render:get_line_render_unit(line_name)
    return self.line_render_unit_dict[line_name]
end

---刷新所以连线进度
---@public
function explore_scene_render:update_all_line_progress()
    for _, render_unit in pairs(self.line_render_unit_dict) do
        render_unit:update_cur_progress()
    end
end

---播放连线更新动画
---@public
---@param start_id string
---@param end_id string
---@param call_back function
function explore_scene_render:play_line_update_anim(start_id, end_id, call_back)
    --新刷新逻辑
    ---@type explore_mask_brush
    local mask_brush = self.mask_brush_pool:dequeue()
    mask_brush:mask_follow_line(start_id, end_id, call_back)
end

--endregion

--region Mask

---初始化擦除
---@private
function explore_scene_render:init_mask()
    ---@type UnityEngine.GameObject
    local mask_root = GameObject.Find("ExploreMaskRoot")
    if not LuaUtil.IsNull(mask_root) then
        ---擦除
        ---@type Game.Explore.ExploreFadeMaskUnit
        local mask_unit_arr = mask_root:GetComponentsInChildren(typeof(ExploreFadeMaskUnit))
        if nil ~= mask_unit_arr and mask_unit_arr.Length > 0 then
            for i = 0, mask_unit_arr.Length - 1 do
                ---@type Game.Explore.ExploreFadeMaskUnit
                local unit = mask_unit_arr[i]
                local name = unit:GetMaskName()
                ---@type explore_node_data
                local node_data = explore_data:get_explore_node_data_by_name(name)
                if nil ~= node_data then
                    local mask_unit = explore_fade_mask_render_unit.new(unit, node_data)
                    self.mask_render_unit_dict[name] = mask_unit
                else
                    log.error("Not Find Mask Name : ", name)
                end
            end
        end
    end
end

---获得擦除Unit
---@public
---@param name string
---@return explore_fade_mask_render_unit
function explore_scene_render:get_mask_render_unit(name)
    if nil ~= self.mask_render_unit_dict[name] then
        return self.mask_render_unit_dict[name]    
    end
    return nil
end

--endregion

--region change layer

---切换相机分层限制
---@public
---@param node_data explore_node_data
function explore_scene_render:change_layer_camera_limit(node_data)
    local node_id = node_data.node.Id
    local layer_index = node_data.node.LayerIndex
    ---@type explore_line_data[]
    local line_data_arr = game_data_manager.explore:get_explore_line_data_by_node_id(node_id)
    ---@type explore_line_data
    local target_line_data = nil
    for i = 1, #line_data_arr do
        ---@type explore_line_data
        local line_data = line_data_arr[i]
        if line_data.layer_index == layer_index then
            target_line_data = line_data
            break
        end
    end

    if nil == target_line_data then
        return
    end

    local line_name = target_line_data:get_line_name()
    ---@type explore_line_render_unit
    local line_render_unit = system_manager.explore:get_line_render_unit(line_name)
    if nil == line_render_unit then
        return
    end
    
    --切换分层限制
    self.explore_camera:ChangeLayerCameraLimit(layer_index)

    --设置跟随
    ---@return Dreamteck.Splines.SplineComputer
    local follow_computer = line_render_unit:get_spline_computer()
    if nil ~= follow_computer then
        self.explore_camera:SetDefaultFollow(follow_computer)
    end
end


--endregion

--region guide

---刷新指引者信息
---@public
function explore_scene_render:update_guide_info()
    for _, v in pairs(self.node_render_unit_dict) do
        ---@type explore_guide_node_render_unit
        local unit = v
        ---@type explore_node_event_type
        local type = unit:get_node_type()
        if type == explore_node_event_type.GUIDE then
            unit:update_heart()            
        end
    end
end

--endregion

--region dynamic change

---初始化建筑物
---@public
function explore_scene_render:init_building()
    ---@type UnityEngine.GameObject
    local building_root = GameObject.Find("ExploreBuildingRoot")
    if not LuaUtil.IsNull(building_root) then
        ---@type Game.Explore.ExploreBuilding[]
        local building_unit_arr = building_root:GetComponentsInChildren(typeof(ExploreBuilding))
        if nil ~= building_unit_arr and building_unit_arr.Length > 0 then
            for i = 0, building_unit_arr.Length - 1 do
                ---@type Game.Explore.ExploreBuilding
                local unit = building_unit_arr[i]
                local id = unit:GetBuildingName()
                local state = game_data_manager.explore_building:get_building_state(id)
                
                ---@type explore_building_render_unit
                local render_unit = explore_building_render_unit.new(unit, id, state)
                self.building_render_unit_dict[id] = render_unit
            end
        end
    end
end

---获得建筑物渲染器
---@public
---@param id string
---@return explore_building_render_unit
function explore_scene_render:get_building_render_unit(id)
    if nil ~= self.building_render_unit_dict[id] then
        return self.building_render_unit_dict[id]
    end
    
    return nil
end

--endregion 




return explore_scene_render
