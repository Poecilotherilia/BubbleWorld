---
--- Generated by libin
--- File name : explore_map_anim_controller.lua.txt
--- DataTime : 2023/03/23
--- Description : 
---

local array_table = array_table
local explore_anim_type = enum.experience.explore_anim_type
local game_data_manager = game_data_manager
local system_manager = system_manager
local timer_mgr = timer_manager
local data = data
local tables = tables
local explore_camera_state_type = enum.experience.explore_camera_state_type

---@class explore_map_anim_controller
local explore_map_anim_controller = class("explore_map_anim_controller")

--region base api

---构造方法
---@protected
function explore_map_anim_controller:ctor()
    
    ---@type table<string, explore_prepare_play_anima>
    self.chapter_anim_dict = {}
    
    ---@type table<string, explore_prepare_play_anima[]>
    self.main_node_anim_dict = {}
    
    ---@type table<string, explore_prepare_play_anima[]>
    self.branch_node_anim_dict = {}
    
    ---@type explore_prepare_play_anima
    self.rare_anim_arr = nil
    
    self.node_anim_call_back = nil
    
    self.timer_id = nil
end

---@public
function explore_map_anim_controller:dispose()
    self.chapter_anim_dict = nil
    self.main_node_anim_dict = nil
    self.branch_node_anim_dict = nil
    self.node_anim_call_back = nil
    self.rare_anim_arr = nil
    if nil ~= self.timer_id then
        timer_mgr.remove_timer(self.timer_id)
        self.timer_id = nil
    end
end

--endregion

--region logic

---添加准备播放的动画
---@public
---@param type explore_anim_type
---@param anim explore_prepare_play_anima
function explore_map_anim_controller:add_prepare_play_anim(type, anim)
    --章节
    if type == explore_anim_type.NEW_CHAPTER then
        self.chapter_anim_dict[anim.chapter_data.Id] = anim
    end
    
    --主线
    if type == explore_anim_type.NEW_MAIN_NODE then
        local chapter_id = anim.node_data.map.Id
        local arr = self.main_node_anim_dict[chapter_id]
        if nil == arr then
            arr = {}
            array_table.insert(arr, anim)
            self.main_node_anim_dict[chapter_id] = arr
        else
            array_table.insert(arr, anim)
        end
    end
    
    --支线
    if type == explore_anim_type.NEW_BRANCH_NODE then
        local chapter_id = anim.node_data.map.Id
        local arr = self.branch_node_anim_dict[chapter_id]
        if nil == arr then
            arr = {}
            array_table.insert(arr, anim)
            self.branch_node_anim_dict[chapter_id] = arr
        else
            array_table.insert(arr, anim)
        end
    end
    
    --稀有怪
    if type == explore_anim_type.NEW_RARE_MONSTER then
        self.rare_anim_arr = anim
        --local count = #self.rare_anim_arr
        --local is_contains = false
        --for i = 1, count do
        --    ---@type explore_prepare_play_anima
        --    local prepare_anim = self.rare_anim_arr[i]
        --    if prepare_anim.node_id == anim.node_id then
        --        is_contains = true
        --        break
        --    end
        --end
        --
        --if not is_contains then
        --    array_table.insert(self.rare_anim_arr, anim)
        --end
    end
end

---删除动画数据
---@public
---@param type explore_anim_type
---@param id string
---@param anim explore_prepare_play_anima
function explore_map_anim_controller:del_prepare_play_anim(type, id, anim)
    --章节
    if type == explore_anim_type.NEW_CHAPTER then
        self.chapter_anim_dict[id] = nil
    end

    --主线
    if type == explore_anim_type.NEW_MAIN_NODE then
        local chapter_id = anim.node_data.map.Id
        local arr = self.main_node_anim_dict[chapter_id]
        array_table.remove(arr, anim)
    end

    --支线
    if type == explore_anim_type.NEW_BRANCH_NODE then
        local chapter_id = anim.node_data.map.Id
        local arr = self.branch_node_anim_dict[chapter_id]
        array_table.remove(arr, anim)
    end

    --稀有怪
    if type == explore_anim_type.NEW_RARE_MONSTER then
        self.rare_anim_arr = nil
    end
end

---获得准备播放动画
---@public
---@param type explore_anim_type
---@param id
---@return explore_prepare_play_anima
function explore_map_anim_controller:get_prepare_play_anim(type, id)
    --章节
    if type == explore_anim_type.NEW_CHAPTER then
        return self.chapter_anim_dict[id]
    end

    --主线
    if type == explore_anim_type.NEW_MAIN_NODE then
        for _, v1 in pairs(self.main_node_anim_dict) do
            for _, v2 in pairs(v1) do
                if v2.node_data.node.Id == id then
                    return v2
                end
            end
        end
    end

    --支线
    if type == explore_anim_type.NEW_BRANCH_NODE then
        for _, v1 in pairs(self.branch_node_anim_dict) do
            for _, v2 in pairs(v1) do
                if v2.node_data.node.Id == id then
                    return v2
                end
            end
        end
    end

    --稀有怪
    if type == explore_anim_type.NEW_RARE_MONSTER then
        return self.rare_anim_arr
    end

    return nil
end

---是否包含准备播放动画
---@public
---@param type explore_anim_type
---@param id string
---@return boolean
function explore_map_anim_controller:is_has_prepare_play_anim(type, id)
    --章节
    if type == explore_anim_type.NEW_CHAPTER then
        if nil ~= self.chapter_anim_dict[id] then
            return true            
        end
    end

    --主线
    if type == explore_anim_type.NEW_MAIN_NODE then
        for _, v1 in pairs(self.main_node_anim_dict) do
            for _, v2 in pairs(v1) do
                if v2.node_data.node.Id == id then
                    return true
                end
            end
        end
    end

    --支线
    if type == explore_anim_type.NEW_BRANCH_NODE then
        for _, v1 in pairs(self.branch_node_anim_dict) do
            for _, v2 in pairs(v1) do
                if v2.node_data.node.Id == id then
                    return true
                end
            end
        end
    end

    --稀有怪
    if type == explore_anim_type.NEW_RARE_MONSTER then
        return self.rare_anim_arr ~= nil
    end
    
    return false
end

---是否包含主线动画
---@public
---@param chapter_id string
---@return boolean
function explore_map_anim_controller:is_has_main_node_anim(chapter_id)
    local arr = self.main_node_anim_dict[chapter_id]
    if nil ~= arr then
        local count = #arr 
        return count > 0
    end
    
    return false
end

---是否包含支线动画
---@public
---@return boolean
function explore_map_anim_controller:is_has_branch_node_anim(chapter_id)
    local arr = self.branch_node_anim_dict[chapter_id]
    if nil ~= arr then
        local count = #arr
        return count > 0
    end

    return false
end

---获得主线动画数据
---@public
---@param chapter_id string
---@return explore_prepare_play_anima[]
function explore_map_anim_controller:get_main_node_anim(chapter_id)
    local arr = self.main_node_anim_dict[chapter_id]
    return arr
end

---获得支线动画数据
---@public
---@param chapter_id string
---@return explore_prepare_play_anima[]
function explore_map_anim_controller:get_branch_node_main(chapter_id)
    local arr = self.branch_node_anim_dict[chapter_id]
    return arr
end


--endregion

--region logic

---播放新节点动画
---@public
---@param chapter_id string
---@param call_back function
function explore_map_anim_controller:play_node_anim(chapter_id, call_back)
    self.node_anim_call_back = call_back
    local is_has_main = self:is_has_main_node_anim(chapter_id)
    if is_has_main then
        self:play_new_main_node_anim()
    else
        local is_has_branch = self:is_has_branch_node_anim(chapter_id)
        if is_has_branch then
            self:play_new_branch_node_anim()
        end
    end
end

---检测播放
---@private
function explore_map_anim_controller:check_node_anim()
    local chapter_id = system_manager.explore.cur_chapter_id
    local is_has_main = self:is_has_main_node_anim(chapter_id)
    if is_has_main then
        self:play_new_main_node_anim()
    else
        local is_has_branch = self:is_has_branch_node_anim(chapter_id)
        if is_has_branch then
            self:play_new_branch_node_anim()
        else
            --都播放完了
            if nil ~= self.node_anim_call_back then
                self.node_anim_call_back()
                self.node_anim_call_back = nil
            end
        end
    end
end

--endregion

--region main node

---播放新节点更新动画
---@public
function explore_map_anim_controller:play_new_main_node_anim()
    local cur_chapter_id = system_manager.explore.cur_chapter_id
    local cur_node_pos = game_data_manager.explore:get_cur_map_pos(cur_chapter_id)
    ---@type explore_node_data
    local cur_node_data = game_data_manager.explore:get_explore_node_data_by_id(cur_node_pos)
    local cur_node_name = cur_node_data:get_node_name()
    
    ---@type explore_prepare_play_anima[]
    local anim_arr = self.main_node_anim_dict[cur_chapter_id]
    local count = #anim_arr
    if count > 0 then
        ---@type explore_prepare_play_anima
        local anim_data = anim_arr[1]
        local target_node_pos = anim_data.node_data.node.Id
        --TODO 不知道为什么 有的时候 cur_node_pos 和 target_node_pos 这里加个容错
        if cur_node_pos == target_node_pos then
            --获得主线上最后一个完成的点
            cur_node_pos = game_data_manager.explore:get_line_last_complete_node(target_node_pos, 0)
        end

        --分层检测，不是同一层的先不播放
        local layer_index = game_data_manager.explore:get_explore_layer_by_node_id(target_node_pos)
        if layer_index ~= system_manager.explore.cur_layer_index then
            self:del_prepare_play_anim(explore_anim_type.NEW_MAIN_NODE, nil, anim_data)
            system_manager.explore:set_cur_camera_state(explore_camera_state_type.NORMAL)
            self:check_node_anim()
            return
        end

        --由于任务路点打断正常动画流程，这里强制重置下cur_node_pos
        cur_node_data = anim_data.node_data.previous_node
        cur_node_pos =  anim_data.node_data.previous_node.node.Id
        
        ---@type explore_line_data
        local line_data = game_data_manager.explore:two_points_config_line(cur_node_pos, target_node_pos)
        if nil ~= line_data then
            system_manager.explore.scene_render:play_line_update_anim(cur_node_pos, target_node_pos, function()
                game_data_manager.explore:update_explore_node_anim(target_node_pos, 1)
                local time = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_EXPLORE_NODE_ACTION_TIME, tables.ConstClient.properties.Int)
                time = time / 1000
                self.timer_id = timer_mgr.add_timer(time, function()
                    ---相机回溯
                    system_manager.explore:look_at_target(cur_node_name, false, function()
                        self:check_node_anim()
                    end)
                    self.timer_id = nil
                end)
            end)
            self:del_prepare_play_anim(explore_anim_type.NEW_MAIN_NODE, nil, anim_data)
        else
            system_manager.explore:set_cur_camera_state(0)
        end
    end
end

--endregion

--region branch node

---播放新节点更新动画
---@public
function explore_map_anim_controller:play_new_branch_node_anim()
    local cur_chapter_id = system_manager.explore.cur_chapter_id
    local cur_node_pos = game_data_manager.explore:get_cur_map_pos(cur_chapter_id)
    ---@type explore_node_data
    local cur_node_data = game_data_manager.explore:get_explore_node_data_by_id(cur_node_pos)
    local cur_node_name = cur_node_data:get_node_name()

    ---@type explore_prepare_play_anima[]
    local anim_arr = self.branch_node_anim_dict[cur_chapter_id]
    local count = #anim_arr
    if count > 0 then
        ---@type explore_prepare_play_anima
        local anim_data = anim_arr[1]
        local target_node_pos = anim_data.node_data.node.Id
        --TODO 不知道为什么 有的时候 cur_node_pos 和 target_node_pos 这里加个容错
        if cur_node_pos == target_node_pos then
            --获得主线上最后一个完成的点
            cur_node_pos = game_data_manager.explore:get_line_last_complete_node(target_node_pos, 0)
        end

        --分层检测，不是同一层的先不播放
        local layer_index = game_data_manager.explore:get_explore_layer_by_node_id(target_node_pos)
        if layer_index ~= system_manager.explore.cur_layer_index then
            self:del_prepare_play_anim(explore_anim_type.NEW_BRANCH_NODE, nil, anim_data)
            system_manager.explore:set_cur_camera_state(explore_camera_state_type.NORMAL)
            self:check_node_anim()
            return
        end

        --由于任务路点打断正常动画流程，这里强制重置下cur_node_pos
        cur_node_data = anim_data.node_data.previous_node
        cur_node_pos =  anim_data.node_data.previous_node.node.Id
        
        ---@type explore_line_data
        local line_data = game_data_manager.explore:two_points_config_line(cur_node_pos, target_node_pos)
        if nil ~= line_data then
            system_manager.explore.scene_render:play_line_update_anim(cur_node_pos, target_node_pos, function()
                game_data_manager.explore:update_explore_node_anim(target_node_pos, 1)
                local time = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_EXPLORE_NODE_ACTION_TIME, tables.ConstClient.properties.Int)
                time = time / 1000
                self.timer_id = timer_mgr.add_timer(time, function()
                    ---相机回溯
                    system_manager.explore:look_at_target(cur_node_name, false, function()
                        self:check_node_anim()
                    end)
                    self.timer_id = nil
                end)
            end)
            self:del_prepare_play_anim(explore_anim_type.NEW_BRANCH_NODE, nil, anim_data)
        else
            system_manager.explore:set_cur_camera_state(0)
        end
    end
end

--endregion

return explore_map_anim_controller
