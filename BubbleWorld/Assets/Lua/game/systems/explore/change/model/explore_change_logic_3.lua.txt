---
--- Generated by libin
--- File name : explore_change_logic_3.lua.txt
--- DataTime : 2023/05/10
--- Description : 特效+换图层
---

local timer_mgr = timer_manager
local string = string
local message = message
---@type message_type
local message_type = enum.message_type

local super = require "game/systems/explore/change/base_change_logic"

---@class explore_change_logic_3 : base_change_logic
local explore_change_logic_3 = class("explore_change_logic_3", super)

--region base api

---构造方法
---@protected
function explore_change_logic_3:ctor()
    super.ctor(self)
end

---@public
function explore_change_logic_3:dispose()
    super.dispose(self)
end

--endregion

--region logic

---当前默认变换（一般用于场景初始化）
---@public
---@param state number
---@param render explore_building_render_unit
function explore_change_logic_3:do_default_change(state, render)
    for i = 0, 3 do
        if i == state then
            render:set_state_root_active(i, true)
        else
            render:set_state_root_active(i, false)
        end
    end
end

---进行变换
---@public
---@param last_state number
---@param new_state number
---@param render explore_building_render_unit
function explore_change_logic_3:do_change(last_state, new_state, render)
    if last_state == new_state then
        return
    end
    
    local last_resource_data, last_logic, new_resource_data = self:get_some_data(last_state, new_state, render)
    if nil == last_resource_data or nil == last_logic or nil == new_resource_data then
        return
    end
    
    --step1:是否有过度特效
    local is_has_fade_effect = not string.is_nil_or_empty(new_resource_data.ChangeEffect)
    if is_has_fade_effect then
        ---@type UnityEngine.GameObject
        local effect_root = render:get_effect_root()
        self:update_effect_offset_pos(effect_root, new_resource_data)
        effect.play_effect_async(new_resource_data.ChangeEffect, effect_root, 1)
    end

    --step2:是否延迟切换
    local is_delay_change = new_resource_data.ChangeTime > 0
    if is_delay_change then
        local delay_time = new_resource_data.ChangeTime / 1000
        self.delay_timer_id = timer_mgr.add_timer(delay_time, function()
            self.self.delay_timer_id = nil
            last_logic:do_close(last_state, render)
            --设置新状态根节点显示
            render:set_state_root_active(new_state, true)
        end)
    else
        last_logic:do_close(last_state, render)
        --设置新状态根节点显示
        render:set_state_root_active(new_state, true)
    end

    --step3持续时间
    local duration_time = new_resource_data.TotalTime / 1000
    if duration_time <= 0 then
        duration_time = 1
    end
    self.duration_timer_id = timer_mgr.add_timer(duration_time, function()
        self.duration_timer_id = nil
        --通知avg恢复播放
        message.broadcast(message_type.STORY_AVG_CLIP_RESUME_FOR_EXPLORE, true)
    end)
end

---立即变换
---@public
---@param last_state number
---@param new_state number
---@param render explore_building_render_unit
function explore_change_logic_3:do_change_immediately(last_state, new_state, render)
    if last_state == new_state then
        return
    end
    
    local last_resource_data, last_logic, new_resource_data = self:get_some_data(last_state, new_state, render)
    if nil == last_resource_data or nil == last_logic or nil == new_resource_data then
        return
    end

    last_logic:do_close(last_state, render)
    --设置新状态根节点显示
    render:set_state_root_active(new_state, true)
end

---关闭变换
---@public
---@param state number
---@param render explore_building_render_unit
function explore_change_logic_3:do_close(state, render)
    render:set_state_root_active(state, false)
end


--endregion

return explore_change_logic_3
