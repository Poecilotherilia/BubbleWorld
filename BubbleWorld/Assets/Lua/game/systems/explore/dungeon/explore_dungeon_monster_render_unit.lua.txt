---
--- Generated by libin
--- File name : explore_dungeon_monster_render_unit.lua.txt
--- DataTime : 2023/03/16
--- Description : 
---

local CharacterLuaBehaviour = cs.CharacterLuaBehaviour
local ExploreUnitBornPoint = cs.ExploreUnitBornPoint
local tables = tables
local explore_dungeon_data = game_data_manager.explore_dungeon
local DfAnimationEndType = cs.DfAnimationEndType
local timer_mgr = timer_manager
local data = data
local vector3 = require "game/systems/battle/utils/vector3"
local message = message
---@type message_type
local message_type = enum.message_type
local role_attach_point_type = enum.common.role_attach_point_type
local string = string
local GameObject = cs.GameObject
local res = res
local game_util = require "game/utils/game_util"

---@class explore_dungeon_monster_render_unit
local explore_dungeon_monster_render_unit = class("explore_dungeon_monster_render_unit")

--region base api

---构造方法
---@protected
---@param monster_data record_row
---@param monster_obj UnityEngine.GameObject
---@param bonus_effect_obj UnityEngine.GameObject
---@param res_data RoleRes
---@param res_loader DeusFramework.Res.DfResLoader
function explore_dungeon_monster_render_unit:ctor(monster_data, monster_obj, bonus_effect_obj, res_data, res_loader)
    ---@type DeusFramework.Res.DfResLoader
    self.res_loader = res_loader
    ---@type RoleRes
    self.res_data = res_data
    
    ---@type record_row
    self.monster_data = monster_data
    ---@type UnityEngine.GameObject
    self.monster_obj = monster_obj
    ---@type Game.Behaviour.CharacterLuaBehaviour
    self.monster_behaviour = self.monster_obj:GetComponent(typeof(CharacterLuaBehaviour))
    self.monster_behaviour:InitLua(self)

    ---@type UnityEngine.GameObject
    self.effect_obj = nil

    ---@type UnityEngine.GameObject
    self.bonus_effect_obj = bonus_effect_obj
    ---@type Game.Explore.ExploreUnitBornPoint
    self.born_point = nil
    
    self.timer_id = nil
    
    self.timer_id2 = nil
    
    ---@type number
    self.distance = 0
end

---清理
---@public
function explore_dungeon_monster_render_unit:dispose()
    self.res_loader = nil
    self.res_data = nil
    
    self.monster_data = nil
    self.monster_obj = nil
    self.monster_behaviour = nil
    self.effect_obj = nil

    self.bonus_effect_obj = nil
    self.born_point = nil

    if nil ~= self.timer_id then
        timer_mgr.remove_timer(self.timer_id)
        self.timer_id = nil
    end
    if nil ~= self.timer_id2 then
        timer_mgr.remove_timer(self.timer_id2)
        self.timer_id2 = nil
    end
    
    self.distance = nil
end


--endregion

--region logic

---获得怪物uid
---@public
---@return boolean
function explore_dungeon_monster_render_unit:get_monster_id()
    ---@type Ident
    local uid = self.monster_data:get_value(tables.Player.records.ExploreDungeonMonsters.columns.Id)
    return uid
end

---获得怪物flag
---@public
---@return number
function explore_dungeon_monster_render_unit:get_monster_flag()
    local flag = self.monster_data:get_value(tables.Player.records.ExploreDungeonMonsters.columns.Flgs)
    return flag
end

---@public
---@return UnityEngine.GameObject
function explore_dungeon_monster_render_unit:get_monster_obj()
    return self.monster_obj
end

---@public
---@return number, number, number
function explore_dungeon_monster_render_unit:get_monster_pos()
    return self.monster_obj:GetPosition()
end

---@public
---@param hero UnityEngine.GameObject
function explore_dungeon_monster_render_unit:calc_distance(hero)
    local x1, y1, z1 = self:get_monster_pos()
    local x2, y2, z2 = hero:GetPosition()

    local v1 = vector3.new(x1, y1, z1)
    local v2 = vector3.new(x2, y2, z2)
    
    self.distance = vector3.distance(v1, v2)
    
    --local index = self:get_index()
    --log.error("Index : "..index.." | Distance : "..self.distance)
end


---@public
---@return UnityEngine.GameObject
function explore_dungeon_monster_render_unit:get_effect_obj()
    return self.bonus_effect_obj
end

---@public
---@return number
function explore_dungeon_monster_render_unit:get_index()
    local index = self.monster_data:get_value(tables.Player.records.ExploreDungeonMonsters.columns.Index)
    index = tonumber(index)
    return index
end

--endregion

--region born

---设置出生点相关信息
---@public
---@param point_obj UnityEngine.GameObject
function explore_dungeon_monster_render_unit:set_born_point(point_obj)
    self.born_point = point_obj:GetComponent(typeof(ExploreUnitBornPoint))
    self.monster_obj:SetParent(point_obj)
    self.monster_obj:SetLocalPosition(0,0,0)
    self.monster_obj:SetLocalRotation(0,0,0)
    --self.monster_obj:SetLocalScale(1,1,1)
    --
    --if nil ~= self.bonus_effect_obj then
    --    self.bonus_effect_obj:SetParent(point_obj)
    --    self.bonus_effect_obj:SetLocalPosition(0,0,0)
    --    self.bonus_effect_obj:SetLocalRotation(0,0,0)
    --    self.bonus_effect_obj:SetLocalScale(1,1,1)
    --end
end

---播放出生表现
---@public
function explore_dungeon_monster_render_unit:play_born_anim()
    local index = self.monster_data:get_value(tables.Player.records.ExploreDungeonMonsters.columns.Index)
    if index <= 9 then
        --小怪
        local flag = explore_dungeon_data:is_monster_patrol(index)
        if flag then
            local monster_flag = self.monster_data:get_value(tables.Player.records.ExploreDungeonMonsters.columns.Flgs)
            if game_util.is_bit_flag(monster_flag, 1) then
                --直接播放寻路
                local walk_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_WALK, tables.ConstClient.properties.String)
                local walk_action_path = data.get(tables.Action.name, self.res_data[walk_action_id], tables.Action.properties.Name)
                self.monster_behaviour:PlayAnimationAsync(walk_action_path, 1, call_back, self.res_loader, nil, 0.2)
                self.born_point:DOPatrol()
                self:after_born(index)
                message.broadcast(message_type.EXPLORE_DUNGEON_MONSTER_BORN_DONE)
            else
                --TODO 第二种情况  播放出生表现后 进入巡逻
                local call_back = function(type, clip_path)
                    if type == DfAnimationEndType.Completed then
                        local walk_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_WALK, tables.ConstClient.properties.String)
                        local walk_action_path = data.get(tables.Action.name, self.res_data[walk_action_id], tables.Action.properties.Name)
                        self.monster_behaviour:PlayAnimationAsync(walk_action_path, 1, nil, self.res_loader, nil, 0.2)
                        self.born_point:DOPatrol()
                        message.broadcast(message_type.EXPLORE_DUNGEON_MONSTER_BORN_DONE)

                        self:after_born(index)
                    end
                end
                --播放出生动画
                local born_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_BORN, tables.ConstClient.properties.String)
                local born_action_path = data.get(tables.Action.name, self.res_data[born_action_id], tables.Action.properties.Name)
                self.monster_behaviour:PlayAnimationAsync(born_action_path, 1, call_back, self.res_loader, nil, 0.2)
            end
        else
            local monster_flag = self.monster_data:get_value(tables.Player.records.ExploreDungeonMonsters.columns.Flgs)
            if game_util.is_bit_flag(monster_flag, 1) then
                --直接播放待机1
                local idle1_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_IDLE, tables.ConstClient.properties.String)
                local idle1_action_path = data.get(tables.Action.name, self.res_data[idle1_action_id], tables.Action.properties.Name)
                self.monster_behaviour:PlayAnimationAsync(idle1_action_path, 1, nil, self.res_loader, nil, 0.2)
                self:after_born(index)
                message.broadcast(message_type.EXPLORE_DUNGEON_MONSTER_BORN_DONE)

                ---@type ConstClient
                local client_data = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACT)
                local percent = client_data.Float / 100 * 10000
                local every_time = math.random(5, 12)

                local timer_call = function()
                    self:play_random(percent)
                end

                self.timer_id = timer_mgr.add_timer(every_time, timer_call)
            else
                --TODO 第一种情况  播放出生表现后  播放待机1  x秒后y%概率播放待机2 
                local call_back1 = function(type, clip_path)
                    if type == DfAnimationEndType.Completed then
                        local idle1_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_IDLE, tables.ConstClient.properties.String)
                        local idle1_action_path = data.get(tables.Action.name, self.res_data[idle1_action_id], tables.Action.properties.Name)
                        self.monster_behaviour:PlayAnimationAsync(idle1_action_path, 1, nil, self.res_loader, nil, 0.2)
                        message.broadcast(message_type.EXPLORE_DUNGEON_MONSTER_BORN_DONE)

                        self:after_born(index)
                    end
                end
                --播放出生动画
                local born_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_BORN, tables.ConstClient.properties.String)
                local born_action_path = data.get(tables.Action.name, self.res_data[born_action_id], tables.Action.properties.Name)
                self.monster_behaviour:PlayAnimationAsync(born_action_path, 1, call_back1, self.res_loader, nil, 0.2)

                ---@type ConstClient
                local client_data = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACT)
                local percent = client_data.Float / 100 * 10000
                local every_time = math.random(5, 12)

                local timer_call = function()
                    self:play_random(percent)
                end

                self.timer_id = timer_mgr.add_timer(every_time, timer_call)
            end
        end
    else
        --Boss
        local flag = game_data_manager.explore_dungeon:dungeon_monster_is_play_anim(10, 2)
        if flag then
            --TODO 第四种情况  播放过出生表现 直接播放待机1
            local idle1_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_IDLE, tables.ConstClient.properties.String)
            local idle1_action_path = data.get(tables.Action.name, self.res_data[idle1_action_id], tables.Action.properties.Name)
            self.monster_behaviour:PlayAnimationAsync(idle1_action_path, 1, nil, self.res_loader,nil, 0.2)
            self:after_born(index)
            
            --尝试自动战斗
            message.broadcast(message_type.UI_EXPLORE_DUNGEON_TRY_AUTO_BATTLE)
        else
            --TODO 第三种情况  播放出生表现后 只播放待机1
            local call_back = function(type, clip_path)
                if type == DfAnimationEndType.Completed then
                    local idle1_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_IDLE, tables.ConstClient.properties.String)
                    local idle1_action_path = data.get(tables.Action.name, self.res_data[idle1_action_id], tables.Action.properties.Name)
                    self.monster_behaviour:PlayAnimationAsync(idle1_action_path, 1, nil, self.res_loader,nil, 0.2)

                    self:after_born(index)
                    --尝试自动战斗
                    message.broadcast(message_type.UI_EXPLORE_DUNGEON_TRY_AUTO_BATTLE)
                end
            end
            --播放出生动画
            local born_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_BORN, tables.ConstClient.properties.String)
            local born_action_path = data.get(tables.Action.name, self.res_data[born_action_id], tables.Action.properties.Name)
            self.monster_behaviour:PlayAnimationAsync(born_action_path, 1, call_back, self.res_loader, nil, 0.2)
        end
    end
end

---@private
function explore_dungeon_monster_render_unit:play_random(percent)
    local random_time = math.random(5, 12)
    local timer_call = function()
        local target = math.random(1, 10000)
        if target < percent then

            local call_back1 = function(type, clip_path)
                if type == DfAnimationEndType.Completed then
                    local idle1_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_IDLE, tables.ConstClient.properties.String)
                    local idle1_action_path = data.get(tables.Action.name, self.res_data[idle1_action_id], tables.Action.properties.Name)
                    self.monster_behaviour:PlayAnimationAsync(idle1_action_path, 1, nil, self.res_loader, nil, 0.2)
                end
            end

            local idle2_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_IDLE2, tables.ConstClient.properties.String)
            local idle2_action_path = data.get(tables.Action.name, self.res_data[idle2_action_id], tables.Action.properties.Name)
            self.monster_behaviour:PlayAnimationAsync(idle2_action_path, 1, call_back1, self.res_loader, nil, 0.2)
        end
        self:play_random(percent)
    end

    self.timer_id = timer_mgr.add_timer(random_time, timer_call)
end

---出生之后
---@private
---@param index
function explore_dungeon_monster_render_unit:after_born(index)
    lua.start_coroutine(function()
        --数据上死亡了不创建触发器
        local flag = self.monster_data:get_value(tables.Player.records.ExploreDungeonMonsters.columns.IsComplete)
        if flag == 0 then
            ---设置触发器
            ---@type UnityEngine.GameObject
            local hero_obj = system_manager.explore.hero_obj
            --触发器高度
            system_manager.trigger:init_explore_dungeon_triggers_by_index(hero_obj.transform, index)
            local trigger_id = system_manager.trigger:get_explore_dungeon_trigger_id(index)
            ---@type distance_trigger
            local trigger = system_manager.trigger:get_trigger(trigger_id)
            ---@type UnityEngine.Transform
            local trans = self.monster_behaviour:GetAttackPoint(role_attach_point_type.HEALTH_BAR)
            trigger:set_target(trans)

            local bonus = self.monster_data:get_value(tables.Player.records.ExploreDungeonMonsters.columns.ExtraBonus)
            --额外奖励特效
            if nil ~= bonus and not string.is_nil_or_empty(bonus) then
                local effect_id = game_data_manager.explore_dungeon:get_cur_bonus_effect_id(bonus)
                if nil ~= effect_id then
                    ---@type Effect
                    local effect_data = data.get(tables.Effect.name, effect_id)

                    ---@type UnityEngine.GameObject
                    local effect_obj = res.load_instance_sync(effect_data.Path,
                            string.get_file_name_without_extension(effect_data.Path),
                            nil,
                            nil,
                            self.res_loader,
                            nil
                    )
                    self.effect_obj = effect_obj

                    ---@type UnityEngine.Transform
                    local attach_point = self.monster_behaviour:GetAttackPoint(effect_data.HangingPointPath)
                    if nil ~= attach_point then
                        self.effect_obj:SetParent(attach_point.gameObject)
                        self.effect_obj:SetLocalPosition(0,0,0)
                        self.effect_obj:SetRotation(0,0,0)
                        self.effect_obj:SetLocalScale(1,1,1)
                    end
                end
            end
        end
    end)
end

--endregion

--region death

---播放死亡动作
---@public
function explore_dungeon_monster_render_unit:play_death_anim()
    local death_anim_name = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DUNGEON_MONSTER_ACTION_DIE, tables.ConstClient.properties.String)
    local death_anim_id = self.res_data[death_anim_name]
    local death_anim_path = data.get(tables.Action.name, death_anim_id, tables.Action.properties.Name)
    self.born_point:DOPause()

    local index = self.monster_data:get_value(tables.Player.records.ExploreDungeonMonsters.columns.Index)
    --触发器删除
    system_manager.trigger:remove_dungeon_trigger_by_index(index)
    --加成特效删除
    if nil ~= self.effect_obj then
        res.unload_instance(self.effect_obj, self.res_loader)
    end
    
    local call_back = function(type, clip_path)
        if type == DfAnimationEndType.Completed then
            system_manager.explore:unload_dungeon_monster(index)
        end
    end
    self.monster_behaviour:PlayAnimationAsync(death_anim_path, 1, call_back, self.res_loader, nil, 0.2)
end

--endregion



return explore_dungeon_monster_render_unit