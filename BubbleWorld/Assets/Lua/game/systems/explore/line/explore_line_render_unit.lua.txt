---
--- Generated by libin
--- File name : explore_line_render_unit.lua.txt
--- DataTime : 2022/07/06
--- Description : 探索连线渲染器
---

local explore_data = game_data_manager.explore
local message = message
---@type message_type
local message_type = enum.message_type
local array_table = array_table
local explore_anim_type = enum.experience.explore_anim_type
local explore_node_event_type = enum.experience.explore_node_event_type

---@class explore_line_render_unit
local explore_line_render_unit = class("explore_line_render_unit")

--region base api

---构造方法
---@protected
---@param cs_line_unit Game.Explore.ExploreLineUnit
---@param line_data explore_line_data
function explore_line_render_unit:ctor(cs_line_unit, line_data)
    ---@type Game.Explore.ExploreLineUnit
    self.cs_unit = cs_line_unit
    ---@type explore_line_data
    self.line_data = line_data
    
    ---@type explore_node_data[]
    self.cache_active_node_arr = {}

    self.cs_unit:InitLua(self)
    
    self:init_line_node()
end

---销毁
---@public
function explore_line_render_unit:dispose()
    self.cs_unit = nil
    self.line_data = nil
    self.cache_active_node_arr = nil
end



--endregion

--region logic

---初始化状态
---@public
function explore_line_render_unit:init_line_node()
    ---@type table<string, explore_anim_data>
    local anim_data_dict = self.line_data.anim_data_dict
    for name, anim_data in pairs(anim_data_dict) do
        local arr = anim_data.node_data_arr
        if self.line_data.line_type == 0 then
            --主线
            for i = 1, #arr do
                ---@type explore_node_data
                local node_data = arr[i]
                self:update_node_active_state(node_data)
            end
        else
            --支线
            for i = 2, #arr do
                ---@type explore_node_data
                local node_data = arr[i]
                self:update_node_active_state(node_data)
            end
        end
    end
end

---刷新节点显示状态
---@public
---@param node_data explore_node_data
function explore_line_render_unit:update_node_active_state(node_data)
    local node_name = node_data:get_node_name()
    if node_data.node.EventType == explore_node_event_type.THREE_STAR then
        if node_data.state <= 0 then
            system_manager.explore:set_node_active(node_name, false)
        else
            system_manager.explore:set_node_active(node_name, true)
        end
    elseif node_data.node.EventType == explore_node_event_type.BATTLE then
        if node_data.state == 1 then
            system_manager.explore:set_node_active(node_name, true)
        else
            system_manager.explore:set_node_active(node_name, false)
        end   
    else
        system_manager.explore:set_node_active(node_name, true)
    end
end


---获得进度
---@public
---@param name string
---@return number
function explore_line_render_unit:get_progress(name)
    return self.cs_unit:GetProgress(name)
end

---获得连线电脑
---@public
---@return Dreamteck.Splines.SplineComputer
function explore_line_render_unit:get_spline_computer()
    return self.cs_unit:GetSplineComputer()
end

---播放激活动画
---@public
---@param full_from number
---@param full_to number
---@param full_time number
---@param dash_delay number
---@param dash_from number
---@param dash_to number
---@param dash_time number
function explore_line_render_unit:play_active_anim(full_from, full_to, full_time, dash_delay, dash_from, dash_to, dash_time)
    self.cs_unit:PlayActiveAnimation(full_from, full_to, full_time, dash_delay, dash_from, dash_to, dash_time)
end

---播放更新动画
---@public
---@param start_id string
---@param end_id string
function explore_line_render_unit:play_update_anim(start_id, end_id)
    local start_name = explore_data:get_explore_node_name_by_id(start_id)
    local end_name = explore_data:get_explore_node_name_by_id(end_id)
    local full_from = self:get_progress(start_name) 
    local full_to = self:get_progress(end_name)
    ---@type explore_anim_data
    local anim_data = self.line_data:two_points_config_anim(start_id, end_id)
    if nil ~= anim_data then
        local last_id = anim_data:get_last_node_id()
        local last_name = explore_data:get_explore_node_name_by_id(last_id)
        local dash_from = self:get_progress(start_name)
        local dash_to = self:get_progress(last_name)
        local start_index = self.line_data:get_node_index(start_id)
        local end_index = self.line_data:get_node_index(end_id)
        local time = (end_index - start_index) * 1

        if time > 0 then
            self.cs_unit:PlayUpdateAnimation(full_from, full_to, dash_from, dash_to, time)
        end
    else
        log.error("explore_line_render_unit.play_update_anim fail")
    end
end

---刷新线当前进度
---@public
function explore_line_render_unit:update_cur_progress()
    if self.line_data:is_last_node_complete() then
        local last_node = self.line_data:get_last_complete_node_data()
        if nil ~= last_node then
            local name = last_node:get_node_name()
            self.cs_unit:UpdateLineProgress(name, name)
        end
    else
        --local active_node = self.line_data:get_last_active_node_data()
        ----新节点激活，不刷新进度
        --local flag = system_manager.explore:is_has_prepare_play_anim(NEW_MAIN_NODE)
        --if flag then
        --    return
        --end
        --
        --if nil ~= active_node then
        --    local active_name = active_node:get_node_name()
        --    self.cs_unit:UpdateLineProgress(active_name, nil)
        --else
        --    self.cs_unit:UpdateLineProgress(nil, nil)
        --end
        --
        --
        local active_node = self.line_data:get_last_active_node_data()
        if nil ~= active_node then
            local active_name = active_node:get_node_name()
            self.cs_unit:UpdateLineProgress(active_name, nil)
        else
            self.cs_unit:UpdateLineProgress(nil, nil)
        end
    end
end

---隐藏连线
---@private
function explore_line_render_unit:hide_line()
    self.cs_unit:HideLine()
end


--endregion

--region cs call

---到达回调
---@private
---@param name string
function explore_line_render_unit:on_cross_trigger(name)
    --log.error("到达 "..name)
    ----显示到达的节点
    --system_manager.explore:set_node_active(name, true)
end


--endregion

return explore_line_render_unit