---
--- Generated by libin
--- File name : explore_story_controller.lua.txt
--- DataTime : 2023/07/04
--- Description : 
---

local message = message
---@type message_type
local message_type = enum.message_type
local data = data
local tables = tables
local explore_story_type = enum.experience.explore_story_type
local base_story = require "game/systems/explore/story/explore_base_story"
local task_story = require "game/systems/explore/story/explore_task_story"
local box_story = require "game/systems/explore/story/explore_box_story"
local rare_story = require "game/systems/explore/story/explore_rare_story"

---@class before_battle_node_info
---@field node_id string
---@field state number
local before_battle_node_info = nil

---@class explore_story_controller
local explore_story_controller = class("explore_story_controller")

--region base api

---构造方法
---@protected
function explore_story_controller:ctor()
    ---@type explore_node_data
    self.end_story_node_data = nil
    
    ---@type before_battle_node_info
    self.cache_node_info = nil
    
    ---@type table<explore_story_type, explore_base_story>
    self.story_dict = {}
    self.story_dict[explore_story_type.DEFAULT] = base_story.new(self)
    self.story_dict[explore_story_type.TASK] = task_story.new(self)
    self.story_dict[explore_story_type.BOX] = box_story.new(self)
    self.story_dict[explore_story_type.RARE] = rare_story.new(self)
end

---@protected
function explore_story_controller:dispose()
    self.end_story_node_data = nil
    self.cache_node_info = nil

    for i, v in pairs(self.story_dict) do
        v:dispose()
    end
    self.story_dict = nil
end

--endregion

--region logic

---检查播放路点开始剧情
---@public
---@param node_id string
---@param call_back function
function explore_story_controller:check_node_start_story(node_id, call_back)
    for i, v in pairs(self.story_dict) do
        v:check_node_start_story(node_id, call_back)
    end
end

---是否能播放后端剧情
---@public
---@param call_back function
function explore_story_controller:check_node_end_story(call_back)
    for i, v in pairs(self.story_dict) do
        v:check_node_end_story(call_back)
    end
end

---@public
---@param node_data explore_node_data
function explore_story_controller:set_end_story_node(node_data)
    self.end_story_node_data = node_data
end

---@public
function explore_story_controller:get_end_story_node()
    return self.end_story_node_data
end

---@public
---@param chapter_id string
function explore_story_controller:try_generate_end_story_data(chapter_id)
    if nil == chapter_id then
        return
    end
    
    local node_id = game_data_manager.explore:get_cur_map_pos(chapter_id)
    ---@type explore_node_data
    local node_data = game_data_manager.explore:get_explore_node_data_by_id(node_id)
    if nil == node_id or nil == node_data then
        return
    end
    
    local str_arr = node_data.node.NodeEndStory
    --路点没完成
    if node_data.state ~= 2 then
        return
    end
    if nil ~= str_arr and #str_arr > 0 then
        --战前缓存数据非空，且与目标路点ID一致
        if nil ~= self.before_battle_node_info and self.before_battle_node_info.node_id == node_id then
            --战前缓存数据状态与当前状态不一致
            if self.before_battle_node_info.state ~= node_data.state then
                self.before_battle_node_info.state = node_data.state
                self:set_end_story_node(node_data)
            end
        end
    end
end

--endregion

--region before battle

---设置战前缓存信息
---@public
function explore_story_controller:set_before_battle_info(node_id, state)
    ---@type explore_node_data
    local node_data = game_data_manager.explore:get_explore_node_data_by_id(node_id)
    ---@type before_battle_node_info
    self.before_battle_node_info = {}
    self.before_battle_node_info.node_id = node_id
    self.before_battle_node_info.state = node_data.state
end

--endregion

return explore_story_controller

