---
--- Generated by libin
--- File name : building_system.lua.txt
--- DataTime : 2023/11/16
--- Description : 
---

local data = data
local tables = tables
local building_data = game_data_manager.building
local building_net = require "game/systems/building/building_network"
local part_render = require "game/systems/building/building_part_render"
local res = res
local GameObject = cs.GameObject
local string = string
local camera_layer = enum.common.camera_layer
local camera_blend_type = enum.common.camera_blend_type
local message = message
---@type message_type
local message_type = enum.message_type


---@class building_system
local building_system = class("building_system")

--region base api

---构造函数
---@protected
function building_system:ctor()

    ---@public
    ---@type DeusFramework.Res.DfResLoader
    self.res_loader = res.create_res_loader()
    
    ---网络交互
    ---@type building_network
    self.network = building_net.new()
    
    ---当前应用装饰 key:type
    ---@type table<string, building_part_render>
    self.cur_deploy_render_dict = {}


    ---当前预览装饰 key:type
    ---@type table<string, building_part_render>
    self.preview_render_dict = {}
    
    ---建筑物父节点
    ---@type table<string, UnityEngine.Transform>
    self.parent_dict = {}
    
    ---@type number
    self.camera_id = nil
end

---销毁
---@public
function building_system:dispose()
    self.network:dispose()
    self.network = nil

    for i, v in pairs(self.cur_deploy_render_dict) do
        res.unload_instance(v.obj, self.res_loader)
    end
    self.cur_deploy_render_dict = nil

    for i, v in pairs(self.preview_render_dict) do
        res.unload_instance(v.obj, self.res_loader)
    end
    self.preview_render_dict = nil

    self.res_loader:Dispose()
    self.res_loader = nil
    self.parent_dict = nil

    if nil ~= self.camera_id then
        camera_manager.remove_virtual_camera(self.camera_id)
    end
    camera_manager.set_camera_layer_mask(13, true)
    camera_manager.set_camera_layer_mask(22, true)
    self.camera_id = nil
end


---清理
---@public
function building_system:clear()
    for i, v in pairs(self.cur_deploy_render_dict) do
        res.unload_instance(v.obj, self.res_loader)
    end
    self.cur_deploy_render_dict = {}

    for i, v in pairs(self.preview_render_dict) do
        res.unload_instance(v.obj, self.res_loader)
    end
    self.preview_render_dict = {}
    
    --清理父节点
    self.parent_dict = {}

    if nil ~= self.camera_id then
        camera_manager.remove_virtual_camera(self.camera_id)
    end
    camera_manager.set_camera_layer_mask(13, true)
    camera_manager.set_camera_layer_mask(22, true)
    self.camera_id = nil
end

--endregion

--region Load UnLoad Preview Revert

---加载当前应用的建筑物
---@private
function building_system:load_cur_deploy_building()
    ---@type table<string, building_part_data>
    local dict = building_data:get_cur_deploy_data_dict()
    for i, v in pairs(dict) do
        local type = v:get_type()
        ---@type UnityEngine.Transform
        local parent = self:get_building_parent(type)
        local asset_path = v:get_asset_path()
        ---@type UnityEngine.GameObject
        local obj = res.load_instance_sync(asset_path,
                string.get_file_name_without_extension(asset_path),
                parent,
                nil,
                self.res_loader,
                nil
        )
        obj:SetLocalPosition(0, 0, 0)
        obj:SetLocalRotation(0, 0, 0)
        obj:SetLocalScale(1, 1, 1)
        
        ---@type building_part_render
        local render = part_render.new(obj, v)
        self.cur_deploy_render_dict[type] = render
    end
end

---预览建筑物
---@public
---@param part_data building_part_data
function building_system:preview_building(part_data)
    --检查当前预览是不是当前装配的
    local type = part_data:get_type()
    ---@type building_part_data
    local cur_deploy_data = building_data:get_cur_deploy_data_by_type(type)
    if cur_deploy_data.tab_data.Id == part_data.tab_data.Id then
        --有没有上一个预览
        ---@type building_part_render
        local render = self.preview_render_dict[type]
        if nil ~= render then
            --删除上一个预览
            if nil ~= render.obj then
                res.unload_instance(render.obj, self.res_loader)
                render:dispose()
            end
        end
        self:set_cur_deploy_building_part_active(type, true)
        ---@type building_part_render
        local cur_render = self:get_cur_deploy_building(type)
        if nil ~= cur_render then
            lua.wait_one_frame_async(function()
                cur_render:play_change_effect(false)
            end)
        end
    else
        --有没有上一个预览
        ---@type building_part_render
        local render = self.preview_render_dict[type]
        if nil ~= render then
            --判断是否重复选中
            if nil ~= render.part_data and render.part_data.tab_data.Id == part_data.tab_data.Id then
                render:play_change_effect(false)
                return
            end
            
            --删除上一个预览
            if nil ~= render.obj then
                res.unload_instance(render.obj, self.res_loader)
                render:dispose()
            end
            
            --加载当前预览
            local p = {}
            p.render = render
            p.part_data = part_data
            lua.start_coroutine(function(param)
                self:preview_building_sync(param)
            end, p)
        else
            --加载当前预览
            render = part_render.new(nil, part_data)
            self.preview_render_dict[type] = render
            local p = {}
            p.render = render
            p.part_data = part_data
            lua.start_coroutine(function(param)
                self:preview_building_sync(param)
            end, p)
        end
    end
end

---加载预览建筑物（同步）
---@private
function building_system:preview_building_sync(param)
    ---@type building_part_render
    local render = param.render
    ---@type building_part_data
    local part_data = param.part_data
    
    local type = part_data:get_type()
    ---@type UnityEngine.Transform
    local parent = self:get_building_parent(type)
    local asset_path = part_data:get_asset_path()
    ---@type UnityEngine.GameObject
    local obj = res.load_instance_sync(asset_path,
            string.get_file_name_without_extension(asset_path),
            parent,
            nil,
            self.res_loader,
            nil
    )
    if nil == obj then
        log.error("preview_building_sync error")
        return
    end
    
    obj:SetLocalPosition(0, 0, 0)
    obj:SetLocalRotation(0, 0, 0)
    obj:SetLocalScale(1, 1, 1)

    --当前装配隐藏
    self:set_cur_deploy_building_part_active(type, false)
    render:update_render(obj, part_data)
    render:play_change_effect(false)
end

---获得预览建筑物
---@private
---@param type string
---@return building_part_render
function building_system:get_preview_building(type)
    return self.preview_render_dict[type]
end

---应用建筑物
---@public
---@param part_data building_part_data
function building_system:apply_building(part_data)
    local type = part_data:get_type()
    ---卸载当前装配建筑物
    ---@type building_part_render
    local cur_render = self:get_cur_deploy_building(type)
    if nil ~= cur_render then
        res.unload_instance(cur_render.obj, self.res_loader)
        cur_render:dispose()
    end
    ---从预览字典移动到当前装配字典
    ---@type building_part_render
    local preview_render = self:get_preview_building(type)
    if nil ~= cur_render and nil ~= preview_render then
        cur_render:update_render(preview_render.obj, preview_render.part_data)
        preview_render:dispose()
        --刷新UI应用建筑物
        message.broadcast(message_type.DYNAMIC_BUILDING_CHECK_APPLE_BUILDING, cur_render.part_data)
    end
end

---还原建筑物
---@public
function building_system:revert_building()
    ---卸载预览建筑物
    for i, v in pairs(self.preview_render_dict) do
        if nil ~= v.obj then
            local type = v:get_type()
            res.unload_instance(v.obj, self.res_loader)
            v:dispose()
        end
    end

    for i, v in pairs(self.cur_deploy_render_dict) do
        v:set_active(true)
    end
    
    self.preview_render_dict = {}
end

---设置当前应用建筑物显隐
---@public
---@param type string
---@param is_active
function building_system:set_cur_deploy_building_part_active(type, is_active)
    ---@type building_part_render
    local render = self.cur_deploy_render_dict[type]
    if nil ~= render then
        render:set_active(is_active)
    end
end

---获得当前装配建筑物
---@private
---@param type string
---@return building_part_render
function building_system:get_cur_deploy_building(type)
    return self.cur_deploy_render_dict[type]
end

--endregion

--region building parent

---初始化父节点
---@private
function building_system:init_building_parents()
    ---@type table<string, DecorationType>
    local dict = data.get_all(tables.DecorationType.name)
    for type, v in pairs(dict) do
        ---@type UnityEngine.GameObject
        local parent = GameObject.Find(v.HangingName)
        if nil ~= parent then
            self.parent_dict[type] = parent.transform
        else
            log.error("DecorationType表 ID ："..type.." 的数据列 HangingName 配置错误")
        end
    end
end

---获得父节点
---@private
---@param type string
---@return UnityEngine.Transform
function building_system:get_building_parent(type)
    return self.parent_dict[type]
end

--endregion

--region camera

---创建相机
---@public
function building_system:create_camera()
    ---@type ConstClient
    local client = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DYNAMIC_BUILDING_CAMERA_ROOT)
    ---@type UnityEngine.GameObject
    local parent = GameObject.Find(client.String)
    
    local _, camera_id = camera_manager.generate_virtual_camera(parent.transform, camera_layer.UI + 10)
    self.camera_id = camera_id
    camera_manager.show_virtual_camera(self.camera_id, camera_blend_type.Cut, 0)
    --屏蔽13和22 Layer
    camera_manager.set_camera_layer_mask(13, false)
    camera_manager.set_camera_layer_mask(22, false)
end

---更换相机
---@public
---@param type string
function building_system:change_camera(type)
    ---@type DecorationType
    local decoration_type = data.get(tables.DecorationType.name, type)
    if nil ~= decoration_type then
        camera_manager.set_v_camera_point_data_by_id(self.camera_id, decoration_type.CameraPoint)
    end
end

---还原主角视角
---@public
function building_system:revert_camera()
    if nil ~= self.camera_id then
        camera_manager.remove_virtual_camera(self.camera_id)
    end
    camera_manager.set_camera_layer_mask(13, true)
    camera_manager.set_camera_layer_mask(22, true)
    self.camera_id = nil
    
    --管家系统的相机也帮着还原下
    --system_manager.housekeeper:revert_camera_mode()
end

--endregion

--region network

---更换装饰req
---@public
---@param id string
function building_system:req_change_decoration(id)
    self.network:req_change_decoration(id)
end

---请求红点req
---@public
---@param id string
function building_system:req_red_point_decoration(id)
    self.network:req_red_point_decoration(id)
end

--endregion

--region enter exit

---进入系统
---@public
function building_system:enter_system()
    self:init_building_parents()
    self:load_cur_deploy_building()
end

---退出系统
---@public
function building_system:exit_system()
    self:clear()
end

--endregion



return building_system