---
--- Generated by bbhuang
--- File name : guide_system.lua.txt
--- DateTime : 2023/02/13
--- Description : 引导系统
---
local data = data
local array_table = array_table
local log = log
local tables = tables
local window = window
local guide_trigger_type = enum.guide.guide_trigger_type
local df_enum = df.enum

local message = message
local message_type = enum.message_type
local network = network
local eGameEventCode = enum.proto.EGameEventCode
local eGameMsgID = enum.proto.EGameMsgID
local message_names = message_names
local t_is_nil_or_empty = table.is_table_nil_or_empty

local guide_trigger_group = require "game/systems/guide/guide_trigger_group"

---@class guide_system
local guide_system = class("guide_system")

---构造函数
---@protected
function guide_system:ctor()
    ---当前引导组
    ---@type guide_trigger_group
    self.cur_guide_group = nil

    ---强引导组
    ---@type guide_trigger_group
    self.enhance_guide_group = nil
    ---强引导组id
    ---@type string
    self.enhance_id = nil

    ---弱引导组
    ---@type table<guide_trigger_group>
    self.weak_guide_list = nil

    ---弱引导组重触发字典
    ---@type table<string, table>
    self.retrigger_guide = nil

    ---弱引导停止重复触发
    ---@type
    self.stop_retrigger_guide_dict = {}
    
    self:add_listener()

    window.open(tables.Window.ids.Guide)
end

--function guide_system:on_update()
--    if self.cur_guide_group then
--        self.cur_guide_group:on_update()
--    end
--end

function guide_system:add_listener()
    message.add_listener(message_type.GUIDE_TRY_TRIGGER, self.try_trigger_guide, self)
    message.add_listener(message_type.GUIDE_TRY_FINISH, self.try_finish_guide, self)

    --message.add_listener(df_enum.message_type.OPEN_WINDOW, self.check_retrigger_weak_guide, self)
    message.add_listener(df_enum.message_type.CLOSE_WINDOW, self.check_retrigger_weak_guide, self)
    message.add_listener(message_type.PLAYER_OPERATE_END, self.check_retrigger_weak_guide, self)

    message.add_listener(message_type.DRAW_CARD_RESPONSE_MESSAGE, self.on_draw_card_response_message, self) -- 抽卡的ack 返回成功
    message.add_listener(message_type.DRAW_CARD_RESULT_WINDOW_CLOSED, self.on_draw_card_result_window_closed, self) -- 抽卡表现关闭完毕
    message.add_listener(message_type.DRAW_CARD_RESULT_LIST_SHOW_FINISHED, self.on_draw_card_result_show_over, self) -- 抽卡表现完毕
    message.add_listener(message_type.QUINTUS_FUNCTION_TAP_MESSAGE, self.on_quintus_function_tap_message, self) -- 选中昆图斯内玩法

    message.add_listener(message_type.GUIDE_TIMER_ABORT, self.on_weak_guide_abort, self) ---弱引导中断
    message.add_listener(message_type.GUIDE_ADD_WEAK_STOP_RE_TRIGGER, self.on_add_weak_stop_re_trigger, self) 
    message.add_listener(message_type.GUIDE_REMOVE_WEAK_STOP_RE_TRIGGER, self.on_remove_weak_stop_re_trigger, self) 
    
    network.add_message_listener(eGameMsgID.ACK_START_GUIDE_GROUP, message_names.AckStartGuideGroup, self.ack_start_guide_group, self)
    network.add_message_listener(eGameMsgID.ACK_FINISH_GUIDE_GROUP, message_names.AckFinishGuideGroup, self.ack_finish_guide_group, self)
end

function guide_system:remove_listener()
    message.remove_listener(message_type.GUIDE_TRY_TRIGGER, self.try_trigger_guide, self)
    message.remove_listener(message_type.GUIDE_TRY_FINISH, self.try_finish_guide, self)

    --message.remove_listener(df_enum.message_type.OPEN_WINDOW, self.check_retrigger_weak_guide, self)
    message.remove_listener(df_enum.message_type.CLOSE_WINDOW, self.check_retrigger_weak_guide, self)
    message.remove_listener(message_type.PLAYER_OPERATE_END, self.check_retrigger_weak_guide, self)

    message.remove_listener(message_type.DRAW_CARD_RESPONSE_MESSAGE, self.on_draw_card_response_message, self)
    message.remove_listener(message_type.DRAW_CARD_RESULT_WINDOW_CLOSED, self.on_draw_card_result_window_closed, self)
    message.remove_listener(message_type.DRAW_CARD_RESULT_LIST_SHOW_FINISHED, self.on_draw_card_result_show_over, self)
    message.remove_listener(message_type.QUINTUS_FUNCTION_TAP_MESSAGE, self.on_quintus_function_tap_message, self)

    message.remove_listener(message_type.GUIDE_TIMER_ABORT, self.on_weak_guide_abort, self)
    message.remove_listener(message_type.GUIDE_ADD_WEAK_STOP_RE_TRIGGER, self.on_add_weak_stop_re_trigger, self)
    message.remove_listener(message_type.GUIDE_REMOVE_WEAK_STOP_RE_TRIGGER, self.on_remove_weak_stop_re_trigger, self)

    network.remove_message_listener(eGameMsgID.ACK_START_GUIDE_GROUP, self.ack_start_guide_group, self)
    network.remove_message_listener(eGameMsgID.ACK_FINISH_GUIDE_GROUP, self.ack_finish_guide_group, self)
end

---抽卡服务器响应消息
---@private
---@param ack AckDrawCard
function guide_system:on_draw_card_response_message(ack)
    if ack.event_code == enum.proto.EGameEventCode.SUCCESS then
        self:try_trigger_guide(guide_trigger_type.draw_card_success, ack)
    end
end

---关闭抽卡结果展示窗口
---@private
function guide_system:on_draw_card_result_window_closed()
    self:try_trigger_guide(guide_trigger_type.draw_card_show_close)
end

---抽卡展示完毕
---@private
function guide_system:on_draw_card_result_show_over()
    self:try_trigger_guide(guide_trigger_type.draw_card_show_over)
end

---点击昆图斯内功能消息
---@private
---@param function_data QuintusFunciton
function guide_system:on_quintus_function_tap_message(function_data)
    self:try_trigger_guide(guide_trigger_type.select_quintus_sub_func, function_data.Id)
end

--region network

function guide_system:send_start_group_id()
    local g_id = self.cur_guide_group.id
    local p_id = game_data_manager.player.player_uid
    ---@type ReqStartGuideGroup
    local req = {
        player_id = p_id,
        guide_group_id = g_id
    }
    log.info("guide_system send_start_group_id, guide_id: ", g_id)
    network.send_message_async(eGameMsgID.REQ_START_GUIDE_GROUP, message_names.ReqStartGuideGroup, req)
end

---开始某个引导
---@param ack AckStartGuideGroup
function guide_system:ack_start_guide_group(ack)
    if ack.event_code == eGameEventCode.SUCCESS then
        local g_id = ack.guide_group_id
        log.info("guide_system ack_start_guide_group, guide_id: ", g_id)
    else
        log.info("guide_system ack_start_guide_group error: ", ack.event_code)
    end
end

---完成引导组
---@public
function guide_system:send_finish_group_id()
    local g_id = self.cur_guide_group.id
    local p_id = game_data_manager.player.player_uid
    ---@type ReqFinishGuideGroup
    local req = {
        player_id = p_id,
        guide_group_id = g_id
    }
    log.info("guide_system ReqFinishGuideGroup, guide_id: ", g_id)
    network.send_message_async(eGameMsgID.REQ_FINISH_GUIDE_GROUP, message_names.ReqFinishGuideGroup, req)
end

---完成某个引导
---@public
---@param ack AckFinishGuideGroup
function guide_system:ack_finish_guide_group(ack)
    if ack.event_code == eGameEventCode.SUCCESS then

        --服务器数据完成 但客户端的表现还存在 因此不重置
        local cur_group = self.cur_guide_group
        if cur_group then
            ---@type guide_state
            local is_finish = cur_group:get_is_finish()
            if not is_finish then
                log.info("guide_system ack_finish_guide_group, not finish, guide_id: ", ack.guide_group_id)
                return
            end
        end

        --self:check_open_guide()
        if self.cur_guide_group ~= nil and (self.cur_guide_group.is_break or self.cur_guide_group.is_enhance) then
            self:generate_open_guide()
        end
        self:try_close_guide_group()
    end
end

--endregion

---初始化引导
---@public
function guide_system:init_data()
    --self:check_open_guide()
    self.retrigger_guide = {}
    self:generate_open_guide(true)
end

---生成引导数据
---@private
function guide_system:generate_open_guide(is_init)
    local e_list, w_list = game_data_manager.guide:get_lists_by_sort()
    if #e_list > 0 then
        local enhance_guide = e_list[1]
        if self.enhance_id == nil or self.enhance_id ~= enhance_guide.Id then
            self:generate_enhance_guide(enhance_guide, is_init)
        end
    else
        self:clear_enhance_guide()
    end
    self:generate_weak_guide(w_list)
end

function guide_system:generate_enhance_guide(guide, init)
    self:clear_enhance_guide()
    if init and not string.is_nil_or_empty(guide.ExceptionalHandlingGroupID) then
        self.enhance_guide_group = guide_trigger_group.new(guide.ExceptionalHandlingGroupID)
        self.enhance_id = guide.ExceptionalHandlingGroupID
    else
        self.enhance_guide_group = guide_trigger_group.new(guide.Id)
        self.enhance_id = guide.Id
    end
end

function guide_system:generate_weak_guide(list)
    self:clear_weak_guide()
    self.weak_guide_list = {}
    for i = 1, #list do
        array_table.insert(self.weak_guide_list, guide_trigger_group.new(list[i].Id))
    end
end

---检测是否存在开启的引导
---@private
--function guide_system:set_open_guide_data(is_gen_enhance, is_gen_weak, is_init)
--    local e_list, w_list = game_data_manager.guide:get_lists_by_sort()
--    if is_gen_enhance then
--        self:clear_enhance_guide()
--        if #e_list > 0 then
--            local cur_enhance = e_list[1]
--            if is_init and not string.is_nil_or_empty(cur_enhance.ExceptionalHandlingGroupID) then
--                self.enhance_guide_group = guide_trigger_group.new(cur_enhance.ExceptionalHandlingGroupID)
--            else
--                self.enhance_guide_group = guide_trigger_group.new(cur_enhance.Id)
--            end
--        end
--    end
--
--    if is_gen_weak then
--        self:clear_weak_guide()
--        self.weak_guide_list = {}
--        for i = 1, #w_list do
--            array_table.insert(self.weak_guide_list, guide_trigger_group.new(w_list[i].Id))
--        end
--    end
--end

---清理强引组
---@private
function guide_system:clear_enhance_guide()
    if self.enhance_guide_group ~= nil then
        self.enhance_guide_group:dispose()
        self.enhance_guide_group = nil
    end
    self.enhance_id = nil
end

---清理弱引组
---@private
function guide_system:clear_weak_guide()
    if self.weak_guide_list ~= nil then
        for i = 1, #self.weak_guide_list do
            self.weak_guide_list[i]:dispose()
        end
        self.weak_guide_list = nil
    end
end

-----检测是否存在开启的引导
-----@private
--function guide_system:check_open_guide()
--    local cur_group_id = self.cur_guide_group and self.cur_guide_group.id
--    local g_id = game_data_manager.guide:get_id_by_sort()
--    if cur_group_id and g_id == cur_group_id then
--        return
--    end
--
--    if self.cur_guide_group then
--        self.cur_guide_group:dispose()
--    end
--
--    if not g_id then
--        return
--    end
--
--    self.cur_guide_group = guide_trigger_group.new(g_id)
--    self:send_start_group_id()
--end

---尝试完成节点
---@private
function guide_system:try_finish_guide(...)
    if self.cur_guide_group then
        self.cur_guide_group:try_finish_node(...)
    end
end

---尝试触发trigger
---@public
function guide_system:try_trigger_guide(...)
    if self.cur_guide_group ~= nil then
        if self.cur_guide_group.is_weak then
            if self:try_trigger_group_guide(self.enhance_guide_group, ...) then
                --强引打断弱引
                self:try_close_guide_group()
                self:try_open_new_guide_group(self.enhance_guide_group, true)
                self.enhance_guide_group = nil
                ---@type GuideGroup
                local temp_guide_data = data.get(tables.GuideGroup.name, self.enhance_id)
                self:generate_enhance_guide(temp_guide_data, true)
            else
                --正常下一步
                self:try_trigger_group_guide(self.cur_guide_group, ...)
            end
        else
            --正常下一步
            if not self:try_trigger_group_guide(self.cur_guide_group, ...) then
                --如果是强引且不能触发，尝试触发强引第一步
                if self.enhance_guide_group.is_restart and self:try_trigger_group_guide(self.enhance_guide_group, ...) then
                    --如果强引第一步触发了，则重走这个强引
                    self:try_close_guide_group()
                    self:try_open_new_guide_group(self.enhance_guide_group, true)
                    self.enhance_guide_group = nil
                    ---@type GuideGroup
                    local temp_guide_data = data.get(tables.GuideGroup.name, self.enhance_id)
                    self:generate_enhance_guide(temp_guide_data, true)
                end
            end
        end
    else
        if self:try_trigger_group_guide(self.enhance_guide_group, ...) then
            --开启强引
            self:try_open_new_guide_group(self.enhance_guide_group, true)
            self.enhance_guide_group = nil
            ---@type GuideGroup
            local temp_guide_data = data.get(tables.GuideGroup.name, self.enhance_id)
            self:generate_enhance_guide(temp_guide_data, true)
            return
        end
        for i = 1, #self.weak_guide_list do
            if self:try_trigger_group_guide(self.weak_guide_list[i], ...) then
                --开启弱引
                local weak_guide = self.weak_guide_list[i]
                array_table.remove_at(self.weak_guide_list, i)
                self:try_open_new_guide_group(weak_guide)
                self:save_retrigger_guide_info(self.cur_guide_group.id)
                -------------为了保险起见要重新生成一遍弱引导-------------
                local e_list, w_list = game_data_manager.guide:get_lists_by_sort()
                self:generate_weak_guide(w_list)
                return
            end
        end
    end
end

---尝试触发trigger
---@param group guide_trigger_group 引导组
function guide_system:try_trigger_group_guide(group, ...)
    if group ~= nil then
        return group:try_trigger_node(...)
    end
    return false
end

---尝试开始新的引导组
---@public
---@param group guide_trigger_group 引导组
function guide_system:try_open_new_guide_group(group)
    self.cur_guide_group = group
    self:send_start_group_id()
end

---尝试关闭已完成/打断的引导组
---@public
function guide_system:try_close_guide_group()
    if self.cur_guide_group then
        local cur_id = self.cur_guide_group.id
        self.cur_guide_group:dispose()
        self.cur_guide_group = nil
        message.broadcast(message_type.GUIDE_TRY_TRIGGER, guide_trigger_type.guide_finish, cur_id)
    end
end

-----尝试开始新的引导组
-----@public
--function guide_system:try_open_new_guide_group(is_force)
--    local g_data = game_data_manager.guide
--    if not is_force then
--        local cur_group_id = self.cur_guide_group and self.cur_guide_group.id
--        local is_finish = self.cur_guide_group and self.cur_guide_group:get_is_finish()
--
--        if cur_group_id then
--            if not is_finish then
--                return
--            end
--
--            if g_data:is_finish_id(cur_group_id) then
--                return
--            end
--        end
--    end
--
--    local g_id = g_data:get_id_by_sort()
--    if self.cur_guide_group then
--        self.cur_guide_group:dispose()
--        self.cur_guide_group = nil
--    end
--
--    if not g_id then
--        return
--    end
--    log.info("guide_system try_open_new_guide_group, guide_id: ", g_id)
--    self.cur_guide_group = guide_trigger_group.new(g_id)
--    self:send_start_group_id()
--end

--region GM
---假数据
---@public
function guide_system:init_gm_data(str)
    self.cur_guide_group = guide_trigger_group.new(str)
end
--endregion

---是否处在引导之中
---@public
---@param state_id string 引导id
---@param group_id string 引导组id
---@return boolean
function guide_system:is_in_guide_state(state_id, group_id)
    local guide_group = self.cur_guide_group or self.enhance_guide_group
    
    if not guide_group then
        return
    end

    if group_id then
        if guide_group.id ~= group_id then
            return
        end

        if state_id then
            local state = guide_group.fsm:get_cur_state()
            if state and state.id == state_id then
                return true
            end
        else
            return true
        end
    else
        if state_id then
            local state = guide_group.fsm:get_cur_state()
            if state and state.id == state_id then
                return true
            end
        else
            local state = guide_group.fsm:get_cur_state()
            return state and state:is_trigger_state() and not state:is_finish_state()
        end
    end
end

---弱引导中断
---@private
function guide_system:on_weak_guide_abort()
    log.info("弱引导中断")
    if self.cur_guide_group and self.cur_guide_group.is_weak then
        self.cur_guide_group:dispose()
        self.cur_guide_group = nil
        message.broadcast(message_type.GUIDE_INTER_CLEAR_DATA)
    end
    --self:check_retrigger_weak_guide()
end

---新增弱引停止重复
---@private
function guide_system:on_add_weak_stop_re_trigger(id)
    self.stop_retrigger_guide_dict[id] = true
end

---移除弱引停止重复
---@private
function guide_system:on_remove_weak_stop_re_trigger(id)
    self.stop_retrigger_guide_dict[id] = nil
    if self.cur_guide_group == nil then
        self:check_retrigger_weak_guide()
    end
end

--------------------cc-------------------------
function guide_system:check_retrigger_weak_guide()
    local is_retrigger = self:try_retrigger_guide_info()
    if is_retrigger then
        -------------为了保险起见要重新生成一遍弱引导-------------
        local e_list, w_list = game_data_manager.guide:get_lists_by_sort()
        self:generate_weak_guide(w_list)
    end
end

function guide_system:storage_cur_ui_mark()
    local list = window.windows
    local result = {}
    for i = 1, #list do
        local w = list[i]
        if w.status ~= nil and w.status > df_enum.window_status.none and w.status < df_enum.window_status.hide then
            array_table.insert(result, w.id)
        end
    end
    return result
end

function guide_system:match_cur_ui_mark(source_list)
    local list = {}
    for i = 1, #source_list do
        array_table.insert(list, source_list[i])
    end
    local window_list = window.windows
    for i = 1, #window_list do
        local w = window_list[i]
        if w.status ~= nil and w.status > df_enum.window_status.none and w.status < df_enum.window_status.hide then
            if not array_table.remove(list, w.id) then
                return false
            end
        end
    end
    return #list == 0
end

function guide_system:storage_top_ui_mark()
    local window_list = window.windows
    for i = #window_list, 1, -1 do
        local w = window_list[i]
        if w.state > df_enum.window_status.none and w.status < df_enum.window_status.hide then
            return w.id
        end
    end
end

function guide_system:match_top_ui_mark(top_id)
    local window_list = window.windows
    for i = #window_list, 1, -1 do
        local w = window_list[i]
        if w.state > df_enum.window_status.none and w.status < df_enum.window_status.hide then
            return w.id == top_id
        end
    end
end

function guide_system:save_retrigger_guide_info(guide_id)
    --如果没有重触发，则什么也不做
    if self.retrigger_guide == nil then
        return
    end
    ---@type GuideGroup
    local group_data = data.get(tables.GuideGroup.name, guide_id)
    if group_data.RetriggerType == 1 then
        self.retrigger_guide[guide_id] = self:storage_cur_ui_mark()
    elseif group_data.RetriggerType == 2 and self.retrigger_guide[guide_id] == nil then
        self.retrigger_guide[guide_id] = self:storage_top_ui_mark()
    end
end


---@private
---@param g_data GuideGroup
function guide_system:match_stop_tr_trigger(g_data)
    if t_is_nil_or_empty(g_data.WeakStopTrigger) then
        return
    end

    for i, v in ipairs(g_data.WeakStopTrigger) do
        if self.stop_retrigger_guide_dict[v] then
            return true
        end
    end
end

function guide_system:try_retrigger_guide_info()
    --如果没有重触发，则什么也不做
    if self.retrigger_guide == nil then
        return false
    end
    --如果当前有正在进行的引导组，则什么也不做
    if self.cur_guide_group ~= nil then
        if self.cur_guide_group.is_weak then
            local g_id = self.cur_guide_group.id
            local retrigger_guide = self.retrigger_guide[g_id]
            ---@type GuideGroup
            local group_data = data.get(tables.GuideGroup.name, g_id)
            if group_data.RetriggerType == 1 then
                if not self:match_cur_ui_mark(retrigger_guide) then
                    self:on_weak_guide_abort()
                end
            elseif group_data.RetriggerType == 2 then
                if not self:match_top_ui_mark(retrigger_guide) then
                    self:on_weak_guide_abort()
                end
            end
        end
        return false
    end
    --检测所有重触发的引导
    for i = 1, #self.weak_guide_list do
        ---@type guide_trigger_group
        local weak_guide = self.weak_guide_list[i]
        local guide_id = weak_guide.id
        local retrigger_guide = self.retrigger_guide[guide_id]
        if retrigger_guide ~= nil then
            ---@type GuideGroup
            local group_data = data.get(tables.GuideGroup.name, guide_id)
            if not self:match_stop_tr_trigger(group_data) then
                --第一种重触发方式：
                if group_data.RetriggerType == 1 and self:match_cur_ui_mark(retrigger_guide) then
                    weak_guide:force_trigger_node()
                    self:try_open_new_guide_group(weak_guide)
                    self:save_retrigger_guide_info(self.cur_guide_group.id)
                    array_table.remove_at(self.weak_guide_list, i)
                    return true
                --第二种重触发方式：
                elseif group_data.RetriggerType == 2 and self:match_top_ui_mark(retrigger_guide) then
                    weak_guide:force_trigger_node()
                    self:try_open_new_guide_group(weak_guide)
                    array_table.remove_at(self.weak_guide_list, i)
                    return true
                end
            end
        end
    end
    return false
end
-----------------------------------------------

function guide_system:dispose()
    if self.cur_guide_group then
        self.cur_guide_group:dispose()
    end
    self.cur_guide_group = nil
    self:clear_enhance_guide()
    self:clear_weak_guide()
    self.retrigger_guide = nil
    self:remove_listener()
end

return guide_system