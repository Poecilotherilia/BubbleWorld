---
--- Generated by bbhuang
--- File name : guide_trigger_group.lua.txt
--- DateTime : 2023/02/14
--- Description : 触发的引导组
---
local timer_manager = timer_manager
local data = data
local tables = tables

local guide_table = tables.Guide
local guide_group_table = tables.GuideGroup
local guide_trigger_table = tables.GuideCondition
local string_is_nil_empty = string.is_nil_or_empty
local message = message
local message_type = enum.message_type

local guide_state = require 'game/systems/fsm/guide_state'
local fsm = require 'game/systems/fsm/finite_state_machine'

---@class guide_trigger_group
local guide_trigger_group = class("guide_trigger_group")

---构造函数
---@protected
---@param id string
---@param system guide_system
function guide_trigger_group:ctor(id, system)
    ---@type string
    self.id = id

    ---@type boolean 是否是强引
    self.is_enhance = nil
    
    ---@type boolean 是否是弱引
    self.is_weak = nil

    ---@type boolean 是否是中断组
    self.is_break = nil

    ---@type boolean 是否中断后重新开始
    self.is_restart = nil
    
    ---服务器检测节点已完成
    ---@type boolean
    self.is_finish_node_over = nil
    
    self:generate_fsm()
end

---生成状态机
---@private
function guide_trigger_group:generate_fsm()
    local id = self.id
    if not data.is_name(id, guide_group_table.name) then
        log.error("error guide group id ", id)
        return 
    end
    
    self.fsm = fsm.new()
    
    ---@type GuideGroup
    local group_data = data.get(guide_group_table.name, id)
    self.is_enhance = (group_data.GuideType == 1)
    self.is_weak = (group_data.GuideType == 2)
    self.is_break = (group_data.GuideType == 99)
    self.is_restart = (group_data.RenewedSwitch == 1)
    
    local start_guide_id = group_data.StartGuide
    local end_guide_id = group_data.FinishGuide
    
    local cur_guide_id = start_guide_id
    local end_condition
    while(true) do
        ---@type Guide
        local g_data = data.get(guide_table.name, cur_guide_id)
        ---@type guide_state
        local g_state = guide_state.new(cur_guide_id)
        g_state:set_fsm(self.fsm)

        ---下一节点的开始 是上一节点的完成 
        local start_id = string_is_nil_empty(g_data.StartCondition) and end_condition or g_data.StartCondition
        local next_guide_id = g_data.NextGuideID
        g_state:init(start_id, g_data.FinishCondition, next_guide_id, end_guide_id == cur_guide_id)
        end_condition = g_data.FinishCondition
        
        self.fsm:add_state(g_state)
        
        if string_is_nil_empty(next_guide_id) then
            break
        end
        cur_guide_id = next_guide_id
    end
end

function guide_trigger_group:on_update()
    if not self.fsm then return end
    self.fsm:on_update()
end

---尝试完成引导组
---@public
---@param g_id string guide id
function guide_trigger_group:try_finish_group(g_id)
    system_manager.guide:send_finish_group_id()
    self.is_finish_node_over = true
end

---尝试完成节点
---@public
function guide_trigger_group:try_finish_node(type, ...)
    ---@type guide_state
    local cur_state = self.fsm:get_cur_state()
    if not cur_state then return end
    local is_trigger = cur_state:is_trigger_state()
    if not is_trigger then
        return
    end
    
    local f_id = cur_state:get_finish_id()
    local f_type = data.get(guide_trigger_table.name, f_id, guide_trigger_table.properties.FuncType)
    
    if string_is_nil_empty(f_type) or f_type == type then
        local is_finish = cur_state:check_is_finish(...)
        local is_final = cur_state:is_final_state()
        if is_finish then
            local next_state_id = cur_state:get_next_state()
            local is_has_next_state = not string_is_nil_empty(next_state_id)
            if is_has_next_state then
                self.fsm:change_state(next_state_id, f_id, ...)
            else
                cur_state:exit()
                self.fsm.cur_state = nil
            end

            if is_final then
                self:try_finish_group(cur_state:getId())
            else
                --服务器验证节点已完毕，客户端表现完毕
                if not is_has_next_state and self.is_finish_node_over then
                    if self.is_break or self.is_enhance then
                        system_manager.guide:generate_open_guide()
                    end
                    system_manager.guide:try_close_guide_group()
                    --system_manager.guide:try_open_new_guide_group(true)
                end
            end
        end
    end
end

---尝试完成节点
---@public
function guide_trigger_group:try_trigger_node(type, ...)
    ---@type guide_state
    local cur_state = self.fsm:get_cur_state()
    if not cur_state then return end
    local is_trigger = cur_state:is_trigger_state()
    if not is_trigger then
        local f_id = cur_state:get_trigger_id()
        local f_type = data.get(guide_trigger_table.name, f_id, guide_trigger_table.properties.FuncType)

        if string_is_nil_empty(f_type) or f_type == type then
            cur_state:check_trigger(...)
        end

        if cur_state.is_trigger then
            if tables.GuideGroup.properties.StopFindPath and data.get(tables.GuideGroup.name, self.id, tables.GuideGroup.properties.StopFindPath) == 1 then
                message.broadcast(message_type.STOP_PATH_FINDING_MESSAGE)
            end
        end
        
        return cur_state.is_trigger
    end

    self:try_finish_node(type, ...)
    return false
end

---用于重新触发引导，强制将第一节点变成可触发状态
---@public
function guide_trigger_group:force_trigger_node()
    ---@type guide_state
    local cur_state = self.fsm:get_cur_state()
    if cur_state == nil then return end
    cur_state:set_trigger_state(true)

    if tables.GuideGroup.properties.StopFindPath and data.get(tables.GuideGroup.name, self.id, tables.GuideGroup.properties.StopFindPath) == 1 then
        message.broadcast(message_type.STOP_PATH_FINDING_MESSAGE)
    end
end

---@public
function guide_trigger_group:dispose()
    if self.fsm then
        self.fsm:dispose()
    end
    self.id = nil
    self.is_enhance = nil
    self.is_weak = nil
    self.is_break = nil
    self.is_restart = nil
    self.is_finish_node_over = nil
end

---获取组id
---@public
function guide_trigger_group:get_group_id()
   return self.id 
end

---设置引导组 完成标记
---@public
function guide_trigger_group:finish_guide_group(id)
    self.is_finish_node_over = id == self.id
end

---获取当前节点是否是最后一个
---@public
function guide_trigger_group:get_is_final()
    if not self.fsm then return true end
    
    ---@type guide_state
    local cur_state = self.fsm:get_cur_state()
    if not cur_state then return true end

    local next_state_id = cur_state:get_next_state()
    return string_is_nil_empty(next_state_id)
end

function guide_trigger_group:get_is_finish()
    if not self.fsm then return true end

    ---@type guide_state
    local cur_state = self.fsm:get_cur_state()
    if not cur_state then return true end
    
    return cur_state:is_finish_state()
end

return guide_trigger_group