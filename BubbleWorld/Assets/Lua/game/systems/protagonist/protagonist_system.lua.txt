---
--- Generated by panzhiyuan
--- File name : protagonist_system.lua.txt
--- DateTime : 2023/02/27
--- Description : 主角系统
---

local LuaUtil = cs.LuaUtil
local TweenUtil = cs.TweenUtil
local Ease = cs.Ease
local camera_manager = camera_manager
local message = message
local data = data
local protagonist_controller = require"game/windows/protagonist/protagonist_controller" 
local tables = tables 
local enum = enum
local message_type = enum.message_type
local camera_position_type = enum.protagonist.camera_position_type
local hero_manager = require 'game/hero/hero_manager'
---@class protagonist_system
local protagonist_system = class("protagonist_system")

---构造函数
---@private
function protagonist_system:ctor()
   self:add_listener()
end

function protagonist_system:preload_role_res_sync()
    local role_res = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_HERO_RES_ID).String
    self.protagonist_controller = protagonist_controller.new()
    return self.protagonist_controller:preload_sync(role_res, nil)
end

function protagonist_system:preload_book_res_sync()
    self.book_model = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_PNEUMA_BOOK_MODEL).String
    --self.book_controller = protagonist_controller.new()
    return self.protagonist_controller:preload_book_sync_by_way(self.book_model, nil)
end

---控制播放待机动作
---@public
function protagonist_system:play_idle_action()
    if self.protagonist_controller then
        local callback = function()
            self:play_idle_action()
        end
        self.protagonist_controller:play_idle_action(callback)
    end
end

---控制播放休闲动作
---@public
function protagonist_system:play_fallow_action(callback)
    if self.protagonist_controller then
        self.protagonist_controller:play_fallow_action(callback)
    end
end

---清理角色控制器
---@public
function protagonist_system:unload_college_controller()
    if self.protagonist_controller then
        self.protagonist_controller:dispose()
        self.protagonist_controller = nil
    end
end

---设置主角相机显隐（切换子场景时切换相机）
---@public
---@param active boolean
function protagonist_system:set_protagonist_hero_camera_active(active)
    if hero_manager.get_hero() == nil then
        return
    end
    if self.cam_obj == nil or LuaUtil.IsNull(self.cam_obj) then
        local cam = hero_manager.get_camera()
        if cam then
            self.cam_obj = cam.gameObject
            self.cam_obj:SetActive(active)
        end
    end
    self.cam_obj:SetActive(active)
end

function protagonist_system:add_listener()
    ---移动主角场景镜头
    message.add_listener(message_type.PROTAGONIST_CHANGE_CAMERA_POSITION, self.on_change_camera_position, self)
end

function protagonist_system:remove_listener()
    message.remove_listener(message_type.PROTAGONIST_CHANGE_CAMERA_POSITION, self.on_change_camera_position, self)
end

---改变主角场景镜头位置
---@private
---@param param camera_position_type 点位枚举
function protagonist_system:on_change_camera_position(param)
    if param then
        self.target_position, self.target_func = self:get_camera_position(param.position_type)
        self:set_protagonist_camera_position(self.target_func, self.target_position)
    end
end

---获取到达相机位置，到达位置后的回调方法
---@private
---@param position_type camera_position_type 相机位置枚举
function protagonist_system:get_camera_position(position_type)
    local target_position, target_func 
    if position_type == camera_position_type.COLLECT then
        self.point_id = data.get(tables.Protagonist.name, tables.Protagonist.ids.Protagonist_3).Point
        target_position = data.get(tables.Point.name, self.point_id)
        target_func = function()
            log.info("打开收集界面")
            message.broadcast(message_type.PROTAGONIST_SHOW_MAIN_VIEW)
        end
    elseif position_type == camera_position_type.INFORMATION then
        self.point_id = data.get(tables.Protagonist.name, tables.Protagonist.ids.Protagonist_2).Point
        target_position = data.get(tables.Point.name, self.point_id)
        target_func = function()
            log.info("打开信息界面")
            message.broadcast(message_type.PROTAGONIST_SHOW_MAIN_VIEW)
        end
    elseif position_type == camera_position_type.PHOTO_ALBUM then
        self.point_id = data.get(tables.Protagonist.name, tables.Protagonist.ids.Protagonist_4).Point
        target_position = data.get(tables.Point.name, self.point_id)
        target_func = function()
            log.info("打开相册界面")
            message.broadcast(message_type.PROTAGONIST_SHOW_MAIN_VIEW)
        end
    elseif position_type == camera_position_type.CHAOTIC_BOOK then
        self.point_id = data.get(tables.Protagonist.name, tables.Protagonist.ids.Protagonist_5).Point
        target_position = data.get(tables.Point.name, self.point_id)
        target_func = function()
            message.broadcast(message_type.PROTAGONIST_OPEN_CHAOTIC_BOOK_WINDOW)
        end
    elseif position_type == camera_position_type.DEFAULT then
        self.point_id = data.get(tables.Protagonist.name, tables.Protagonist.ids.Protagonist_1).Point
        target_position = data.get(tables.Point.name, self.point_id)
        target_func = function()
            log.info("打开主界面")
            message.broadcast(message_type.PROTAGONIST_SHOW_MAIN_VIEW)
        end
    end
    return target_position, target_func
end

--- 设置主角场景摄像机位置
---@public
---@param target_func function 到达指定位置后回调方法
---@param target_position number 到达的位置（x,y,z）/ 旋转（x,y,z）旋转镜头（目前不需要）
function protagonist_system:set_protagonist_camera_position(target_func,target_position)
    local position_x = target_position.PositionX / 10000
    local position_y = target_position.PositionY / 10000
    local position_z = target_position.PositionZ / 10000
    --local rotation_x = target_position.RotationX / 10000
    --local rotation_y = target_position.RotationY / 10000
    --local rotation_z = target_position.RotationZ / 10000
    self.cur_active_camera = camera_manager.active_virtual_camera()
    --TweenUtil.DOLocalRotate(self.cur_active_camera.gameObject, rotation_x, rotation_y, rotation_z, 1.5,0,Ease.Linear)
    TweenUtil.DOLocalMove(self.cur_active_camera.gameObject, position_x, position_y, position_z, 2,0,Ease.Linear, function()
        if target_func then
            target_func()
        end
    end)
end

function protagonist_system:on_change_camera_position_data(param)
    if param then
        self.target_position = self:get_camera_position(param.position_type)
        self:set_protagonist_camera_data(self.target_position)
    end
end

function protagonist_system:set_protagonist_camera_data(target_position)
    local position_x = target_position.PositionX / 10000
    local position_y = target_position.PositionY / 10000
    local position_z = target_position.PositionZ / 10000
    self.cur_active_camera = camera_manager.active_virtual_camera()
    self.cur_active_camera.gameObject:SetLocalPosition(position_x, position_y, position_z)
end

function protagonist_system:dispose()
    self:remove_listener()
    if self.protagonist_controller then
        self.protagonist_controller:dispose()
        self.protagonist_controller = nil
    end
end

return protagonist_system