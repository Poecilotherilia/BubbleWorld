---
--- Generated by wuhaijun
--- File name : system_battle_step_before.lua.txt
--- DateTime : 2021/09/17
--- Description : 
---

---@type battle_helper
local helper = battle_helper
local enum = enum
local enum_battle = enum.battle
local battle_step_type = enum_battle.battle_step_type
local team_type_flag = enum_battle.team_type_flag
local camera_blend_type = enum.common.camera_blend_type
local table_names = tables
local data_mgr = data
local camera_mgr = camera_manager
local string_is_nil_or_empty = string.is_nil_or_empty
local asset_type = df.enum.asset_type

local wwise_util = require 'game/utils/wwise_util/wwise_util'
---@type state_utility
local state_utility = require(helper.path.battle_fsm .. 'state_utility')
---@type battle_constant
local battle_constant = require(helper.path.battle_utils .. 'battle_constant')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class system_battle_step_before : reactive_system
local system_battle_step_before = class("system_battle_step_before", super)

---构造函数
---@protected
---@param context context
function system_battle_step_before:ctor(context)
    super.ctor(self, context)

    ---显示单位出生动画
    ---@private
    ---@type fun(uid:Ident)
    self.show_unit_born_animation_callback = function(uid) self:on_show_unit_born_animation(uid) end
    
    ---设置默认机位
    ---@private
    ---@type fun()
    self.set_default_camera_viewing_angle_callback = function() self:on_set_default_camera_viewing_angle() end

    ---开始Boss来袭处理界面
    ---@private
    ---@type fun()
    self.start_show_boss_coming_callback = nil

    ---结束展示Boss来袭界面
    ---@private
    ---@type fun(...)
    self.end_show_boss_coming_callback = function(...) self:end_show_boss_coming_handle(...) end

    ---动画事件回调
    ---@private
    ---@type fun(string)
    self.animation_event_callback = function(string) self:animation_event_handle(string) end

    ---隐藏场景相机处理
    ---@private
    ---@type fun()
    self.hide_scene_camera_callback = function() camera_mgr.scene_camera:SetActive(false) end
    
    ---开始显示BossTimerId
    ---@private
    ---@type number
    self.start_timer_id = nil

    ---结束显示BossTimerId
    ---@private
    ---@type number
    self.end_timer_id = nil

    ---是否处于Boss来袭中
    ---@private
    ---@type boolean
    self.is_boss_coming = nil

    ---预加载资源列表
    ---@private
    ---@type table<string, boolean>
    self.pre_load_res_dict = {}
end

---获取触发配置
---@protected
---@param context context
---@return collector
function system_battle_step_before:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.battle_step))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function system_battle_step_before:filter(entity)
    ---@type { value:battle_step_type }
    local comp = entity:get_component(battle_components.battle_step)
    return comp ~= nil and comp.value == battle_step_type.BEFORE
end

---组件变化时执行
---@protected
---@param _ entity[]
---@param count number
function system_battle_step_before:executes(_, count)
    if count == 0 then return end

    self:preload_before_assets()
    self:on_battle_before_handle()
end

---预加载战前资源
---@private
function system_battle_step_before:preload_before_assets()
    local context = self.context
    local database = context.database
    local renderer = context.renderer
    local setting_const = database:get_setting_const()

    -- 检测需要加载资源
    local own_appear_path = setting_const.KW_OWN_APPEAR_CLIP_PATH
    if not self.pre_load_res_dict[own_appear_path] then
        self.pre_load_res_dict[own_appear_path] = true
        -- 加载入场相机动画
        renderer:preload_asset(own_appear_path, asset_type.animation_clip)
        renderer:preload_asset(setting_const.KW_ENEMY_APPEAR_CLIP_PATH, asset_type.animation_clip)
    end
    -- 检测是否有boss
    local unit_info_list = database:get_unit_info_list()
    for i = 1, #unit_info_list do
        local unit_info = unit_info_list[i]
        if battle_utility.check_boss_unit_info(unit_info) then
            -- 加载Boss入场相机
            renderer:load_boss_appear_camera_node()
            break
        end
    end

    -- 预加载技能
    ---@type string[]
    local tmp_skill_list = context:get_free_table("system_battle_step_before.tmp_skill_list")
    for i = 1, #unit_info_list do
        local target_uid = unit_info_list[i].uid
        ---@type string[]
        local skill_list, unit_entity = battle_utility.get_preload_skill_list(context, target_uid)
        -- 获取所有技能
        helper.clear_array(tmp_skill_list)
        context.database:get_unit_skill_list(target_uid, tmp_skill_list)
        local change_num = 0
        for j = 1, #tmp_skill_list do
            if battle_utility.set_preload_skill_list(tmp_skill_list[j], skill_list) then
                change_num = change_num + 1
            end
        end

        -- 技能id改变
        if change_num > 0 then
            unit_entity:replace_component(battle_components.preload_skill, skill_list, nil, nil, false)
        end
    end
    context:recycle_free_table(tmp_skill_list)
end

---战前阶段
---@private
function system_battle_step_before:on_battle_before_handle()
    helper.log('battle before handle!')

    -- 获取时间常量
    local own_time = self.context.database:get_setting_const().KW_OWN_TEAM_APPEAR_CAMERA_ACTION_TIME
    local enemy_time = self.context.database:get_setting_const().KW_ENEMY_TEAM_APPEAR_CAMERA_ACTION_TIME

    -- 切换战斗背景音乐
    local battle_mid = system_manager.battle:get_data():get_battle_mid()
    local switch_id = data_mgr.get(table_names.BTLBattle.name, battle_mid, table_names.BTLBattle.properties.BGMSwitch)
    if string_is_nil_or_empty(switch_id) then
        switch_id = wwise_const.SwitchIds.Switch_Monster
    end
    wwise_util.set_switch_by_id(switch_id)
    
    -- 设置入场播放动画速度
    self.context.controller:set_time_scale(1)

    -- 1. 我方入场展示 
    self:on_show_own_appear_animation(own_time, function()
        -- 2. 敌方入场展示
        self:on_show_enemy_appear_animation(enemy_time, function(exit_time)
            -- 3. 设置相机默认观察视角
            self.context.controller:add_timer(exit_time or 0, self.set_default_camera_viewing_angle_callback)

            -- 4. 设置速度
            self.context.controller:set_time_scale(self.context.database:get_speed_up_num())

            -- 5. 通知UI层, 显示战力PK和动画
            helper.log("show vs ui animation, waiting for the battle to start")
            local pk_info = self.context.database:get_battle_pk_info()
            self.context.controller.message:send_battle_power_pk_msg(pk_info)
        end)
    end)
end

---显示我方入场动画
---@private
---@param duration number 持续时间（毫秒）
---@param finish_callback fun(time:number) 结束回调
function system_battle_step_before:on_show_own_appear_animation(duration, finish_callback)
    -- 首次进入战斗显示我方入场动画
    if self.context.database:check_is_first_battle() then
        -- 播放入场动画
        self:on_show_default_appear_camera_animation(duration, team_type_flag.OWN, finish_callback)
        -- 进入战场消息
        self.context.message:send_battle_enter_battlefield()
    else
        finish_callback()
    end
end

---显示敌方入场动画
---@private
---@param duration number 持续时间（毫秒）
---@param finish_callback fun(time:number) 结束回调
function system_battle_step_before:on_show_enemy_appear_animation(duration, finish_callback)
    helper.log('show enemy team appear camera animation')

    ---@type battle_unit_info
    local boss_unit_info

    -- 敌方单位数据列表
    ---@type battle_unit_info[]
    local entity_list = self.context:get_free_table('system_battle_step_before.buff_list')
    self.context.database:get_enemy_unit_info_list(entity_list)
    for i = 1, #entity_list do
        local unit_info = entity_list[i]
        -- 检测是否有boss
        if battle_utility.check_boss_unit_info(unit_info) then
            boss_unit_info = unit_info
            break
        end
    end

    if boss_unit_info == nil then
        -- 普通入场相机动画
        self:on_show_default_appear_camera_animation(duration, team_type_flag.ENEMY, finish_callback)
    else
        -- Boss入场动画
        self:on_show_boss_appear_camera_animation(entity_list, boss_unit_info, finish_callback)
    end

    -- 回收
    self.context:recycle_free_table(entity_list)
end

---显示默认的出场相机动画
---@private
---@param duration number 持续时间
---@param team_type team_type_flag
---@param finish_callback fun(time:number) 完毕回调
function system_battle_step_before:on_show_default_appear_camera_animation(duration, team_type, finish_callback)
    helper.log('show default appear camera animation, team_type = ', helper.get_enum_name(team_type_flag, team_type))

    -- 敌方单位数据列表
    ---@type battle_unit_info[]
    local entity_list = self.context:get_free_table('system_battle_step_before.entity_list')
    ---@type string
    local clip_path
    if team_type == team_type_flag.OWN then
        clip_path = self.context.database:get_setting_const().KW_OWN_APPEAR_CLIP_PATH
        self.context.database:get_own_unit_info_list(entity_list)
    elseif team_type == team_type_flag.ENEMY then
        clip_path = self.context.database:get_setting_const().KW_ENEMY_APPEAR_CLIP_PATH
        self.context.database:get_enemy_unit_info_list(entity_list)
    else
        helper.error('wrong team type = ', team_type)
    end

    -- 播放出生动画
    for i = 1, #entity_list do
        local unit_info = entity_list[i]
        if not unit_info.is_death then
            local entity = self.context:get_entity_by_primary_index(battle_components.uid, unit_info.uid)
            if entity ~= nil then
                state_utility.try_switch_state(entity, table_names.BTLState.ids.BTLState_Born)

                self.context.controller:add_timer(0.2, self.show_unit_born_animation_callback, unit_info.uid)
            else
                helper.error('not found entity by uid = ', helper.to_string(unit_info.uid))
            end
        end
    end

    -- 回收
    self.context:recycle_free_table(entity_list)

    -- 获取相机
    local renderer = self.context.renderer
    local camera_behavior, camera_id = renderer:get_team_appear_used_camera(team_type)
    local res_loader, res_pool = renderer:get_res_loader_and_pool()
    local time_scale = self.context.controller:get_time_scale()

    ---@type MapCameraInfo 敌方出现相机信息
    local camera_info = self.context.database:get_battle_appear_camera_point(team_type)
    battle_utility.set_virtual_camera_info(camera_behavior.virtualCamera, camera_info)
    
    -- 播放相机动画
    camera_behavior:PlayAnimation(clip_path, time_scale, nil, res_loader, res_pool, 0)
    -- 显示虚拟相机
    camera_mgr.show_virtual_camera(camera_id, camera_blend_type.Cut, 0)

    -- 延迟回调
    self.context.controller:add_timer(duration, finish_callback, 0)
end

---显示单位出生动画
---@private
---@param uid Ident
function system_battle_step_before:on_show_unit_born_animation(uid)
    local entity = self.context:get_entity_by_primary_index(battle_components.uid, uid)
    if entity ~= nil then
        entity:replace_component(battle_components.unit_active, true)
    else
        helper.error('not found entity by uid = ', helper.to_string(uid))
    end
end

---显示Boss的出场相机动画
---@private
---@param entity_list battle_unit_info[] 单位信息列表
---@param boss_unit_info battle_unit_info Boss单位数据
---@param finish_callback fun(time:number) 播放完毕回调
function system_battle_step_before:on_show_boss_appear_camera_animation(entity_list, boss_unit_info, finish_callback)
    self.is_boss_coming = true
    local context = self.context
    
    -- 展示Boss出场动画
    for i = 1, #entity_list do
        local unit_info = entity_list[i]
        if not unit_info.is_death then
            local entity = context:get_entity_by_primary_index(battle_components.uid, unit_info.uid)
            entity:replace_component(battle_components.unit_active, true)
            state_utility.try_switch_state(entity, table_names.BTLState.ids.BTLState_Born)
        end
    end

    ---@type RoleRes
    local role_res_data = data_mgr.get(table_names.RoleRes.name, boss_unit_info.role_res_mid)
    if role_res_data ~= nil then
        ---@type string 出生相机动作
        local boss_action_mid = role_res_data.BornCameraAction
        
        self.start_show_boss_coming_callback = function()
            self:start_show_boss_coming_handle(boss_unit_info.uid, finish_callback)
        end
        -- 开始Boss入场相机动画
        self:show_bosss_coming_camera_action(boss_unit_info.uid, boss_action_mid)
        
        -- 隐藏我方单位
        self:set_other_units_visible(false)
    else
        helper.error("not found RoleRes data, role_res_mid = ", boss_unit_info.role_res_mid)
    end
end

---展示Boss来袭相机动画
---@private
function system_battle_step_before:show_bosss_coming_camera_action(boss_uid, acton_mid)
    local behavior = self.context.renderer:get_boss_appear_camera_behavior()
    
    if behavior == nil then
        helper.error("cannot find boss_appear_camera_behaviour")
        return
    end

    -- 通知UI展示Boss来袭
    local normal_tex, child_tex = behavior:SetRenderTexture()
    self.context.message:send_battle_show_boss_coming(1, normal_tex, child_tex)
    local res_loader, res_pool = self.context.renderer:get_res_loader_and_pool()

    -- 获取动画路径
    ---@type Action
    local action_data = data_mgr.get(table_names.Action.name, acton_mid)
    helper.assert(action_data ~= nil, "not found Action data, acton_mid = ", acton_mid)
    local clip_path = action_data.Name
    helper.assert(clip_path ~= nil, "not found boss_clip_path, ActionId = ", action_data.Id)

    -- 将技能相机节点放入战斗单位根节点下
    local boss_entity = self.context:get_entity_by_primary_index(battle_components.uid, boss_uid)
    local render_unit = self.context.renderer:get_render_unit(boss_entity.eid)
    behavior:SetParent(render_unit.gameobject)
    behavior.normalCamera:SetLocalPosition(0, 0, 0)
    behavior:SetActive(true)

    -- 隐藏场景相机
    -- camera_mgr.scene_camera:SetActive(false)
    self.context.controller:add_timer(0.01, self.hide_scene_camera_callback)
    -- 播放相机动画
    behavior:PlayAnimation(clip_path, 1, nil, res_loader, res_pool, 0, self.animation_event_callback)
end

---动画事件回调方法
---@private
---@param value string event name
function system_battle_step_before:animation_event_handle(value)
    if string_is_nil_or_empty(value) then
        helper.error("animation event callback value is nil")
        return
    end
    
    if value == battle_constant.BOSS_BORN_IN_SLOW_EVENT then
        if self.start_show_boss_coming_callback ~= nil then
            self.start_show_boss_coming_callback()
        end
    end
end

---开始展示Boss来袭界面
---@private
---@param boss_uid ident
---@param finish_callback callback
function system_battle_step_before:start_show_boss_coming_handle(boss_uid, finish_callback)
    self.start_timer_id = nil
    local controller = self.context.controller

    -- 设置战斗速度
    controller:set_time_scale(0.01)
    -- 2. 通知UI开始慢放展示
    self.context.message:send_battle_show_boss_coming(2)
    
    -- 持续时长
    local duration_time = 2000
    -- boss延迟恢复idle
    self.end_timer_id = controller:add_timer_unscale(duration_time, self.end_show_boss_coming_callback, boss_uid, finish_callback)
end

---结束展示Boss来袭界面
---@private
---@param boss_uid ident
---@param finish_callback callback
function system_battle_step_before:end_show_boss_coming_handle(boss_uid, finish_callback)
    self.end_timer_id = nil
    self.is_boss_coming = false

    -- 将Boss设置为Idle状态
    local boss_entity = self.context:get_entity_by_primary_index(battle_components.uid, boss_uid)
    if boss_entity ~= nil then
        state_utility.exit_state(boss_entity)
    end

    -- 显示场景相机
    camera_mgr.scene_camera:SetActive(true)
    -- 隐藏入场相机
    local behavior = self.context.renderer:get_boss_appear_camera_behavior()
    behavior:SetParent(self.context.renderer:get_pool_transform())
    behavior:SetActive(false)
    behavior:ReleaseTexture()

    -- 显示我方单位
    self:set_other_units_visible(true)

    -- 3. 通知UI结束展示
    self.context.message:send_battle_show_boss_coming(3)

    -- 结束回调
    finish_callback(0)
end

---设置除boss以外单位是否可见
---@private
---@param visible boolean 是否可见
function system_battle_step_before:set_other_units_visible(visible)
    ---@type battle_unit_info[]
    local entity_list = self.context.database:get_unit_info_list()
    if entity_list ~= nil then
        for i = 1, #entity_list do
            local unit_info = entity_list[i]
            if not unit_info.is_death and not battle_utility.check_boss_unit_info(unit_info) then
                local entity = self.context:get_entity_by_primary_index(battle_components.uid, unit_info.uid)
                if entity ~= nil then
                    entity:replace_component(battle_components.unit_active, visible)
                else
                    helper.error('not found entity by uid = ', helper.to_string(unit_info.uid))
                end
            end
        end
    end
end

---设置相机默认观察视角
---@private
function system_battle_step_before:on_set_default_camera_viewing_angle()
    helper.log('set default camera viewing angle')

    -- 获取空闲相机
    local behavior, camera_id = self.context.renderer:get_free_battle_view_camera()

    ---@type MapCameraInfo 战场观察相机信息
    local camera_info = self.context.database:get_battlefield_camera_viewpoint()
    battle_utility.set_virtual_camera_info(behavior.virtualCamera, camera_info)

    -- 显示观察点位相机
    camera_mgr.show_virtual_camera(camera_id, camera_blend_type.Cut)
end

---卸载
---@public
function system_battle_step_before:tear_down()
    if self.start_timer_id ~= nil then
        self.context.controller:remove_timer_unscale(self.start_timer_id)
        self.start_timer_id = nil
    end

    if self.end_timer_id ~= nil then
        self.context.controller:remove_timer_unscale(self.end_timer_id)
        self.end_timer_id = nil
    end

    self.is_boss_coming = nil
    self.pre_load_res_dict = nil
    
    self.show_unit_born_animation_callback = nil
    self.set_default_camera_viewing_angle_callback = nil
    self.start_show_boss_coming_callback = nil
    self.end_show_boss_coming_callback = nil
    self.animation_event_callback = nil
    self.hide_scene_camera_callback = nil
  
    super.tear_down(self)
end

return system_battle_step_before