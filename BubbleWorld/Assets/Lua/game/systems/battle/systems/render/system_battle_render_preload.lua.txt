---
--- Generated by wuhaijun
--- File name : system_battle_render_preload.lua.txt
--- DateTime : 2021/11/17
--- Description : 
---

---@type battle_helper
local helper = battle_helper
local data_mgr = data
local table_names = tables
local is_nil_or_empty = string.is_nil_or_empty
local asset_type = df.enum.asset_type

---@type battle_constant
local battle_constant = require(helper.path.battle_utils .. 'battle_constant')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class system_battle_render_preload : reactive_system
local system_battle_render_preload = class("system_battle_render_preload", super)

local ANIMATION_MAX_COUNT<const> = 1
local EFFECT_MAX_COUNT<const> = 4
local AUDIO_MAX_COUNT<const> = 4

---构造函数
---@protected
---@param context context
function system_battle_render_preload:ctor(context)
    super.ctor(self, context)

    ---预加载资源字典
    ---@private
    ---@type table<string, boolean>
    self.preload_skill_dict = {}
    ---预加载资源字典
    ---@private
    ---@type table<string, number>
    self.preload_asset_dict = {}
end

---获取触发配置
---@protected
---@param context context
---@return collector
function system_battle_render_preload:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.preload_skill))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function system_battle_render_preload:filter(entity)
    return entity:has_component(battle_components.preload_skill)
end

---组件变化时执行
---@protected
---@param entity_list entity[]
---@param count number
function system_battle_render_preload:executes(entity_list, count)
    for i = 1, count do
        self:preload_skill_assets(entity_list[i])
    end
end

---技能预加载
---@protected
---@param entity entity
function system_battle_render_preload:preload_skill_assets(entity)
    ---@type battle_unit_info
    local unit_info = entity:get_component(battle_components.unit_info).value
    if unit_info == nil then return end

    ---@type preload_skill_component_data
    local preload_skill_comp = entity:get_component(battle_components.preload_skill)

    -- 遍历技能id，如果未预加载则开始加载它
    ---@type string[]
    local skill_list = preload_skill_comp.skill_list
    local skill_count = #skill_list
    if skill_count > 0 then
        ---@type RoleRes
        local role_res_data = data_mgr.get(table_names.RoleRes.name, unit_info.role_res_mid)

        for i = 1, skill_count do
            ---@type string
            local skill_mid = skill_list[i]
            if not self.preload_skill_dict[skill_mid] then
                self.preload_skill_dict[skill_mid] = true

                local is_skill, skill_data = data_mgr.is_name(skill_mid, table_names.BTLSkill.name)
                if is_skill then
                    self:on_preload_skill_handle(skill_data, role_res_data, preload_skill_comp.ignore_effect)
                else
                    local is_buff, buff_data = data_mgr.is_name(skill_mid, table_names.BTLBuff.name)
                    if is_buff then
                        self:on_preload_buff_handle(buff_data, role_res_data, preload_skill_comp.ignore_effect)
                    end
                end
            end
        end
    end

    -- 预加载技能目标受击动作
    if not is_nil_or_empty(preload_skill_comp.next_skill_mid) and preload_skill_comp.next_target_uid ~= nil then
        local is_skill, skill_data = data_mgr.is_name(preload_skill_comp.next_skill_mid, table_names.BTLSkill.name)
        if is_skill then
            self:on_preload_skill_target_hit_action(skill_data)
        end
    end
end

---预加载技能资源
---@private
---@param skill_data BTLSkill
---@param role_res_data RoleRes
---@param ignore_effect boolean
function system_battle_render_preload:on_preload_skill_handle(skill_data, role_res_data, ignore_effect)
    if skill_data.DirectorId == nil then return end
    
    for i = 1, #skill_data.DirectorId do
        ---@type array2_string
        local str_data = skill_data.DirectorId[i]
        if str_data ~= nil then
            local director_id = str_data.Array[1]
            helper.log_skill('start preload skill assets, director_id = ', director_id, ', skill_mid = ', skill_data.Id)

            ---@type skill_director_data
            local director_data = data_mgr.get(battle_constant.SKILL_DIRECTOR_DATA_NAME, director_id)
            if director_data == nil then return end

            for _, config_data in pairs(director_data.Map) do
                for j = 1, #config_data.RoleResList do
                    self:preload_action_assets(role_res_data[config_data.RoleResList[j]], ignore_effect)
                end
                if not ignore_effect then
                    self:preload_effect_list(config_data.EffectIdList)
                end
            end
        else
            helper.log_skill('start preload skill assets, skill_mid = ', skill_data.Id)
        end
    end
end

---预加载Buff资源
---@private
---@param buff_data BTLBuff
---@param _ RoleRes
function system_battle_render_preload:on_preload_buff_handle(buff_data, _)
    if is_nil_or_empty(buff_data.DirectorId) then return end
    helper.log_skill('start preload buff assets, director_id = ', buff_data.DirectorId, ', buff_mid = ', buff_data.Id)

    ---@type buff_director_data
    local director_data = data_mgr.get(battle_constant.BUFF_DIRECTOR_DATA_NAME, buff_data.DirectorId)
    if director_data ~= nil then
        -- TODO(whj) : buff预加载
        --for _, config_data in pairs(director_data.Map) do
        --    self:preload_effect_list(config_data.EffectIdList)
        --end
    end
end

---预加载目标受击动作
---@private
---@param skill_data BTLSkill
---@param target_uid Ident
function system_battle_render_preload:on_preload_skill_target_hit_action(skill_data, target_uid)
    ---@type entity
    local target_entity = self.context:get_entity_by_primary_index(battle_components.uid, target_uid)
    ---@type battle_unit_info
    local target_unit_info = target_entity:get_component(battle_components.unit_info).value
    if target_unit_info == nil then return end
    
    ---@type RoleRes
    local role_res_data = data_mgr.get(table_names.RoleRes.name, target_unit_info.role_res_mid)

    -- 加载受击动作
    for i = 1, #skill_data.DirectorId do
        ---@type array2_string
        local str_data = skill_data.DirectorId[i]
        local director_id = str_data.Array[1]
        helper.log_skill('start preload skill target assets, director_id = ', director_id, ', skill_mid = ', skill_data.Id)
        
        ---@type skill_director_data
        local director_data = data_mgr.get(battle_constant.SKILL_DIRECTOR_DATA_NAME, director_id)
        if director_data ~= nil then
            for _, config_data in pairs(director_data.Map) do
                for j = 1, #config_data.TargetActionList do
                    self:preload_action_assets(role_res_data[config_data.TargetActionList[j]])
                end
            end
        end
    end
end

---预加载Actoin
---@private
---@param action_mid string 表id
---@param ignore_effect boolean 是否忽略特效
function system_battle_render_preload:preload_action_assets(action_mid, ignore_effect)
    if is_nil_or_empty(action_mid) then return end
    
    ---@type Action
    local action_data = data_mgr.get(table_names.Action.name, action_mid)
    if action_data == nil then return end

    -- 动作
    if not is_nil_or_empty(action_data.Name) then
        if self.preload_asset_dict[action_data.Name] ~= ANIMATION_MAX_COUNT then
            self.preload_asset_dict[action_data.Name] = ANIMATION_MAX_COUNT
            self.context.renderer:preload_asset_async(action_data.Name, asset_type.animation_clip)
        end
    end

    -- 特效
    if not ignore_effect then
        self:preload_effect_list(action_data.EffectId)
    end

    -- 音效
    self:preload_audio_assets(action_data.TalkAudioId)
    self:preload_audio_assets(action_data.AudioId)
end

---预加载特效列表
---@private
---@param effect_ids string[]
function system_battle_render_preload:preload_effect_list(effect_ids)
    if effect_ids == nil then return end

    for i = 1, #effect_ids do
        local mid = effect_ids[i]
        if not is_nil_or_empty(mid) then
            ---@type Effect
            local effect_data = data_mgr.get(table_names.Effect.name, mid)
            if effect_data ~= nil then
                -- 特效
                if not is_nil_or_empty(effect_data.Path) then
                    local count = self.preload_asset_dict[effect_data.Path] or 0
                    if count <= EFFECT_MAX_COUNT then
                        self.preload_asset_dict[effect_data.Path] = count + 1
                        self.context.renderer:preload_instance_async(effect_data.Path)
                    end
                end

                -- 音效
                self:preload_audio_assets(effect_data.AudioId)
            end
        end
    end
end

---预加载Audio
---@private
---@param mid string 表id
function system_battle_render_preload:preload_audio_assets(mid)
    if is_nil_or_empty(mid) then return end
    wwise_manager.preload_audio(mid)
    
    --
    ----wwise音频预加载
    ----self.context.renderer:preload_asset_async(mid, asset_type.audio_clip)
    --
    ----TODO: Obsolete Logic
    -----@type Audio
    --local audio_data = data_mgr.get(table_names.Audio.name, mid)
    --if audio_data == nil then return end
    --
    --if not is_nil_or_empty(audio_data.Path) then
    --    local count = self.preload_asset_dict[audio_data.Path] or 0
    --    if count < AUDIO_MAX_COUNT then
    --        self.preload_asset_dict[audio_data.Path] = count + 1
    --        self.context.renderer:preload_asset_async(audio_data.Path, asset_type.audio_clip)
    --    end
    --end
end

---卸载
---@public
function system_battle_render_preload:tear_down()
    self.preload_asset_dict = nil
    self.preload_skill_dict = nil
    
    super.tear_down(self)
end

return system_battle_render_preload