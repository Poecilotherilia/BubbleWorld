---
--- Generated by wuhaijun
--- File name : system_battle_render_unit.lua.txt
--- DateTime : 2021/04/21
--- Description : 
---

local helper = battle_helper
local enum_battle = enum.battle
local battle_step_type = enum_battle.battle_step_type
local battle_renderer_type = enum_battle.battle_renderer_type

---@type battle_constant
local battle_constant = require(helper.path.battle_utils .. 'battle_constant')
---@type group_event
local group_event = require(helper.path.ecs .. 'group_event')
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type battle_components
local battle_components = require(helper.path.battle_components)

---@class system_battle_render_unit
local system_battle_render_unit = class("system_battle_render_unit")

---构造函数
---@protected
---@param context context
function system_battle_render_unit:ctor(context)
    self.context = context

    ---单位渲染类子弹
    ---@private
    ---@type table<string, base_render>
    self.render_unit_class_dict = {}

    ---初始化完毕回调
    ---@type fun(render:base_render)
    self.render_init_finish_callback = function(render) self:render_init_finish_handle(render) end

    ---@private
    ---@type entity[]
    self.entity_buff_list = {}
    ---@private
    ---@type collector
    self.added_or_updated_collector = context:get_collector(matchers.all(battle_components.asset_data))    
    ---@private
    ---@type collector
    self.destroyed_collector = context:get_collector(matchers.all(battle_components.destroyed))
end

---初始化
---@public
function system_battle_render_unit:initialize()
    local dict = self.render_unit_class_dict
    dict[battle_constant.RENDER_BATTLE_UNIT] = require(helper.path.battle_render_unit .. battle_constant.RENDER_BATTLE_UNIT)
    dict[battle_constant.RENDER_BATTLE_BULLET] = require(helper.path.battle_render_unit .. battle_constant.RENDER_BATTLE_BULLET)
    dict[battle_constant.RENDER_BATTLE_TEAM] = require(helper.path.battle_render_unit .. battle_constant.RENDER_BATTLE_TEAM)
    dict[battle_constant.RENDER_BATTLE_REVIVE] = require(helper.path.battle_render_unit .. battle_constant.RENDER_BATTLE_REVIVE)
end

---执行(每帧)
---@public
function system_battle_render_unit:execute()
    self:on_comp_added_or_updated_handle()
    self:on_entity_destroyed_handle()
end

---添加或更新组件收集器处理
---@private
function system_battle_render_unit:on_comp_added_or_updated_handle()
    if not self.added_or_updated_collector:has_entity() then return end

    local list, count = self.added_or_updated_collector:get_entity_list(self.entity_buff_list)
    self.added_or_updated_collector:clear_entity()
    
    for i = 1, count do
        local entity = list[i]
        
        local render = self.context.renderer:get_render_unit(entity.eid)
        if render == nil then
            entity:replace_component(battle_components.render_link, self:create_render(entity))
        else
            helper.error('Why the render already exist?, render.gameobject = ', render.gameobject)
        end
    end
end

---实体销毁收集器处理
---@private
function system_battle_render_unit:on_entity_destroyed_handle()
    if not self.destroyed_collector:has_entity() then return end

    local list, count = self.destroyed_collector:get_entity_list(self.entity_buff_list)
    self.destroyed_collector:clear_entity()

    for i = 1, count do
        local eid = list[i].eid
        helper.log('entity was destroyed. Try destroying the render layer, eid = ', eid)
        
        self.context.renderer:remove_render_unit(eid)
    end
end

---创建Render
---@private
---@param entity entity
function system_battle_render_unit:create_render(entity)
    ---@type battle_asset_data_data
    local asset_comp = entity:get_component(battle_components.asset_data)
    local render_script = asset_comp.render_script or "base_render"
    
    local render_class = self.render_unit_class_dict[render_script]
    if render_class == nil then
        render_class = require(helper.path.battle_render_unit .. render_script)
        self.render_unit_class_dict[render_script] = render_class
    end
    
    ---@type base_render
    local render = render_class.new()
    self.context.renderer:add_render_unit(entity, render)
    render:initialize(self.context, entity.eid, asset_comp.res_path, self.render_init_finish_callback)

    helper.log('create render layer, res = ', asset_comp.res_path, ', script = ', asset_comp.render_script)

    return entity.eid
end

---渲染层初始化完毕
---@private
---@param render base_render
function system_battle_render_unit:render_init_finish_handle(render)
    local battle_context = self.context
    battle_context.message:send_battle_render_unit(render)

    local controller = battle_context.controller
    -- 战斗初始步骤时检测战斗角色是否全部加载完毕
    if render.renderer_type == battle_renderer_type.ROLE and controller:check_in_battle_step(battle_step_type.INIT) then
        helper.log('load render finished, obj = ', render.gameobject, ", uid = ", helper.to_string(render.unit_info.uid))

        -- 检测是否全部加载完毕
        local is_all_init_finished = true
        local unit_info_list = battle_context.database:get_unit_info_list()
        for i = 1, #unit_info_list do
            local unit_info = unit_info_list[i]
            if not unit_info.is_death then
                local unit_entity = battle_context:get_entity_by_primary_index(battle_components.uid, unit_info.uid)
                local unit_render = battle_context.renderer:get_render_unit(unit_entity.eid)
                if not unit_render:get_is_init() then
                    is_all_init_finished = false
                    break
                end
            end
        end

        -- 全部加载完毕，进入战前步骤
        if is_all_init_finished then
            controller:set_battle_step(battle_step_type.BEFORE)
        end
    end
end

---卸载
---@protected
function system_battle_render_unit:tear_down()
    self.context:destroy_collector(self.added_or_updated_collector)
    self.added_or_updated_collector = nil
    self.context:destroy_collector(self.destroyed_collector)
    self.destroyed_collector = nil
    helper.clear_array(self.entity_buff_list)
    self.entity_buff_list = nil

    self.render_unit_class_dict = nil
    self.render_init_finish_callback = nil
end

return system_battle_render_unit