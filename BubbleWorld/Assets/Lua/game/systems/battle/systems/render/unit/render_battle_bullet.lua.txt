---
--- Generated by wuhaijun
--- File name : render_battle_bullet.lua.txt
--- DateTime : 2021/09/09
--- Description : 
---

local helper = battle_helper
local battle_renderer_type = enum.battle.battle_renderer_type
local get_file_name = string.get_file_name_without_extension
local BattleBulletLuaBehaviour = cs.BattleBulletLuaBehaviour

---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type base_render
local super = require(helper.path.battle_render_unit .. 'base_render')

---@class render_battle_bullet : base_render
local render_battle_bullet = class("render_battle_bullet", super)

---构造函数
---@protected
function render_battle_bullet:ctor()
    super.ctor(self, battle_renderer_type.BULLET)

    ---@private
    ---@type fun(e:entity, v:vector3)
    self.position_changed_callback = function(e, v) self:on_position_changed_handle(e, v) end
    ---@private
    ---@type fun(e:entity, v:vector3)
    self.rotation_changed_callback = function(e, v) self:on_rotation_changed_handle(e, v) end
    ---@private
    ---@type fun(e:entity, v:vector3)
    self.scale_changed_callback = function(e, v) self:on_scale_changed_handle(e, v) end
    ---@private
    ---@type fun(e:entity, x:number, y:number, z:number)
    self.look_at_changed_callback = function(e, x, y, z) self:on_look_at_changed_handle(e, x, y, z) end
    ---@private
    ---@type fun(e:entity, v:boolean)
    self.active_changed_callback = function(e, v) self:on_active_changed_handle(e, v) end
    
    ---子弹绑定类
    ---@private
    ---@type Game.Behaviour.BattleBulletLuaBehaviour
    self.lua_behaviour = nil
    ---子弹配表数据
    ---@private
    ---@type generate_bullet_data 
    self.bullet_data = nil
end

---加载单位预制体
---@protected
function render_battle_bullet:load_unit_handle()
    if self.context ~= nil then
        local go = self.renderer:load_gameobject(self.res_path, self.parent_trans)
        self:load_unit_finished(go)
    end
end

---初始化完毕，开始渲染层逻辑
---@protected
function render_battle_bullet:on_start()
    -- 获取子弹绑定类
    self.lua_behaviour = self.gameobject:GetOrAddComponent(typeof(BattleBulletLuaBehaviour))
    self.lua_behaviour:InitLua(self)
    self.lua_behaviour:SetAnimUpdateMode(self.renderer:get_animator_update_mode())
    
    -- debug
    if helper.is_debug then
        self.lua_behaviour:SetName(get_file_name(self.res_path) .. '_' .. tostring(self:get_eid()))
    end

    -- 获取子弹实体
    local entity = self:get_entity()    
    -- 子弹配置数据
    self.bullet_data = entity:get_component(battle_components.bullet_info).data
    -- 初始时隐藏
    self.lua_behaviour:SetActive(false)
    -- 监听组件
    self:add_listeners(entity)
end

---添加监听事件
---@private
---@param entity entity
function render_battle_bullet:add_listeners(entity)
    entity:add_listener(battle_components.position, self.position_changed_callback)
    entity:add_listener(battle_components.rotation, self.rotation_changed_callback)
    entity:add_listener(battle_components.scale, self.scale_changed_callback)
    entity:add_listener(battle_components.look_at_position, self.look_at_changed_callback)
    entity:add_listener(battle_components.unit_active, self.active_changed_callback)

    local pos_comp = entity:get_component(battle_components.position)
    if pos_comp ~= nil then
        self.position_changed_callback(entity, pos_comp.value)
    end
    local rot_comp = entity:get_component(battle_components.rotation)
    if rot_comp ~= nil then
        self.rotation_changed_callback(entity, rot_comp.value)
    end
    local scale_comp = entity:get_component(battle_components.scale)
    if scale_comp ~= nil then
        self.scale_changed_callback(entity, scale_comp.value)
    end
    local loop_comp = entity:get_component(battle_components.look_at_position)
    if loop_comp ~= nil then
        self:look_at_changed_callback(entity, loop_comp.x, loop_comp.y, loop_comp.z)
    end
    local unit_active_comp = entity:get_component(battle_components.unit_active)
    if unit_active_comp ~= nil then
        self:on_active_changed_handle(entity, unit_active_comp.value)
    end
end

--region 组件监听方法
---位置改变
---@private
---@param _ entity
---@param value vector3
function render_battle_bullet:on_position_changed_handle(_, value)
    self.lua_behaviour:SetPosition(value.x, value.y, value.z)
end

---旋转改变
---@private
---@param _ entity
---@param value vector3
function render_battle_bullet:on_rotation_changed_handle(_, value)
    self.lua_behaviour:SetLocalRotation(value.x, value.y, value.z)
end

---缩放改变
---@private
---@param _ entity
---@param value vector3
function render_battle_bullet:on_scale_changed_handle(_, value)
    self.lua_behaviour:SetLocalScale(value.x, value.y, value.z)
end

---缩放改变
---@private
---@param _ entity
---@param x vector3
---@param y vector3
---@param z vector3
function render_battle_bullet:on_look_at_changed_handle(_, x, y, z)
    self.lua_behaviour:LookAtPosition(x, y, z)
end

---显隐改变
---@private
---@param _ entity
---@param value boolean
function render_battle_bullet:on_active_changed_handle(_, value)
    self.gameobject:SetActive(value)
    
    if value then
        self.lua_behaviour.DfEffect:Play(self.play_speed)
    end
end
--endregion

---设置激活状态
---@public
---@param active boolean
function render_battle_bullet:set_is_active(active)
    if active == self.is_active then return end

    super.set_is_active(self, active)

    if self:get_is_init() then
        self.lua_behaviour:SetDisplay(active)
    end
end

---卸载GameObject
---@protected
function render_battle_bullet:unload_gameobject()
    self.gameobject:SetActive(false)
    
    super.unload_gameobject(self)
end

---清理
---@public
function render_battle_bullet:clear()
    local entity = self:get_entity()
    if entity ~= nil then
        entity:remove_listener(battle_components.position, self.position_changed_callback)
        entity:remove_listener(battle_components.rotation, self.rotation_changed_callback)
        entity:remove_listener(battle_components.scale, self.scale_changed_callback)
        entity:remove_listener(battle_components.look_at_position, self.look_at_changed_callback)
        entity:remove_listener(battle_components.unit_active, self.active_changed_callback)
    end

    super.clear(self)

    self.bullet_data = nil
    if self.lua_behaviour ~= nil then
        self.lua_behaviour:Clear()
        self.lua_behaviour = nil
    end
end

---销毁
---@public
function render_battle_bullet:dispose()
    super.dispose(self)

    self.position_changed_callback = nil
    self.rotation_changed_callback = nil
    self.scale_changed_callback = nil
    self.look_at_changed_callback = nil
    self.active_changed_callback = nil
end

return render_battle_bullet