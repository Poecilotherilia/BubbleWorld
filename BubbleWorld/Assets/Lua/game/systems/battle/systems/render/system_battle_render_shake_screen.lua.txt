---
--- Generated by wuhaijun
--- File name : system_battle_render_shake_screen.lua.txt
--- DateTime : 2023/04/20
--- Description : 震屏处理
---

---@type battle_helper
local helper = battle_helper
local camera_manager = camera_manager
local SetAnimationCurve = cs.LuaUtil.SetAnimationCurve
local ImpulseShapes = cs.ImpulseShapes

---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class system_battle_render_shake_screen : reactive_system
local system_battle_render_shake_screen = class("system_battle_render_shake_screen", super)

---@type UnityEngine.AnimationCurve
local animation_curve = cs.AnimationCurve()

---构造函数
---@protected
---@param context context
function system_battle_render_shake_screen:ctor(context)
    super.ctor(self, context)

    ---@private
    ---@type number
    self.timer_id = nil

    ---时间缩放结束回调
    ---@private
    ---@type fun()
    self.finished_callback = function(...) self:on_finished_handle(...) end
end

---获取触发配置
---@protected
---@param context context
---@return collector
function system_battle_render_shake_screen:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.shake_screen))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function system_battle_render_shake_screen:filter(entity)
    return entity:has_component(battle_components.shake_screen)
end

---组件变化时执行
---@protected
---@param list entity[] 实体列表
---@param count number 列表长度
function system_battle_render_shake_screen:executes(list, count)
    for i = 1, count do
        self:on_entity_handle(list[i])
    end
end

---实体处理
---@private
---@param entity entity
function system_battle_render_shake_screen:on_entity_handle(entity)
    ---@type { duration:number, direction:skill_pos_info, curve:animation_curve_keyframe[], force:number }
    local comp_data = entity:get_component(battle_components.shake_screen)
    local duration = comp_data.duration or 0

    -- 震屏
    local v_camera = camera_manager.current_show_virtual_camera()
    local xx = 0.1
    local yy = -0.1
    local zz = 0.1
    if comp_data.direction ~= nil then
        xx = comp_data.direction.X
        yy = comp_data.direction.Y
        zz = comp_data.direction.Z
    end

    if comp_data.force ~= nil then
        xx = xx * comp_data.force
        yy = yy * comp_data.force
        zz = zz * comp_data.force
    end
    
    local shape_type = ImpulseShapes.Custom
    local shape_curve
    if comp_data.curve ~= nil then
        shape_curve = SetAnimationCurve(comp_data.curve, animation_curve)
    else
        shape_type = ImpulseShapes.Explosion
    end
    
    camera_manager.shake_target_virtual_camera(v_camera, xx, yy, zz, duration / 1000, shape_type, shape_curve)
    
    -- 结束计时
    self:remove_timer()
    self.timer_id = self.context.controller:add_timer_unscale(duration, self.finished_callback, entity.eid)
end

---结束处理
---@private
---@param eid number
function system_battle_render_shake_screen:on_finished_handle(eid)
    self.timer_id = nil
    
    local entity = self.context:get_entity_by_primary_index(battle_components.eid, eid)
    if entity ~= nil then
        entity:remove_component(battle_components.shake_screen)
    end
end

---移除timer
---@protected
function system_battle_render_shake_screen:remove_timer()
    if self.timer_id ~= nil then
        self.context.controller:remove_timer_unscale(self.timer_id)
        self.timer_id = nil
    end
end

---卸载
---@protected
function system_battle_render_shake_screen:tear_down()
    self:remove_timer()

    self.finished_callback = nil
    
    super.tear_down(self)
end

return system_battle_render_shake_screen