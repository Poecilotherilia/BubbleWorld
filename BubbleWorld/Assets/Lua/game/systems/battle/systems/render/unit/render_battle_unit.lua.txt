---
--- Generated by wuhaijun
--- File name : render_battle_unit.lua.txt
--- DateTime : 2021/04/21
--- Description : 战斗单位渲染层
---

local helper = battle_helper
local enum = enum
local battle_renderer_type = enum.battle.battle_renderer_type
local get_file_name = string.get_file_name_without_extension
local is_nil_or_empty = string.is_nil_or_empty
local CharacterLuaBehaviour = cs.CharacterLuaBehaviour
local DfAnimationEndType = cs.DfAnimationEndType
local data_mgr = data
local table_names = tables
local TweenUtil = cs.TweenUtil
local EaseInElastic = cs.Ease.InElastic
local TweenUpdateType = cs.UpdateType
local role_attach_point_type = enum.common.role_attach_point_type
local GameObject = cs.GameObject

---@type state_utility
local state_utility = require(helper.path.battle_fsm .. 'state_utility')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type base_render
local super = require(helper.path.battle_render_unit .. 'base_render')

---@class render_battle_unit : base_render
local render_battle_unit = class("render_battle_unit", super)

---构造函数
---@protected
function render_battle_unit:ctor()
    super.ctor(self, battle_renderer_type.ROLE)
    
    ---@private
    ---@type fun(e:entity, v:vector3)
    self.position_changed_callback = function(e, v) self:on_position_changed_handle(e, v) end
    ---@private
    ---@type fun(e:entity, v:vector3)
    self.rotation_changed_callback = function(e, v) self:on_rotation_changed_handle(e, v) end
    ---@private
    ---@type fun(e:entity, v:vector3)
    self.scale_changed_callback = function(e, v) self:on_scale_changed_handle(e, v) end
    ---@private
    ---@type fun(e:entity, v:boolean)
    self.active_changed_callback = function(e, v) self:on_active_changed_handle(e, v) end

    ---修正渲染帧回调
    ---@private
    ---@type fun(f:number)
    self.fix_render_frame_update_callback = function(f) self:internal_set_play_speed(f) end
    ---修正渲染帧回调
    ---@private
    ---@type fun()
    self.fix_render_frame_finished_callback = function() self.fix_frame_tween = nil end

    ---@private
    ---@type Game.Behaviour.CharacterLuaBehaviour
    self.lua_behaviour = nil
    
    ---单位数据
    ---@private
    ---@type battle_unit_info
    self.unit_info = nil
    ---空闲动画路径
    ---@private
    ---@type string
    self.idle_clip_path = nil
end

---加载单位预制体
---@protected
function render_battle_unit:load_unit_handle()
    -- 获取单位数据
    local entity = self:get_entity()
    self.unit_info = entity:get_component(battle_components.unit_info).value
    ---@type RoleRes RoleRes表数据
    local role_res_data = data_mgr.get(table_names.RoleRes.name, self.unit_info.role_res_mid)

    local renderer = self.renderer
    local role_res_properties = table_names.RoleRes.properties
    
    -- 出生动画
    battle_utility.preload_skill_action_handle(renderer, role_res_data[role_res_properties.BornAction])
    -- 出生镜头动画
    battle_utility.preload_skill_action_handle(renderer, role_res_data[role_res_properties.BornCameraAction])
    -- idle动画
    battle_utility.preload_skill_action_handle(renderer, role_res_data[role_res_properties.IdleAction])
    -- 受击动画
    battle_utility.preload_skill_action_handle(renderer, role_res_data[role_res_properties.HitAction])
    -- 眩晕动画
    battle_utility.preload_skill_action_handle(renderer, role_res_data[role_res_properties.DizzyAction])

    self.idle_clip_path = data_mgr.get(table_names.Action.name, role_res_data.IdleAction, table_names.Action.properties.Name)
    
    super.load_unit_handle(self)
end

---初始化完毕，开始渲染层逻辑
---@protected
function render_battle_unit:on_start()
    local go = self.gameobject
    go:SetLayers('Battle_Unit')
    
    local behaviour = go:GetComponent(typeof(CharacterLuaBehaviour))
    helper.assert(behaviour ~= nil, "not found CharacterLuaBehaviour Component, res_path = ", self.res_path)

    behaviour:InitLua(self)
    behaviour:SetAnimUpdateMode(self.renderer:get_animator_update_mode())
    self.lua_behaviour = behaviour

    helper.log("load unit finished, res_path = ", self.res_path)
    
    -- 初始化数据
    self:init_data()
    -- 设置溶解效果
    self:show_dissolve_effect(false, 0)
    -- 播放常驻特效
    ---@type RoleRes
    local role_res_data = data_mgr.get(table_names.RoleRes.name, self.unit_info.role_res_mid)
    for i = 1, #role_res_data.BornEffectBattle do
        ---@type Effect
        local effect_data = data_mgr.get(table_names.Effect.name, role_res_data.BornEffectBattle[i])
        if effect_data ~= nil then
            self:play_effect_by_attack_point(effect_data.Id, effect_data.HangingPointPath)
        end
    end
    -- 设置血条挂点坐标
    if not is_nil_or_empty(role_res_data.HpBarSetData) then
        ---@type Point
        local point_data = data_mgr.get(table_names.Point.name, role_res_data.HpBarSetData)
        if point_data ~= nil then
            local health_bar_go = GameObject(role_attach_point_type.HEALTH_BAR_CUSTOM)
            health_bar_go:SetParent(self.transform)
            health_bar_go:SetLocalPosition(point_data.PositionX / 10000, point_data.PositionY / 10000, point_data.PositionZ / 10000)
        end
    end
end

---初始化数据
---@private
function render_battle_unit:init_data()
    local entity = self:get_entity()

    -- debug
    if helper.is_debug then
        local file_name = get_file_name(self.res_path)
        local uid_str = helper.to_string(self:get_uid())
        self.gameobject.name = string.format('%s_%s(%d)', file_name, uid_str, entity.eid)
    end

    -- 添加监听
    entity:add_listener(battle_components.position, self.position_changed_callback)
    entity:add_listener(battle_components.rotation, self.rotation_changed_callback)
    entity:add_listener(battle_components.scale, self.scale_changed_callback)
    entity:add_listener(battle_components.unit_active, self.active_changed_callback)

    -- 设置出生数据
    self.position_changed_callback(entity, entity:get_component(battle_components.position).value)
    self.scale_changed_callback(entity, entity:get_component(battle_components.scale).value)
    self.rotation_changed_callback(entity, entity:get_component(battle_components.rotation).value)
    self.active_changed_callback(entity, entity:get_component(battle_components.unit_active).value)

    -- 播放动画
    ---@type unit_state_component_data
    local state_comp = entity:get_component(battle_components.unit_state)
    if state_comp ~= nil then
        state_utility.set_unit_state(entity, state_comp.current, true)
    end
end

---获取位置
---@public
---@return number, number, number
function render_battle_unit:get_position()
    return self.gameobject:GetPosition()
end

---获取欧拉角
---@public
---@return number, number, number
function render_battle_unit:get_euler_angles()
    return self.gameobject:GetEulerAngles()
end

---获取战斗单位Lua绑定器
---@public
---@return Game.Behaviour.BattleUnitLuaBehaviour
function render_battle_unit:get_lua_behaviour()
    return self.lua_behaviour
end

---获得位置索引
---@public
---@return number
function render_battle_unit:get_pos_index()
    if nil ~= self.unit_info then
        return self.unit_info.pos_index
    end
    return -1
end

---获取敌我状态
---@public
---@return team_type_flag
function render_battle_unit:get_team_type()
    return self.unit_info.team_type
end

---获取实体id
---@public
---@return Ident
function render_battle_unit:get_uid()
    return self.unit_info.uid
end

---获得角色资源ID
---@return string
function render_battle_unit:get_role_res_mid()
    return self.unit_info.role_res_mid
end

---获取挂点
---@public
---@param point_name string 挂点名字
---@param is_show_error boolean 输出日志
---@return UnityEngine.Transform
function render_battle_unit:get_attach_point(point_name, is_show_error)
    ---@type UnityEngine.Transform
    local point_trans
    if is_show_error == nil then
        is_show_error = true
    end

    if not is_nil_or_empty(point_name) then
        point_trans = self.lua_behaviour:GetAttackPoint(point_name, is_show_error)
    end

    if point_trans == nil then
        point_trans = self.transform
    end

    return point_trans
end

---返回Witch表或Monster表Id
---@public
---@return string
function render_battle_unit:get_config_id()
    if nil ~= self.unit_info then
        return self.unit_info.config_id        
    end
    return nil
end

---返回Enemy表id
---@public
---@return string
function render_battle_unit:get_enemy_mid()
    if nil ~= self.unit_info then
        return self.unit_info.enemy_mid        
    end
    return nil
end

---设置动画播放速度
---@public
---@param speed number
function render_battle_unit:set_play_speed(speed)
    -- 停止补帧操作
    if self.fix_frame_tween ~= nil then
        TweenUtil.Clear(self.fix_frame_tween)
    end
    self:internal_set_play_speed(speed)
end

---设置动画播放速度，内部的
---@private
---@param speed number
function render_battle_unit:internal_set_play_speed(speed)
    super.set_play_speed(self, speed)

    if self.lua_behaviour ~= nil then
        self.lua_behaviour:SetAnimationSpeed(speed)
    end
end

---补帧处理
---@public
---@param target_value number 目标缩放值
---@param duration number 持续时间（秒）
function render_battle_unit:fix_render_frame_handle(target_value, duration)
    if self.fix_frame_tween ~= nil then
        TweenUtil.Clear(self.fix_frame_tween)
    end
    -- 先慢后快
    self.fix_frame_tween = TweenUtil.DoChangeFloat(self.play_speed, target_value, duration, 0, self.fix_render_frame_update_callback, 
            self.fix_render_frame_finished_callback, EaseInElastic, TweenUpdateType.Manual)
end

---设置激活状态
---@public
---@param active boolean
function render_battle_unit:set_is_active(active)
    if active == self.is_active then return end

    super.set_is_active(self, active)

    if self:get_is_init() then
        --local property_name<const> = '_DitherAlpha'
        --local active_value<const> = 1
        --local disable_value<const> = 0
        --if active then
        --    self.lua_behaviour:MaterialPropertyChanged(property_name, active_value)
        --else
        --    self.lua_behaviour:MaterialPropertyChanged(property_name, disable_value)
        --end
        self.lua_behaviour:SetDisplay(active)
    end
end

---显示渲染层
---@public
function render_battle_unit:show_render()
    local entity = self:get_entity()
    if entity ~= nil then
        self.position_changed_callback(entity, entity:get_component(battle_components.position).value)
    end
end

---隐藏渲染层
---@public
function render_battle_unit:hide_render()
    self.lua_behaviour:SetPosition(-99999, -99999, -99999)
end

--region 播放动画
---播放动画片段
---@public
---@param clip_path string 动画片段路径
---@param speed number 播发速度
---@param fade_time number 播发速度
---@param finish_callback fun(eid:number) 播放完成回调
function render_battle_unit:play_animation(clip_path, speed, fade_time, is_loop, finish_callback)
    if is_nil_or_empty(clip_path) then return end

    is_loop = is_loop or false

    local anim_finished_callback = function(return_type, _)
        if return_type == DfAnimationEndType.Completed then
            if finish_callback ~= nil then
                finish_callback(self:get_eid())
            else
                self:play_animation_by_clip_path(self.idle_clip_path, speed)
            end
        end
    end

    -- 播放动画
    self:play_animation_by_clip_path(clip_path, speed, anim_finished_callback, fade_time)
end

---播放动画片段根据路径
---@private
---@param clip_path string
---@param speed number
---@param finish_callback fun(eid:number) 播放完成回调
---@param fade_time number 播发速度
function render_battle_unit:play_animation_by_clip_path(clip_path, speed, finish_callback, fade_time)
    if self.lua_behaviour ~= nil then
        local res_loader, res_pool = self:get_res_loader_and_pool()
        -- self.lua_behaviour:PlayAnimation(clip_path, speed or self.play_speed, finish_callback, res_loader, res_pool, fade_time or - 1)
        self.lua_behaviour:PlayAnimationAsync(clip_path, speed or self.play_speed, finish_callback, res_loader, res_pool, fade_time or - 1)
    end
end

---显示溶解效果
---@public  
---@param is_show boolean 是否显示溶解效果
---@param duration_time number 显示持续时间
function render_battle_unit:show_dissolve_effect(is_show, duration_time)
    if self.lua_behaviour == nil then return end

    if is_show then
        self.lua_behaviour:MaterialPropertyChanged("_DissolveAmount", 1.01, duration_time)
    else
        self.lua_behaviour:MaterialPropertyChanged("_DissolveAmount", 0, duration_time)
    end
end
--endregion

--region 组件监听方法
---位置改变
---@private
---@param _ entity
---@param value vector3
function render_battle_unit:on_position_changed_handle(_, value)
    self.lua_behaviour:SetPosition(value.x, value.y, value.z)
end

---旋转改变
---@private
---@param _ entity
---@param value vector3
function render_battle_unit:on_rotation_changed_handle(_, value)
    self.lua_behaviour:SetLocalRotation(value.x, value.y, value.z)
end

---缩放改变
---@private
---@param _ entity
---@param value vector3
function render_battle_unit:on_scale_changed_handle(_, value)
    self.lua_behaviour:SetUnitScale(value.x, value.y, value.z)
end

---显隐改变
---@private
---@param _ entity
---@param value boolean
function render_battle_unit:on_active_changed_handle(_, value)
    self:set_is_active(value)
end
--endregion

---清理
---@public
function render_battle_unit:clear()
    local entity = self:get_entity()
    if entity ~= nil then
        entity:remove_listener(battle_components.position, self.position_changed_callback)
        entity:remove_listener(battle_components.rotation, self.rotation_changed_callback)
        entity:remove_listener(battle_components.scale, self.scale_changed_callback)
        entity:remove_listener(battle_components.unit_active, self.active_changed_callback)
    end

    -- 清理tween
    if self.fix_frame_tween ~= nil then
        TweenUtil.Clear(self.fix_frame_tween)
        self.fix_frame_tween = nil
    end

    -- 设置溶解效果
    self:show_dissolve_effect(false, 0)

    self.unit_info = nil
    if self.lua_behaviour ~= nil then
        self.lua_behaviour:Clear()
        self.lua_behaviour = nil
    end
    
    super.clear(self)
end

---销毁
---@public
function render_battle_unit:dispose()
    super.dispose(self)

    self.position_changed_callback = nil
    self.rotation_changed_callback = nil
    self.scale_changed_callback = nil
    self.active_changed_callback = nil
    self.fix_render_frame_update_callback = nil
    self.fix_render_frame_finished_callback = nil
end

return render_battle_unit