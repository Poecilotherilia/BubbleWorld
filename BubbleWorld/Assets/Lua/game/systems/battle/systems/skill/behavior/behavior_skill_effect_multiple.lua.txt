---
--- Generated by wuhaijun
--- File name : behavior_skill_effect_multiple.lua.txt
--- DateTime : 2021/11/09
--- Description : 技能并行伤害
---

---@type battle_helper
local helper = battle_helper

---@type battle_effect_utility
local battle_effect_utility = require(helper.path.battle_skill .. 'utility/battle_effect_utility')
---@type base_behavior
local super = require(helper.path.battle_skill .. 'behavior/base_behavior')

---@class behavior_skill_effect_multiple : base_behavior
local behavior_skill_effect_multiple = class("behavior_skill_effect_multiple", super)

---构造函数
---@protected
function behavior_skill_effect_multiple:ctor()
    super.ctor(self, self.cname)
end

---行为开始，根据配置延迟后开始
---@protected
function behavior_skill_effect_multiple:on_start()
    ---@type skill_effect_multiple_data
    local data = self.behavior_data.behavior_args.SkillEffectMultipleData
    self:log_assert(data ~= nil, "invalid SkillEffectMultipleData")

    local context = self.context
    ---@type battle_effect_data[] 效果数据列表
    local server_list = self.skill_data.effect_list
  
    -- 根据执行模式执行效果
    if data.ExecutionMode == 0 then
        ---@type table<ident, battle_effect_data[]>
        local effect_data_dict = context:get_free_table("behavior_skill_effect_multiple.effect_data_dict")
        
        -- 重组技能效果数据，以技能目标为key
        for i = 1, #server_list do
            local effect_data = server_list[i]
            local tmp_effect_list = effect_data_dict[effect_data.effect.target_id]
            if tmp_effect_list == nil then
                tmp_effect_list = context:get_free_table("behavior_skill_effect_multiple.tmp_effect_list")
                effect_data_dict[effect_data.effect.target_id] = tmp_effect_list
            end
            tmp_effect_list[#tmp_effect_list +1] = effect_data
        end
        
        -- 0=并行执行，以技能目标为组，每组执行一遍所有客户端技能效果列表
        for _, server_data_list in pairs(effect_data_dict) do
            self:on_attack_frame_handle(server_data_list, data.GroupList)
            -- 回收容器
            context:recycle_free_table(server_data_list)
        end
        
        -- 回收容器
        context:recycle_free_table(effect_data_dict)
        
    elseif data.ExecutionMode == 1 then
        -- 1=串行执行，遍历服务器技能效果列表和客户端技能效果列表数据，一一匹配执行
        self:on_attack_frame_handle(server_list, data.GroupList)

    else
        self:log_error('new ExecutionMode not processed, mode1 = ', data.ExecutionMode)
    end
end

---开始执行攻击帧数据
---@private
---@param server_list battle_effect_data[] 服务器效果列表
---@param group_list skill_effect_group_data[] 客户端效果列表
function behavior_skill_effect_multiple:on_attack_frame_handle(server_list, group_list)
    local server_count = #server_list
    local group_count = #group_list
    self:log_assert(group_count >= server_count, '技能效果数量不匹配, 服务器数量 = ', server_count, ', 客户端数量 = ', group_count)
    
    ---@type skill_effect_group_data
    local last_group_data
    for i = 1, server_count do
        local server_data = server_list[i]
        local group_data = group_list[server_data.effect.effect_index + 1]
        local is_last_data = i == server_count

        -- 若指定索引的数据是空，尝试找到一个有效的配置
        if group_data ~= nil then
            last_group_data = group_data
        elseif last_group_data ~= nil then
            group_data = last_group_data
        else
            last_group_data = group_list[1]
            group_data = last_group_data
        end

        -- 生成技能效果行为
        battle_effect_utility.generate_multi_skill_effect_behavior(self, group_data.DataList, server_data, is_last_data, 0,
                server_count)
    end
end

return behavior_skill_effect_multiple