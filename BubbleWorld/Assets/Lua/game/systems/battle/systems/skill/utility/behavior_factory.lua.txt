---
--- Generated by wuhaijun
--- File name : behavior_factory.lua.txt
--- DateTime : 2021/09/29
--- Description : 
---

---@type battle_helper
local helper = battle_helper
local behavior_class_name = enum.battle.behavior_class_name
local object_pool = require 'framework/pool/object_pool'
local behavior_path = helper.path.battle_skill .. 'behavior/'

---@class behavior_factory
local behavior_factory = { cname = 'behavior_factory' }

---@type table<string, base_behavior>
local behavior_class_dict
---行为池字典
---@type table<string, object_pool> 
local behavior_pool_dict

---创建行为
local create_behavior = function(name)
    local behavior_script = behavior_class_dict[name]
    if behavior_script == nil then
        local path = behavior_path .. name
        behavior_script = require(path)

        if behavior_script ~= nil then
            behavior_class_dict[name] = behavior_script
        else
            helper.error_skill("未找到行为处理类, 路径 = ", path)
        end
    end
    
    return behavior_script.new()
end

---销毁行为
---@param behavior base_behavior
local dispose_behavior = function(behavior)
    behavior:dispose()
end

---销毁行为
---@param behavior base_behavior
local clear_behavior = function(behavior)
    behavior:clear()
end

---初始化
---@public
function behavior_factory.initialize()
    behavior_class_dict = {}
    behavior_pool_dict = {}

    for _, name in pairs(behavior_class_name) do
        create_behavior('behavior_' .. name)
    end
end

---销毁
---@public
function behavior_factory.dispose()
    for key, _ in pairs(behavior_class_dict) do
        behavior_class_dict[key] = nil
    end
    behavior_class_dict = nil

    for _, behavior_pool in pairs(behavior_pool_dict) do
        behavior_pool:dispose()
    end
    behavior_pool_dict = nil
end

---获取行为根据名字
---@public
---@param name string 行为配置名字
---@return base_behavior
function behavior_factory.get(name)
    local behavior_name = 'behavior_' .. name   

    ---@type object_pool
    local behavior_pool = behavior_pool_dict[behavior_name]
    if behavior_pool == nil then
        behavior_pool = object_pool.new(function() return create_behavior(behavior_name) end, dispose_behavior, clear_behavior)
        behavior_pool_dict[behavior_name] = behavior_pool
    end

    return behavior_pool:get('behavior_factory.skill_behavior')
end

---获取行为根据名字
---@public
---@param behavior base_behavior 行为
function behavior_factory.recycle(behavior)
    ---@type object_pool
    local behavior_pool = behavior_pool_dict[behavior.behavior_type]
    if behavior_pool ~= nil then
        behavior_pool:recycle(behavior)
    else
        helper.error_skill("Why doesn't a behavior pool exist, behavior_type = ", behavior.behavior_type)
    end
end

return behavior_factory