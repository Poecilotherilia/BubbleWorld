---
--- Generated by wuhaijun
--- File name : battle_visual_follow.lua.txt
--- DateTime : 2022/04/15
--- Description : 视觉追随系统
---

---@type battle_helper
local helper = battle_helper
local math = math
local atan2 = math.atan
local rad2Deg = math.deg(1)
local table_remove = table.remove

---@type object_pool
local object_pool = require 'framework/pool/object_pool'
---@type quaternion
local quaternion = require(helper.path.battle_utils ..  'quaternion')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class battle_visual_follow : reactive_system
local battle_visual_follow = class("battle_visual_follow", super)

---构造函数
---@protected
---@param context context
function battle_visual_follow:ctor(context)
    super.ctor(self, context)

    ---旋转实体ID列表
    ---@private
    ---@type number[]
    self.entity_id_list = {}
    ---旋转列表长度
    ---@private
    ---@type number
    self.entity_id_count = 0
    ---quaternion池
    ---@private
    ---@type object_pool
    self.quaternion_pool = object_pool.new(
            function() return quaternion.new() end,
            function(item) item:set() end,
            function(item) item:set() end)
end
---获取触发配置
---@protected
---@param context context
---@return collector
function battle_visual_follow:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.visual_follow))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function battle_visual_follow:filter(entity)
    return entity:has_component(battle_components.visual_follow) and 
            entity:has_component(battle_components.position) and
            entity:has_component(battle_components.rotation)
end

---执行(每帧)
---@protected
function battle_visual_follow:execute()
    super.execute(self)
    
    self:on_update()
end

---组件变化时执行
---@protected
---@param entity_list entity[]
---@param list_count number
function battle_visual_follow:executes(entity_list, list_count)
    for i = 1, list_count do
        self:on_entity_handle(entity_list[i])
    end
end

---实体处理
---@private
---@param entity entity
function battle_visual_follow:on_entity_handle(entity)
    ---@type vector3 当前旋转
    local cur_rotation = entity:get_component(battle_components.rotation).value
    local start_x = cur_rotation.x
    local start_y = cur_rotation.y
    local start_z = cur_rotation.z
    
    -- 计算结束欧拉角数据
    ---@type visual_follow_component_data
    local follow_comp = entity:get_component(battle_components.visual_follow)
    ---@type vector3
    local current_pos = entity:get_component(battle_components.position).value
    local dir_x = follow_comp.tar_x - current_pos.x
    local dir_y = follow_comp.tar_y - current_pos.y
    local dir_z = follow_comp.tar_z - current_pos.z

    local end_x, end_y, end_z
    if dir_x == 0 and dir_y == 0 and dir_z == 0 then
        -- 恢复自身旋转
        ---@type battle_unit_info
        local unit_info = entity:get_component(battle_components.unit_info).value
        end_x, end_y, end_z = unit_info.rotation.x, unit_info.rotation.y, unit_info.rotation.z
    else
        -- 看向方向
        end_x, end_y, end_z = start_x, self:calculate_y_axis_rotation(dir_x, dir_z), start_z
    end

    -- Y轴角度有变化，才可以执行旋转
    if start_y ~= end_y then
        ---@type quaternion 开始旋转四元数
        local start_qua = self.quaternion_pool:get("battle_visual_follow.on_entity_handle.start_qua")
        quaternion.euler(start_x, start_y, start_z, start_qua)
        
        ---@type vector3 结束旋转四元数
        local end_qua = self.quaternion_pool:get("battle_visual_follow.on_entity_handle.end_qua")
        quaternion.euler(end_x, end_y, end_z, end_qua)
        
        ---@type number 持续时间
        local duration = follow_comp.time

        -- 替换组件新数据
        entity:replace_component(battle_components.visual_follow_running, start_qua, end_qua, duration, 0)

        -- 添加待执行数据
        local id_count = self.entity_id_count
        id_count = id_count + 1
        self.entity_id_list[id_count] = entity.eid
        self.entity_id_count = id_count
    end
end

---每帧更新
---@private
function battle_visual_follow:on_update()
    local count = self.entity_id_count
    if count == 0 then return end
    
    local context = self.context
    local list = self.entity_id_list
    
    for i = count, 1, -1 do
        local entity = context:get_entity_by_primary_index(battle_components.eid, list[i])
        if self:try_to_look_at_target(entity) then
            table_remove(list, i)
            count = count - 1
        end
    end
    
    self.entity_id_count = count
end

---看向目标处理
---@public
---@param entity entity
---@return boolean
function battle_visual_follow:try_to_look_at_target(entity)
    if entity == nil then return true end

    ---@type visual_follow_running_component_data
    local visual_follow_running_comp = entity:get_component(battle_components.visual_follow_running)
    if visual_follow_running_comp == nil then return true end
    
    ---@type context
    local context = self.context    
    ---@type object_pool
    local quaternion_pool = self.quaternion_pool
    ---@type boolean
    local is_finished

    local start_qua = visual_follow_running_comp.start_qua
    local end_qua = visual_follow_running_comp.end_qua
    local duration_time = visual_follow_running_comp.duration
    ---@type quaternion
    local result = quaternion_pool:get('battle_visual_follow.on_look_at_update.result')
    
    local elapsed_time = visual_follow_running_comp.elapsed + context.controller:get_delta_time()
    visual_follow_running_comp.elapsed = elapsed_time
    is_finished = elapsed_time >= duration_time
    if not is_finished then
        quaternion.lerp(start_qua, end_qua, elapsed_time / duration_time, result)
    else
        result:copy(end_qua)

        quaternion_pool:recycle(start_qua)
        quaternion_pool:recycle(end_qua)
        entity:remove_component(battle_components.visual_follow_running)
    end

    -- 设置新数据
    ---@type vector3
    local current_rotation = entity:get_component(battle_components.rotation).value
    current_rotation:set(result:to_euler())
    entity:replace_component(battle_components.rotation, current_rotation)

    quaternion_pool:recycle(result)

     return is_finished
end

---计算Y轴旋转
---@private
---@param x number X方向分量
---@param z number Z方向分量
---@return number
function battle_visual_follow:calculate_y_axis_rotation(x, z)
    -- angle_y = arc tan(x/z)
    local angle_y = atan2(x, z) * rad2Deg
    if angle_y < 0 then angle_y = angle_y + 180 end
    if x < 0 then angle_y = angle_y + 180 end

    return angle_y
end

---卸载
---@public
function battle_visual_follow:tear_down()
    self.entity_id_list = nil
    self.entity_id_count = nil
    self.quaternion_pool:dispose()
    self.quaternion_pool = nil
    
    super.tear_down(self)
end

return battle_visual_follow