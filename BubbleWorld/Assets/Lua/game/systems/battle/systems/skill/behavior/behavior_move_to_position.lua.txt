---
--- Generated by wuhaijun
--- File name : behavior_move_to_position.lua.txt
--- DateTime : 2021/07/19
--- Description : 行为目标移动到某个位置，移动时长是行为持续时间。
---

---@type battle_helper
local helper = battle_helper
local math_acos = math.acos
local string_find = string.find
local string_format = string.format
local LuaUtil = cs.LuaUtil
local enum_battle = enum.battle
local camera_event_type = enum_battle.skill_camera_event_type
local behavior_target_type = enum_battle.behavior_target_type
local team_type_flag = enum_battle.team_type_flag

---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type curve_utility
local curve_utility = require(helper.path.battle_utils .. 'curve_utility')
---@type vector3
local vector3 = require(helper.path.battle_utils .. 'vector3')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type base_behavior
local super = require(helper.path.battle_skill .. 'behavior/base_behavior')

---@class behavior_move_to_position : base_behavior
local behavior_move_to_position = class("behavior_move_to_position", super)

---常量单位方向
---@type vector3
local unit_forward = vector3.new(0, 0, 1)

---构造函数
---@protected
function behavior_move_to_position:ctor()
    super.ctor(self, self.cname)

    ---原始位置
    ---@private
    ---@type vector3
    self.original_position = vector3.new()
    ---目标位置
    ---@private
    ---@type vector3
    self.target_position = vector3.new()
    ---目标方向
    ---@private
    ---@type vector3
    self.target_rotation = vector3.new()
    ---用于计算的临时变量
    ---@private
    ---@type vector3
    self.tmp_position = vector3.new()
    ---方向的类型
    ---@private
    ---@type number
    self.direction_type = nil
    ---方向的类型
    ---@private
    ---@type number
    self.speed_keyframes = nil
    ---方向的类型
    ---@private
    ---@type number
    self.path_mid = nil
    ---消耗时间
    ---@private
    ---@type number
    self.elapsed_time = nil
end

---行为开始，根据配置延迟后开始
---@protected
function behavior_move_to_position:on_start()
    ---@type move_to_position_data
    local data = self.behavior_data.behavior_args.MoveToPositionData
    self:log_assert(data ~= nil, "invalid MoveToPositionData")
    
    local context = self.context

    local target_unit_info = context.database:get_unit_info_by_uid(self.skill_data.target_uid)
    local target_id = data.TargetId
    local group_index = -1
    if string_find(target_id, '_team_group_position') then
        group_index = battle_utility.get_team_group_index(context, target_unit_info.team_type)
        if group_index ~= -1 then
            target_id = string_format("%s_%d", target_id, group_index)
        else
            target_id = behavior_target_type.UNIT_FRONT_POSITION
        end
    end
 
    -- 获取行为目标列表
    ---@type number[]
    local pos_info_list = self:get_behavior_targets(target_id, data.TargetArgs)
    local pos_info = pos_info_list[1]
    
    -- 根据转向类型判断是前进还是返回
    local event_type
    if data.DirectionType ~= 2 then
        -- 移动向目标时需要增加偏移
        local unit_info = context.database:get_unit_info_by_uid(self.skill_data.caster_uid)
        local ox, oy, oz = context.database:get_skill_offset_data(unit_info.role_res_mid, self.skill_data.skill_director_data.Id)
        ox, oy, oz = LuaUtil.RotationVector(unit_info.rotation.x, unit_info.rotation.y, unit_info.rotation.z, ox, oy, oz)
        self.target_position:set(pos_info[1] + ox, pos_info[2] + oy, pos_info[3] + oz)
        event_type = camera_event_type.BEGIN_MOVE
    else
        -- 返回时不需要增加偏移
        self.target_position:set(pos_info[1], pos_info[2], pos_info[3])
        event_type = camera_event_type.BEGIN_GO_BACK
    end
    self.target_rotation:set(pos_info[4], pos_info[5], pos_info[6])
    self.original_position:copy(self:get_current_entity():get_component(battle_components.position).value)
    
    ---@type number 移动时间
    local duration_time = self.behavior_data.duration_time
    
    -- 触发相机时间
    ---@type number 实体id
    local target_eid = battle_utility.get_team_group_eid(context, target_unit_info.team_type, group_index)
    if target_eid == nil then
        local target_entity = context:get_entity_by_primary_index(battle_components.uid, self.skill_data.target_uid)
        if target_entity ~= nil then
            target_eid = target_entity.eid
        end
    end
    self:set_camera_flow_handle(event_type, duration_time, target_eid, data.CameraLookAtTimeRatio)
    
    self.direction_type = data.DirectionType
    self.speed_keyframes = data.SpeedKeyframes
    self.elapsed_time = 0
    
    -- 移动持续时间是0是，表示瞬间移动
    if duration_time <= 0 then
        self:on_update()
    end
end

---更新
---@protected
function behavior_move_to_position:on_update()
    local duration_time = self.behavior_data.duration_time
    local elapsed_time = self.elapsed_time
    local new_pos = self.tmp_position

    new_pos:set()
    
    ---@type entity
    local entity = self:get_current_entity()
    ---@type vector3
    local cur_pos = entity:get_component(battle_components.position).value
    
    -- 移动
    elapsed_time = elapsed_time + self.context.controller:get_delta_time()
    self.elapsed_time = elapsed_time
    if elapsed_time < duration_time then
        local t = curve_utility.animation_curve_evaluate(self.speed_keyframes, elapsed_time / duration_time)
        vector3.lerp(self.original_position, self.target_position, t, new_pos)
    else
        new_pos:copy(self.target_position)
    end
    
    if self.direction_type == 0 then
        -- 0=移动时自动转向
        ---@type vector3
        local move_dir = self.context:get_free_vector3('behavior_move_to_position.move_dir')
        move_dir:copy(new_pos)
        move_dir = move_dir:sub(cur_pos)

        ---@type vector3
        local cur_rot = entity:get_component(battle_components.rotation).value
        if elapsed_time < duration_time then
            cur_rot.y = self:get_rotation_angle_y(move_dir:set_normalize())
        else
            cur_rot:copy(self.target_rotation)
        end
        entity:replace_component(battle_components.rotation, cur_rot)

        -- 回收table
        self.context:recycle_free_vector3(move_dir)
    elseif self.direction_type == 2 and elapsed_time >= duration_time then
        -- 2=结束时方向旋转和目标位置一致
        local cur_rot = entity:get_component(battle_components.rotation).value
        cur_rot:copy(self.target_rotation)
        entity:replace_component(battle_components.rotation, cur_rot)
    end
    
    -- 设置新位置
    cur_pos:copy(new_pos)
    entity:replace_component(battle_components.position, cur_pos)
end

---根据方向获取Y轴旋转角度
---@private
---@param direction vector3
---@return number
function behavior_move_to_position:get_rotation_angle_y(direction)
    local dot = vector3.dot(unit_forward, direction)
    local angle = math_acos(dot) * 57.295779513082
    if direction.x > 0 then
        return angle
    end
    return 360 - angle
end

---行为清理
---@protected
function behavior_move_to_position:on_clear()
    self.original_position:set()
    self.target_position:set()
    self.target_rotation:set()
    self.tmp_position:set()
    self.direction_type = nil
    self.speed_keyframes = nil
    self.path_mid = nil
    self.elapsed_time = nil
end

---行为销毁
---@protected
function behavior_move_to_position:on_dispose()
    self:on_clear()
    
    self.original_position = nil
    self.target_position = nil
    self.target_rotation = nil
    self.tmp_position = nil
end

return behavior_move_to_position