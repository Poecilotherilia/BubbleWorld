---
--- Generated by wuhaijun
--- File name : battle_skill_running.lua.txt
--- DateTime : 2021/07/13
--- Description : 技能运行
---

---@type battle_helper
local helper = battle_helper
local table_names = tables
local camera_event_type = enum.battle.skill_camera_event_type

---@type skill_data_utility
local skill_data_utility = require(helper.path.battle_skill .. 'utility/skill_data_utility')
---@type state_utility
local state_utility = require(helper.path.battle_fsm .. 'state_utility')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type skill_target_utility
local skill_target_utility = require(helper.path.battle_skill .. 'utility/skill_target_utility')
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class battle_skill_running : reactive_system
local battle_skill_running = class("battle_skill_running", super)

---构造函数
---@protected
---@param context context
function battle_skill_running:ctor(context)
    super.ctor(self, context)
end

---获取触发配置
---@protected
---@param context context
---@return collector
function battle_skill_running:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.skill_running))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function battle_skill_running:filter(entity)
    return entity:has_component(battle_components.skill_running)
end

---组件变化时执行
---@protected
---@param entity_list entity[]
---@param list_count number
function battle_skill_running:executes(entity_list, list_count)
    for i = 1, list_count do
        local entity = entity_list[i]

        -- 获取技能数据组件
        ---@type skill_running_component_data
        local comp = entity:get_component(battle_components.skill_running)
        self:on_skill_running(entity, comp.skill_data, comp.running_queue)
    end
end

---技能运行
---@private
---@param caster_entity entity 施法者实体
---@param skill_data battle_skill_data 技能数据
---@param running_queue queue skill_running_data技能要执行的行为
function battle_skill_running:on_skill_running(caster_entity, skill_data, running_queue)
    ---@type string
    local skill_mid = skill_data.mid
    ---@type number 要执行的行为数量
    local behavior_count = running_queue:count()
    ---@type string[] 当前激活行为列表
    local actived_list = self:get_current_actived_behaviors(caster_entity)
    ---@type number 激活的行为列表数量
    local actived_count = #actived_list

    if not helper.is_debug then
        helper.log_skill('skill is running, skill_mid = ', skill_mid, ', try to process template data, count = ', behavior_count,
                ', actived_count = ', actived_count)
    else
        helper.log_skill('skill is running, skill_mid = ', skill_mid, ', try to process template data, count = ', behavior_count,
                ', actived_names = ', table.concat(actived_list, ',')) 
    end

    local context = self.context
    
    ---@type boolean 是否执行失败
    local execute_failed = false
    -- 如果存在模板则执行
    if behavior_count > 0 then
        -- 多个行为数据时，并行执行
        while running_queue:count() > 0 do
            ---@type skill_running_data
            local running_data = running_queue:dequeue()
            if self:try_to_process_behavior_data(skill_data, running_data) then
                actived_count = actived_count + 1
            else
                execute_failed = true
            end
            context:recycle_free_table(running_data)
        end
        -- 清理id列表
        helper.clear_array(running_queue)

        helper.assert_skill(not execute_failed, "current skill has templates that failed to execute, skill_mid = ",
                skill_mid, ', try to execute the next skill!')
    end
    
    -- 技能执行完毕
    if actived_count <= 0 or execute_failed then
        helper.log_skill("current skill is finished, skill_mid = ", skill_mid, ', try the next one skill!')

        -- 技能结束，设置镜头结束状态
        self:set_camera_flow_finished_step(caster_entity, skill_data.target_uid)
        
        -- 移除组件
        caster_entity:remove_component(battle_components.skill_running)
        caster_entity:remove_component(battle_components.actived_behaviors)

        -- 回收table
        context:recycle_free_queue(running_queue)
        context:recycle_free_table(actived_list)

        -- 退出技能状态
        state_utility.exit_state(caster_entity, table_names.BTLState.ids.BTLState_Skill)
        -- 发送技能结束消息
        context.message:send_skill_cast_complete(skill_data.mid, skill_data.caster_uid, skill_data.target_uid)
        -- 触发下一个技能数据
        skill_data_utility.trigger_next_skill_handle(context, skill_data)
    end
end

---获取当前已激活行为数量
---@private
---@param caster entity
---@return string[]
function battle_skill_running:get_current_actived_behaviors(caster)
    ---@type string[]
    local name_list
    ---@type { value:string[] }
    local comp = caster:get_component(battle_components.actived_behaviors)
    if comp ~= nil then
        name_list = comp.value
    else
        name_list = self.context:get_free_table('skill_actived_behaviors.value')
        caster:replace_component(battle_components.actived_behaviors, name_list)
    end

    return name_list
end

---尝试处理行为数据
---@private
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@return boolean
function battle_skill_running:try_to_process_behavior_data(skill_data, running_data)
    ---@type boolean 是否执行成功
    local is_succeed = true
    
    -- 根据behavior_id获取行为配置数据
    ---@type skill_behavior_config_data
    local config_data = skill_data.skill_director_data.Map[running_data.behavior_id]
    if config_data == nil then
        is_succeed = false
        helper.error_skill("not found skill_behavior_data, behavior_id = ", running_data.behavior_id)
        return is_succeed
    end

    -- 根据行为目标类型获取目标实体，用于执行行为逻辑
    ---@type string
    local target_mid = config_data.TargetId
    ---@type entity[]
    local target_entity_list = self.context:get_free_table('try_to_process_behavior_data.target_entity_list')
    skill_target_utility.get_targets(target_mid, self.context, skill_data, running_data, nil, target_entity_list)
    
    ---@type number 单位目标数据量
    local target_count = #target_entity_list

    helper.log_skill("try to execute behavior, name = ", config_data.class_name, ", behavior_id = ", running_data.behavior_id,
            ", skill_data.mid = ", skill_data.mid, ', target_mid = ', target_mid, ', target_count = ', target_count)
    
    -- 设置技能行为组件数据
    for i = 1, target_count do
        self:set_skill_behavior_component_data(target_entity_list[i], skill_data, running_data)
    end

    -- 回收table
    self.context:recycle_free_table(target_entity_list)
    
    return is_succeed
end

---设置技能行为组件数据
---@private
---@param unit_entity entity 单位实体
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
function battle_skill_running:set_skill_behavior_component_data(unit_entity, skill_data, running_data)
    ---@type queue skill_running_data
    local running_queue
    ---@type skill_running_component_data
    local comp = unit_entity:get_component(battle_components.skill_behavior)
    if comp ~= nil then
        running_queue = comp.running_queue
    else
        running_queue = self.context:get_free_queue('behavior_component.running_queue')
    end

    -- 可能同时执行多个行为，以数组的形式保存模板数据
    ---@type skill_running_data
    local new_running_data = self.context:get_free_table('battle_skill_running.set_skill_behavior_component_data')
    for key, value in pairs(running_data) do
        new_running_data[key] = value
    end
    running_queue:enqueue(new_running_data)
    
    -- 组件需要保证唯一性，此处实用模板数据列表的，防止模板数据被覆盖
    unit_entity:replace_component(battle_components.skill_behavior, skill_data, running_queue)
end

---设置镜头结束流程
---@protected
---@param caster_entity entity 施法者实体
---@param target_uid ident
function battle_skill_running:set_camera_flow_finished_step(caster_entity, target_uid)
    local target_entity = self.context:get_entity_by_primary_index(battle_components.uid, target_uid)
    if target_entity ~= nil then
        ---@type ident 施法者UID
        local caster_uid = caster_entity:get_component(battle_components.uid).value
        battle_utility.set_skill_camera_following_flow(self.context, caster_uid, target_entity.eid, camera_event_type.FINISHED_SKILL)
    end
end

return battle_skill_running