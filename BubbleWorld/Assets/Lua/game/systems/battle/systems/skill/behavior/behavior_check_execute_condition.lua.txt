---
--- Generated by wuhaijun
--- File name : behavior_check_execute_condition.lua.txt
--- DateTime : 2021/11/17
--- Description : 判断条件，当条件成立时执行指定行为，并跳过后续行为
---

---@type battle_helper
local helper = battle_helper
local behavior_target_type = enum.battle.behavior_target_type

---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type base_behavior
local super = require(helper.path.battle_skill .. 'behavior/base_behavior')

---@class behavior_check_execute_condition : base_behavior
local behavior_check_execute_condition = class("behavior_check_execute_condition", super)

---构造函数
---@protected
function behavior_check_execute_condition:ctor()
    super.ctor(self, self.cname)
    
    ---@type number[]
    self.follow_up_ids = nil
end

---行为开始，根据配置延迟后开始
---@protected
function behavior_check_execute_condition:on_start()
    ---@type check_execute_condition_data
    local data = self.behavior_data.behavior_args.CheckExecuteConditionData
    self:log_assert(data ~= nil, "invalid CheckExecuteConditionData")
    
    local result = false
    if data.Type == 0 or data.Type == 4 or data.Type == 5 then
        -- 0=检测自定义条件
        -- 4=检测是否执行转身行为
        -- 5=检测是否生成子弹
        result = data.CustomCondition
    elseif data.Type == 1 then
        -- 检测是否跳过必杀
        result = self:check_skip_ultskill_casting()
    elseif data.Type == 2 then
        -- 检测技能目标是否是敌方
        result = self:check_skill_target_is_enemy()
    elseif data.Type == 3 then
        -- 3=检测是否执行必杀移动
        result = data.CustomCondition
    else
        self:log_error("new condition type is not processed, data.Type = ", data.Type)
    end

    self:log_info('the check result is = ', result)
    if result then
        self.follow_up_ids = data.TriggerIdList
    end
end

---检测是否跳过必杀施法
---@private
---@return boolean
function behavior_check_execute_condition:check_skip_ultskill_casting()
    return self.context.database:get_is_jump_big_skill_ue(self.skill_data.caster_uid)
end

---检测技能目标是否是敌方
---@private
---@return boolean
function behavior_check_execute_condition:check_skill_target_is_enemy()
    -- 获取行为目标列表
    ---@type entity[]
    local target_list = self:get_behavior_targets(behavior_target_type.SKILL_TARGET)
    local target_entity = target_list[1]

    ---@type battle_unit_info
    local target_unit_info = target_entity:get_component(battle_components.unit_info).value
    
    local current_entity = self:get_current_entity()
    ---@type battle_unit_info
    local current_unit_info = current_entity:get_component(battle_components.unit_info).value
    
    return target_unit_info.team_type ~= current_unit_info.team_type
end

---设置后续行为
---@protected
function behavior_check_execute_condition:set_follow_up_behaviors()
    if self.follow_up_ids ~= nil and #self.follow_up_ids > 0 then
        self:execute_other_behavior_handle(self.behavior_data.run_data.dynamic_eid, self.follow_up_ids)
    else
        super.set_follow_up_behaviors(self)
    end
end

---清理行为
---@protected
function behavior_check_execute_condition:on_clear()
    self.follow_up_ids = nil
end

---销毁行为
---@protected
function behavior_check_execute_condition:on_dispose()
    self:on_clear()
end

return behavior_check_execute_condition