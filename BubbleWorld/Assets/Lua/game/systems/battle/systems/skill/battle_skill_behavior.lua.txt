---
--- Generated by wuhaijun
--- File name : battle_skill_behavior.lua.txt
--- DateTime : 2021/09/29
--- Description : 技能行为处理
---

---@type battle_helper
local helper = battle_helper
local table_remove = table.remove

---@type object_pool
local object_pool = require 'framework/pool/object_pool'
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type behavior_factory
local behavior_factory = require(helper.path.battle_skill .. 'utility/behavior_factory')

---@class battle_skill_behavior
local battle_skill_behavior = class("battle_skill_behavior")

---构造函数
---@protected
---@param context context
function battle_skill_behavior:ctor(context)
    self.context = context

    ---获取新行为数据回调
    ---@private
    self.get_behavior_data_callback = function() return self:get_new_behavior_data() end
    ---生成行为回调
    ---@private
    self.generate_behavior_callback = function(...) self:on_generate_behavior_handle(...) end
    ---行为结束回调
    ---@private
    self.behavior_finished_callback = function(data) self:on_behavior_finished_handle(data) end

    ---行为列表
    ---@private
    ---@type base_behavior[]
    self.behavior_update_list = nil
    ---待移除的行为bid列表
    ---@private
    ---@type number[]
    self.behavior_removed_list = nil
    ---id计数器
    ---@private
    ---@type number 
    self.behavior_id_counter = nil

    ---@private
    ---@type entity[]
    self.entity_cache_list = nil
    ---@private
    ---@type collector
    self.behavior_collector = nil
    
    ---@type object_pool
    self.behavior_data_pool = nil
end

---初始化
---@public
function battle_skill_behavior:initialize()
    self.behavior_update_list = {}
    self.behavior_removed_list = {}
    self.behavior_id_counter = 0

    self.entity_cache_list = {}
    self.behavior_collector = self.context:get_collector(matchers.all(battle_components.skill_behavior))

    behavior_factory.initialize()

    self.behavior_data_pool = object_pool.new
    (
        function() return {} end, 
        function(item) helper.clear(item) end, 
        function(item) helper.clear(item) end
    )
end

---执行(每帧)
---@public
function battle_skill_behavior:execute()
    self:on_update_collector_handle()
    self:on_update_behavior_handle()
    self:on_remove_behavior_handle()
end

---添加或更新收集器处理
---@private
function battle_skill_behavior:on_update_collector_handle()
    if not self.behavior_collector:has_entity() then return end

    local list, count = self.behavior_collector:get_entity_list(self.entity_cache_list)
    self.behavior_collector:clear_entity()
    
    for i = 1, count do
        local entity = list[i]

        ---@type skill_running_component_data
        local behavior_comp = entity:get_component(battle_components.skill_behavior)
        -- 获取数据
        ---@type battle_skill_data
        local skill_data = behavior_comp.skill_data
        ---@type queue skill_running_data
        local running_queue = behavior_comp.running_queue

        while(running_queue:count() > 0) do
            local running_data = running_queue:dequeue()
            running_data.current_eid = entity.eid

            ---@type skill_behavior_data
            local behavior_data = self:generate_behavior_data(skill_data, running_data)
            -- 生成行为
            self:on_generate_behavior_handle(skill_data, behavior_data)
        end

        -- 回收列表
        self.context:recycle_free_queue(running_queue)
        -- 移除组件
        entity:remove_component(battle_components.skill_behavior)
    end
end

---行为更新
---@private
function battle_skill_behavior:on_update_behavior_handle()
    local list = self.behavior_update_list
    for i = 1, #list do
        list[i]:behavior_update()
    end
end

---移除行为处理
---@private
function battle_skill_behavior:on_remove_behavior_handle()
    local update_list = self.behavior_update_list
    local remove_list = self.behavior_removed_list
    
    for i = 1, #remove_list do
        local bid = remove_list[i]
        for j = 1, #update_list do
            if bid == update_list[j]:get_bid() then
                local behavior = table_remove(update_list, j)
                behavior_factory.recycle(behavior)
                break
            end
        end
    end
    
    helper.clear_array(remove_list)
end

---生成行为处理
---@private
---@param skill_data battle_skill_data 技能数据
---@param behavior_data skill_behavior_data 行为数据
---@return number 行为id
function battle_skill_behavior:on_generate_behavior_handle(skill_data, behavior_data)
    local behavior = behavior_factory.get(behavior_data.class_name)
    self.behavior_update_list[#self.behavior_update_list + 1] = behavior
    behavior:init_data(self.context, skill_data, behavior_data)
    
    return behavior:get_bid()
end

---生成行为数据
---@private
---@param skill_data battle_skill_data
---@param running_data skill_running_data
---@return skill_behavior_data
function battle_skill_behavior:generate_behavior_data(skill_data, running_data)
    helper.assert_skill(running_data ~= nil, "Invalid skill_running_data")
    
    -- 获取行为配置数据
    ---@type skill_behavior_config_data
    local config_data = skill_data.skill_director_data.Map[running_data.behavior_id]
    
    ---@type skill_behavior_data    
    local behavior_data = self:get_new_behavior_data()

    behavior_data.run_data = running_data
    behavior_data.cid = config_data.Id
    behavior_data.delay_time = config_data.Delay
    behavior_data.duration_time = config_data.Duration
    behavior_data.class_name = config_data.ClassName
    behavior_data.behavior_args = config_data.BehaviorArgs
    behavior_data.follow_up_ids = config_data.FollowupIdList
    
    return behavior_data
end

---获取新的行为数据
---@private
---@return skill_behavior_data
function battle_skill_behavior:get_new_behavior_data()
    ---@type skill_behavior_data
    local behavior_data = self.behavior_data_pool:get('battle_skill_behavior.get_new_behavior_data')

    behavior_data.bid = self:get_new_bid()
    behavior_data.get_behavior_data_callback = self.get_behavior_data_callback
    behavior_data.generate_behavior_callback = self.generate_behavior_callback
    behavior_data.behavior_finished_callback = self.behavior_finished_callback
    
    return behavior_data
end

---行为结束处理
---@private
---@param data skill_behavior_data
function battle_skill_behavior:on_behavior_finished_handle(data)
    if data == nil then return end
    
    -- 将uid添加到待删除列表中
    self.behavior_removed_list[#self.behavior_removed_list + 1] = data.bid

    -- 回收内部创建的参数数据
    if data.is_internal and data.behavior_args ~= nil then
        self.context:recycle_free_table(data.behavior_args)
        data.behavior_args = nil
        data.is_internal = nil
    end
    
    -- 回收运行数据
    self.context:recycle_free_table(data.run_data)
    
    -- 回收behavior_data
    self.behavior_data_pool:recycle(data)
end

---获取行为唯一id
---@private
---@return number
function battle_skill_behavior:get_new_bid()
    local bid_counter = self.behavior_id_counter + 1
    if bid_counter > 10000000 then
        bid_counter = 1
    end
    self.behavior_id_counter = bid_counter
    
    return bid_counter
end

---卸载
---@protected
function battle_skill_behavior:tear_down()
    self.context:destroy_collector(self.behavior_collector)
    self.behavior_collector = nil  
    helper.clear_array(self.entity_cache_list)
    self.entity_cache_list = nil
    
    -- 行为回收逻辑
    local update_list = self.behavior_update_list
    for i = 1, #update_list do
        update_list[i]:set_behavior_finish()
    end
    self:on_remove_behavior_handle()
    self.behavior_update_list = nil
    self.behavior_removed_list = nil

    self.behavior_data_pool:dispose()
    self.behavior_data_pool = nil

    behavior_factory.dispose()

    self.behavior_finished_callback = nil
    self.generate_behavior_callback = nil
    self.get_behavior_data_callback = nil

    self.context = nil
end

return battle_skill_behavior