---
--- Generated by wuhaijun
--- File name : behavior_generate_bullet_multiple.lua.txt
--- DateTime : 2022/01/28
--- Description : 
---

---@type battle_helper
local helper = battle_helper
local enum_battle = enum.battle
local behavior_class_name = enum_battle.behavior_class_name
local behavior_target_type = enum_battle.behavior_target_type
local table_deep_copy = table.deep_copy

---@type battle_effect_utility
local battle_effect_utility = require(helper.path.battle_skill .. 'utility/battle_effect_utility')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type base_behavior
local super = require(helper.path.battle_skill .. 'behavior/base_behavior')

---@class behavior_generate_bullet_multiple : base_behavior
local behavior_generate_bullet_multiple = class("behavior_generate_bullet_multiple", super)

---构造函数
---@protected
function behavior_generate_bullet_multiple:ctor()
    super.ctor(self, self.cname)
end

---行为开始，根据配置延迟后开始
---@protected
function behavior_generate_bullet_multiple:on_start()
    ---@type generate_bullet_multiple_data
    local data = self.behavior_data.behavior_args.GenerateBulletMultipleData
    self:log_assert(data ~= nil, "invalid GenerateBulletMultipleData")

    local context = self.context
    ---@type battle_effect_data[] 效果数据列表
    local server_list = self.skill_data.effect_list

    -- 表演子弹不依赖于服务器技能效果数据，单独处理，可以理解为串行
    ---@type generate_bullet_group_data[]
    local hurt_bullet_group_list = self:on_generate_perform_bullet(data.DataList, server_list)
    
    -- 根据执行模式执行效果
    if data.ExecutionMode == 0 then
        ---@type table<ident, battle_effect_data[]>
        local effect_data_dict = context:get_free_table("behavior_generate_bullet_multiple.effect_data_dict")

        -- 重组技能效果数据，以技能目标为key
        for i = 1, #server_list do
            local effect_data = server_list[i]
            local tmp_effect_list = effect_data_dict[effect_data.effect.target_id]
            if tmp_effect_list == nil then
                tmp_effect_list = context:get_free_table("behavior_generate_bullet_multiple.tmp_effect_list")
                effect_data_dict[effect_data.effect.target_id] = tmp_effect_list
            end
            tmp_effect_list[#tmp_effect_list +1] = effect_data
        end

        -- 0=并行执行，以技能目标为组，每组执行一遍所有子弹组列表数据
        for _, server_data_list in pairs(effect_data_dict) do
            self:on_generate_bullet_group_handle(server_data_list, hurt_bullet_group_list)
            -- 回收容器
            context:recycle_free_table(server_data_list)
        end
        
        -- 回收容器
        context:recycle_free_table(effect_data_dict)

    elseif data.ExecutionMode == 1 then
        -- 1=串行执行，遍历服务器技能效果列表和子弹组列表数据，一一匹配执行
        self:on_generate_bullet_group_handle(server_list, hurt_bullet_group_list)

    else
        self:log_error('new ExecutionMode not processed, mode1 = ', data.ExecutionMode)
    end

    -- 回收容器
    context:recycle_free_table(hurt_bullet_group_list)
end

---生成表演子弹
---@private
---@param group_list generate_bullet_group_data[] 子弹组数据
---@param server_list battle_effect_data[] 服务器效果数据
---@return generate_bullet_group_data[]
function behavior_generate_bullet_multiple:on_generate_perform_bullet(group_list, server_list)
    ---@type generate_bullet_group_data[]
    local hurt_bullet_group_list = self.context:get_free_table("on_generate_perform_bullet.hurt_bullet_group_list")
    
    for i = 1, #group_list do
        local group_data = group_list[i]
        if group_data.SkillEffectIndex <= 0 then
            -- 查找上一个服务器效果数据
            local pre_server_data
            for j = i - 1, 1, -1 do
                local tmp_group = group_list[j]
                if tmp_group ~= nil and tmp_group.SkillEffectIndex > 0 then
                    pre_server_data = server_list[tmp_group.SkillEffectIndex]
                    break
                end
            end
            if pre_server_data == nil then
                pre_server_data = server_list[1]
            end
            
            -- 生成表演子弹组
            for j = 1, #group_data.DataList do
                self:on_generate_bullet_behavior(group_data.DataList[j], pre_server_data)
            end
        else
            -- 记录消耗技能效果的子弹组
            hurt_bullet_group_list[#hurt_bullet_group_list + 1] = group_data
        end
    end
    
    return hurt_bullet_group_list
end

---遍历客户端子弹配置，挨个执行子弹行为
---@private
---@param server_list battle_effect_data[] 服务器效果数据
---@param group_list generate_bullet_group_data[] 子弹组数据
function behavior_generate_bullet_multiple:on_generate_bullet_group_handle(server_list, group_list)
    ---@type number 服务器技能效果数据数量
    local server_count = #server_list
    ---@type number 客户单子弹组数据数量
    local group_count = #group_list
    self:log_assert(group_count >= server_count, '子弹组数量错误，服务器效果数量 = ', server_count, ', 配置数量 = ', group_count)
    
    ---@type generate_bullet_group_data 最后一个有效技能组数据
    local last_group_data
    for i = 1, server_count do
        local server_data = server_list[i]
        local group_data = group_list[server_data.effect.effect_index + 1]
        local is_last_data = i == server_count

        -- 若指定索引的数据是空，尝试找到一个有效的配置
        if group_data ~= nil then
            last_group_data = group_data
        elseif last_group_data ~= nil then
            group_data = last_group_data
        else
            last_group_data = group_list[1]
            group_data = last_group_data
        end
        
        -- 获取指定索引的服务器技能效果数据
        local pre_server_data = self:get_valid_server_data(server_list[group_data.SkillEffectIndex - 1], server_data)
        local next_server_data = self:get_valid_server_data(server_list[group_data.SkillEffectIndex + 1], server_data)
        self:log_assert(pre_server_data ~= nil, "pre_server_data was invalid, index = ", i)
        self:log_assert(next_server_data ~= nil, "next_server_data was invalid, index = ", i)

        ---@type battle_effect_data
        local tmp_data = battle_effect_utility.get_cleanly_skill_effect_data(table_deep_copy(server_data))
        
        -- 遍历子弹数据执行子弹行为
        local bullet_count = #group_data.DataList
        for j = 1, bullet_count do
            local bullet_data = group_data.DataList[j]
            
            -- 生成子弹行为
            self:on_generate_bullet_behavior(bullet_data, pre_server_data, next_server_data)
            
            -- 分割技能效果
            local hp_config = bullet_data.SkillEffectHpData
            local is_first = j == 1
            local is_end = j == bullet_count
            ---@type battle_effect_data
            local part_data = battle_effect_utility.split_skill_effect_data(server_data, hp_config, is_first, is_end, 
                    bullet_count > 1, tmp_data)
            
            -- 生成技能效果行为
            if bullet_data.SkillEffectGroupData ~= nil then
                local client_list = bullet_data.SkillEffectGroupData.DataList
                battle_effect_utility.generate_multi_skill_effect_behavior(self, client_list, part_data, is_last_data, 
                        bullet_data.DelayTime, bullet_count)
            end
        end
    end
end

---执行子弹行为
---@private
---@param bullet_data generate_bullet_data
---@param pre_server_data battle_effect_data 前一个服务器技能效果数据
---@param next_server_data battle_effect_data 下一个服务器技能效果数据
function behavior_generate_bullet_multiple:on_generate_bullet_behavior(bullet_data, pre_server_data, next_server_data)
    ---@type number 子弹出生实体id
    local born_entity_eid = self:get_effect_target_eid(bullet_data.BornInfo.UnitType, next_server_data, pre_server_data)
    ---@type number 子弹目标实体id
    local target_entity_eid = self:get_effect_target_eid(bullet_data.TargetInfo.UnitType, next_server_data, pre_server_data)
    
    -- 未找到子弹出生点
    if born_entity_eid == nil then return end

    -- 执行子弹行为
    local delay = bullet_data.DelayTime -- 延迟执行时间
    local duration = delay + bullet_data.DurationTime  -- 持续时间
    
    ---@type skill_behavior_config_args
    local config_args = self.context:get_free_table("behavior_generate_bullet_multiple.bullet_behavior.config_args")
    config_args.GenerateBulletData = bullet_data

    -- 生成子弹行为
    self:generate_behavior(delay, duration, behavior_class_name.GENERATE_BULLET, config_args, born_entity_eid, nil, target_entity_eid)
end

---获取技能效果目标实体id
---@private
---@param target_type behavior_target_type | string 
---@param next_server_data battle_effect_data
---@param pre_server_data battle_effect_data
---@return number
function behavior_generate_bullet_multiple:get_effect_target_eid(target_type, next_server_data, pre_server_data)
    ---@type entity
    local target_entity
    
    if target_type == behavior_target_type.NEXT_BULLET_TARGET then
        if next_server_data ~= nil then
            target_entity = self.context:get_entity_by_primary_index(battle_components.uid, next_server_data.effect.target_id)
        end
        
    elseif target_type == behavior_target_type.PRE_BULLET_TARGET then
        if pre_server_data ~= nil then
            target_entity = self.context:get_entity_by_primary_index(battle_components.uid, pre_server_data.effect.target_id)
        end
        
    else
        ---@type entity[]
        local born_entity_list = self:get_behavior_targets(target_type)
        if born_entity_list[1] ~= nil then
            target_entity = born_entity_list[1]
        end
    end

    local eid = 0
    if target_entity ~= nil then
        eid = target_entity.eid
    else
        self:log_error('not found target entity, target_type = ', target_type, '\nnext_server_data = ', next_server_data, '\npre_server_data = ', pre_server_data)
    end

    return eid
end

---获取有效的技能效果数据
---@param target battle_effect_data
---@param default battle_effect_data
---@return battle_effect_data
function behavior_generate_bullet_multiple:get_valid_server_data(target, default)
    if target ~= nil then
        return target
    else
        return default
    end
end

return behavior_generate_bullet_multiple