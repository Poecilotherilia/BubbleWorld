---
--- Generated by wuhaijun
--- File name : battle_skill_camera.lua.txt
--- DateTime : 2022/02/23
--- Description : 
---

---@type battle_helper
local helper = battle_helper
local data_mgr = data
local table_names = tables
local camera_mgr = camera_manager
local math_ceil = math.ceil
local SetAnimationCurve = cs.LuaUtil.SetAnimationCurve
local DoLookAtTarget = cs.TweenUtil.DoLookAtTarget
local UpdateTypeManual = cs.UpdateType.Manual
---@type enum_battle
local enum_battle = enum.battle
---@type enum_common
local enum_common = enum.common
local camera_skill_type = enum_battle.skill_camera_skill_type
local camera_flow_type = enum_battle.skill_camera_flow_type
local camera_event_type = enum_battle.skill_camera_event_type
local team_type_flag = enum_battle.team_type_flag
local battle_camera_type = enum_battle.battle_camera_type
local camera_blend_type = enum_common.camera_blend_type
local role_attach_point_type = enum_common.role_attach_point_type
local role_body_type = enum_common.role_body_type
local is_nil_or_empty = string.is_nil_or_empty

---@type battle_constant
local battle_constant = require(helper.path.battle_utils .. 'battle_constant')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class battle_skill_camera : reactive_system
local battle_skill_camera = class("battle_skill_camera", super)

---@type UnityEngine.AnimationCurve
local animation_curve = cs.AnimationCurve()

---构造函数
---@protected
---@param context context
function battle_skill_camera:ctor(context)
    super.ctor(self, context)

    ---技能前摇镜头执行完毕
    ---@private
    ---@type fun()
    self.show_wind_up_camera_action_finished_callback = function(...) self:show_wind_up_camera_action_finished(...) end

    ---上一次使用的相机id
    ---@private
    ---@type number
    self.pre_v_camera_id = nil

    ---通用的混合模式
    ---@private
    ---@type camera_blend_type
    self.blend_type = camera_blend_type.Custom

    ---默认相机融合时间
    ---@private
    ---@type number
    self.default_blend_time = nil
end

---初始化
---@private
function battle_skill_camera:initialize()
    self.default_blend_time = self.context.database:get_setting_const().KW_SKILL_V_CAMERA_BLEND_TIME
end

---获取触发配置
---@protected
---@param context context
---@return collector
function battle_skill_camera:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.skill_camera))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function battle_skill_camera:filter(entity)
    return entity:has_component(battle_components.skill_camera)
end

---组件变化时执行
---@protected
---@param entity_list entity[]
---@param list_count number
function battle_skill_camera:executes(entity_list, list_count)
    for i = 1, list_count do
        ---@type entity 施法者实体
        local caster_entity = entity_list[i]
        ---@type skill_camera_component_data 镜头组件数据
        local component_data = entity_list[i]:get_component(battle_components.skill_camera).value

        if component_data.skill_type == camera_skill_type.ATTACK then
            -- 普攻技能流程
            self:attack_skill_flow_handle(component_data, caster_entity)
        elseif component_data.skill_type == camera_skill_type.ADV_SKILL then
            -- 进阶技能流程
            self:advance_skill_flow_handle(component_data, caster_entity)
        elseif component_data.skill_type == camera_skill_type.UTL_SKILL then
            -- 必杀技能流程
            self:unique_skill_flow_handle(component_data, caster_entity)
        elseif component_data.skill_type == camera_skill_type.BUFF then
            -- Buff流程
            self:buff_camera_flow_handle(component_data, caster_entity)
        elseif component_data.skill_type == camera_skill_type.OTHER then
            -- 其他镜头流程
            self:other_camera_flow_handle(component_data, caster_entity)
        else
            helper.error_skill("Skill type not processed, type = ", helper.get_enum_name(camera_skill_type, component_data.skill_type))
        end
    end
end

---普攻技能镜头流程处理
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:attack_skill_flow_handle(component_data, caster_entity)
    self:common_camera_flow_handle(component_data, caster_entity)
end

---进阶技能镜头流程处理
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:advance_skill_flow_handle(component_data, caster_entity)
    self:show_skill_wind_up_camera_action(component_data, caster_entity)
end

---必杀技能镜头流程处理
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:unique_skill_flow_handle(component_data, caster_entity)
    ---@type battle_unit_info 施法者单位信息
    local caster_unit_info = caster_entity:get_component(battle_components.unit_info).value
    if caster_unit_info.team_type == team_type_flag.OWN then
        if component_data.event_type == camera_event_type.BEGIN_SKILL then
            -- 1. 必杀前摇端阶段，镜头推进到施法者 远程观察位
            self:set_remote_camera_viewpoint(caster_entity, component_data.blend_time)
        elseif component_data.event_type == camera_event_type.BEGIN_MOVE then
            -- 2. 单位开始移动时，镜头移动至受击者 近战观察位 镜头绑定（使用施法者移动时间）
            self:set_melee_camera_viewpoint(component_data.target_eid, component_data.blend_time, true)
        elseif component_data.event_type == camera_event_type.BEGIN_GO_BACK then
            if component_data.flow_type == camera_flow_type.REMOTE_SINGLE_ATTACK or
                    component_data.flow_type == camera_flow_type.REMOTE_GROUP_ATTACK then
                -- 3. 单位开始返回时，镜头移动 战场观察位（配置时间）
                self:set_battlefield_camera_viewpoint(self.default_blend_time)
            else
                -- 3. 单位开始返回时，镜头移动至施法者 远程观察位（使用施法者移动时间）
                self:set_remote_camera_viewpoint(caster_entity, component_data.blend_time)
            end
        end
    elseif caster_unit_info.team_type == team_type_flag.ENEMY then
        if component_data.event_type == camera_event_type.BEGIN_SKILL then
            -- 1. 必杀前摇端阶段，镜头推进到施法者 近战观察位
            self:set_melee_camera_viewpoint(caster_entity.eid, component_data.blend_time)
        elseif component_data.event_type == camera_event_type.BEGIN_MOVE then
            -- 2. 单位开始移动时，镜头移动至受击者 受击观察位 镜头绑定（使用施法者移动时间）
            self:set_hit_camera_viewpoint(component_data.target_eid, component_data.blend_time)
        elseif component_data.event_type == camera_event_type.BEGIN_GO_BACK then
            -- 技能目标是否是自身
            if caster_entity.eid ~= component_data.target_eid then
                if component_data.flow_type == camera_flow_type.REMOTE_SINGLE_ATTACK or
                        component_data.flow_type == camera_flow_type.MELEE_SINGLE_ATTACK then
                    -- 3. 技能为近战单体，镜头推进到受击者 受击位观察位
                    self:set_hit_camera_viewpoint(component_data.target_eid, component_data.blend_time)
                else
                    -- 3. 单位开始返回时，镜头移动 战场观察位（配置时间）
                    self:set_battlefield_camera_viewpoint(self.default_blend_time)
                end
            else
                -- 召唤技能流程
                if component_data.flow_type == camera_flow_type.SUMMON_UNIT_SKILL then
                    -- 3. 召唤技能，则摄像机回归公共观察位
                    self:set_battlefield_camera_viewpoint(self.default_blend_time)
                else
                    -- 3. 非召唤技能，镜头推进到施法者 近战攻击观察位
                    self:set_melee_camera_viewpoint(caster_entity.eid, component_data.blend_time)
                end
            end
        end
    end
end

---buff镜头流程处理
---@private
---@param _ skill_camera_component_data 相机组件数据
---@param unit_entity entity buff表现单位实体
function battle_skill_camera:buff_camera_flow_handle(_, unit_entity)
    ---@type battle_unit_info 单位信息
    local unit_info = unit_entity:get_component(battle_components.unit_info).value
    if unit_info.team_type == team_type_flag.OWN then
        -- 1. 我方单位，镜头移动到 远程施法观相机察位
        self:set_remote_camera_viewpoint(unit_entity, self.default_blend_time)
    else
        -- 1. 敌方单位，镜头移动到 受击相机观察点位
        self:set_hit_camera_viewpoint(unit_entity.eid, self.default_blend_time)
    end
end

---其他镜头流程处理
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:other_camera_flow_handle(component_data, caster_entity)
    if component_data.event_type == camera_event_type.PREPARE_SKILL then
        if component_data.action_name == battle_constant.CAMERA_CAMERA_UP_EVENT then
            -- 单位行动时，镜头设置到战场观察位（升起）
            self:set_battlefield_camera_viewpoint(component_data.blend_time)
        elseif component_data.action_name == battle_constant.CAMERA_CAMERA_DOWN_EVENT then
            -- 单位行动时，镜头设置到 远程施法观察位（落下）
            self:set_remote_camera_viewpoint_by_eid(caster_entity.eid, component_data.blend_time)
        end
    end
end

---显示技能前摇镜头动画
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:show_skill_wind_up_camera_action(component_data, caster_entity)
    if component_data.event_type == camera_event_type.BEGIN_SKILL then
        ---@type battle_unit_info 施法者单位信息
        local caster_unit_info = caster_entity:get_component(battle_components.unit_info).value
        if caster_unit_info.team_type == team_type_flag.OWN then
            -- 我方释放技能时，技能前摇阶段角色与摄像机有前摇动作表现，摄像机瞬移播放镜头动画位置
            ---@type string 动画名字
            local action_name = component_data.action_name
            local blend_time = component_data.blend_time
            if action_name ~= nil and action_name ~= 'None' then
                ---@type RoleRes
                local acton_mid = data_mgr.get(table_names.RoleRes.name, caster_unit_info.role_res_mid, action_name)
                if not is_nil_or_empty(acton_mid) then
                    local camera_id = battle_utility.show_camera_animation(self.context, caster_unit_info.uid, acton_mid, nil,
                            camera_blend_type.Cut, 0, false)
                    self.context.controller:add_timer(blend_time, self.show_wind_up_camera_action_finished_callback, caster_entity.eid, component_data, camera_id)
                else
                    helper.error("not found skill camera actonId in RoleRes, action_name = ", action_name, ", RoleResId = ",
                            caster_unit_info.role_res_mid)
                    self.show_wind_up_camera_action_finished_callback(caster_entity.eid, component_data, -1)
                end
            else
                self.show_wind_up_camera_action_finished_callback(caster_entity.eid, component_data, -1)
            end
        elseif caster_unit_info.team_type == team_type_flag.ENEMY then
            -- 敌方释放技能时，镜头首先瞬移施法者近战观察位，持续指定时长
            self:set_melee_camera_viewpoint(caster_entity.eid)
            local blend_time = component_data.blend_time
            self.context.controller:add_timer(blend_time, self.show_wind_up_camera_action_finished_callback, caster_entity.eid, component_data, -1)
        end
    else
        self:common_camera_flow_handle(component_data, caster_entity)
    end
end

---通用尽头流程处理
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:common_camera_flow_handle(component_data, caster_entity)
    -- 普攻和技能通用流程
    if component_data.flow_type == camera_flow_type.MELEE_SINGLE_ATTACK then
        -- 近战单体攻击流程
        self:melee_single_attack_handle(component_data, caster_entity)
    elseif component_data.flow_type == camera_flow_type.MELEE_GROUP_ATTACK then
        -- 近战群体攻击流程
        self:melee_group_attack_handle(component_data, caster_entity)
    elseif component_data.flow_type == camera_flow_type.REMOTE_SINGLE_ATTACK then
        -- 远程单体攻击流程
        self:remote_single_attack_handle(component_data, caster_entity)
    elseif component_data.flow_type == camera_flow_type.REMOTE_GROUP_ATTACK then
        -- 远程群体攻击流程
        self:remote_group_attack_handle(component_data, caster_entity)
    else
        helper.error("the flow_type is not processed, flow_type = ", helper.get_enum_name(camera_flow_type, component_data.flow_type))
    end
end

---显示技能前摇镜头动画完成
---@private
---@param caster_eid number 施法者实体id
---@param component_data skill_camera_component_data 相机组件数据
---@param camera_id number 相机ID
function battle_skill_camera:show_wind_up_camera_action_finished(caster_eid, component_data, camera_id)
    -- 主动隐藏特写相机
    if camera_id ~= -1 then
        camera_mgr.hide_virtual_camera(camera_id, camera_blend_type.Cut, 0)
    end

    ---@type entity 施法者实体
    local caster_entity = self.context:get_entity_by_primary_index(battle_components.eid, caster_eid)
    ---@type battle_unit_info 施法者单位信息
    local caster_unit_info = caster_entity:get_component(battle_components.unit_info).value
    if caster_unit_info.team_type == team_type_flag.OWN then
        -- 镜头切换到远程施法观察位
        self:set_remote_camera_viewpoint(caster_entity, 0)
    else
        -- 设置镜头事件为技能开始
        self:common_camera_flow_handle(component_data, caster_entity)
    end
end

---近战单体攻击流程处理
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:melee_single_attack_handle(component_data, caster_entity)
    ---@type battle_unit_info 施法者单位信息
    local caster_unit_info = caster_entity:get_component(battle_components.unit_info).value
    if caster_unit_info.team_type == team_type_flag.OWN then
        -- 我方对敌方
        if component_data.event_type == camera_event_type.BEGIN_SKILL then
            -- 1. 镜头切换到远程施法观察位
            self:set_remote_camera_viewpoint(caster_entity, 0)
        elseif component_data.event_type == camera_event_type.BEGIN_MOVE then
            -- 2. 单位开始移动时，镜头移动至受击者 近战观察位 镜头绑定（使用施法者移动时间）
            self:set_look_at_and_melee_viewpoint(component_data.target_eid, component_data.blend_time, component_data.look_at_time_ratio)
        elseif component_data.event_type == camera_event_type.BEGIN_GO_BACK then
            -- 3. 单位开始返回时，镜头移动至施法者 远程观察位（使用施法者移动时间）
            self:set_remote_camera_viewpoint(caster_entity, component_data.blend_time)
        end
    elseif caster_unit_info.team_type == team_type_flag.ENEMY then
        if self:get_unit_team_flag(component_data) == team_type_flag.OWN then
            -- 敌方对我方
            if component_data.event_type == camera_event_type.BEGIN_SKILL then
                -- 1. 单位技能起始时，镜头移动至受击者的 远程观察位 镜头绑定（配置时间）
                self:set_hit_camera_viewpoint(component_data.target_eid, self.default_blend_time)
            end
        end
    end
end

---近战群体攻击流程处理
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:melee_group_attack_handle(component_data, caster_entity)
    ---@type battle_unit_info 施法者单位信息
    local caster_unit_info = caster_entity:get_component(battle_components.unit_info).value
    if caster_unit_info.team_type == team_type_flag.OWN then
        -- 我方对敌方
        if component_data.event_type == camera_event_type.BEGIN_SKILL then
            -- 1. 镜头切换到远程施法观察位
            self:set_remote_camera_viewpoint(caster_entity, 0)
        elseif component_data.event_type == camera_event_type.BEGIN_MOVE then
            -- 2. 单位开始移动时，镜头移动至受击者 近战观察位 镜头绑定（使用施法者移动时间）
            self:set_look_at_and_melee_viewpoint(component_data.target_eid, component_data.blend_time, component_data.look_at_time_ratio)
        elseif component_data.event_type == camera_event_type.BEGIN_GO_BACK then
            -- 3. 单位开始返回时，镜头移动至施法者 远程观察位（使用施法者移动时间）
            self:set_remote_camera_viewpoint(caster_entity, component_data.blend_time)
        end
    elseif caster_unit_info.team_type == team_type_flag.ENEMY then
        -- 敌方对我方
        if component_data.event_type == camera_event_type.BEGIN_SKILL then
            -- 1. 技能开始时，镜头移动至施法者 近战观察位（配置时间）
            self:set_melee_camera_viewpoint(caster_entity.eid, component_data.blend_time)
        elseif component_data.event_type == camera_event_type.BEGIN_MOVE then
            -- 2. 单位开始移动时，镜头移动至受击者 受击观察位（使用施法者移动时间）
            self:set_hit_camera_viewpoint(component_data.target_eid, component_data.blend_time)
        elseif component_data.event_type == camera_event_type.BEGIN_ATTACK then
            -- 3. 单位开始攻击时，镜头移动至全局的 战场观察位（配置时间）
            self:set_battlefield_camera_viewpoint(component_data.blend_time)
        end
    end
end

---远程单体攻击流程处理
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:remote_single_attack_handle(component_data, caster_entity)
    ---@type battle_unit_info 施法者单位信息
    local caster_unit_info = caster_entity:get_component(battle_components.unit_info).value
    if caster_unit_info.team_type == team_type_flag.OWN then
        if self:get_unit_team_flag(component_data) == team_type_flag.ENEMY then
            -- 我方对敌方
            if component_data.event_type == camera_event_type.BEGIN_SKILL then
                -- 单位开始施法时
                if component_data.skill_type == camera_skill_type.ATTACK then
                    -- 如果是普攻，镜头设置到 镜头到 远程推近镜头位
                    self:set_remote_zoom_in_camera_viewpoint(caster_entity, self.default_blend_time)
                else
                    -- 否则，镜头切换到 远程施法观察位
                    self:set_remote_camera_viewpoint(caster_entity, 0)
                end
            end
        else
            -- 我方对我方
            if component_data.event_type == camera_event_type.BEGIN_SKILL then
                -- 1. 单位技能起始时，镜头移至 远程观察位（配置时间）
                self:set_remote_camera_viewpoint(caster_entity, self.default_blend_time)
            elseif component_data.event_type == camera_event_type.BEGIN_ATTACK then
                -- 2. 单位开始攻击时，返回 战场观察位（瞬切）
                self:set_battlefield_camera_viewpoint()
            end
        end
    elseif caster_unit_info.team_type == team_type_flag.ENEMY then
        if self:get_unit_team_flag(component_data) == team_type_flag.OWN then
            -- 敌方对我方
            if component_data.event_type == camera_event_type.BEGIN_SKILL then
                -- 1. 单位技能起始时，镜头移动至受击者的 受击镜头观察位 镜头绑定（配置时间）
                self:set_hit_camera_viewpoint(component_data.target_eid, self.default_blend_time)
            end
        else
            -- 敌方对敌方
            if component_data.event_type == camera_event_type.BEGIN_SKILL then
                -- 1. 单位技能起始时，镜头移动至施法者的 受击镜头观察位 镜头绑定（配置时间）
                self:set_hit_camera_viewpoint(caster_entity.eid, self.default_blend_time)
            elseif component_data.event_type == camera_event_type.BEGIN_ATTACK then
                -- 2. 单位开始攻击时，返回 战场观察位（瞬切）
                self:set_battlefield_camera_viewpoint()
            end
        end
    end
end

---远程群体攻击流程处理
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@param caster_entity entity 施法者实体
function battle_skill_camera:remote_group_attack_handle(component_data, caster_entity)
    ---@type battle_unit_info 施法者单位信息
    local caster_unit_info = caster_entity:get_component(battle_components.unit_info).value
    if caster_unit_info.team_type == team_type_flag.OWN then
        if self:get_unit_team_flag(component_data) == team_type_flag.ENEMY then
            -- 我方对敌方
            if component_data.event_type == camera_event_type.BEGIN_SKILL then
                -- 单位开始施法时
                if component_data.skill_type == camera_skill_type.ATTACK then
                    -- 如果是普攻，镜头设置到 镜头到 远程推近镜头位
                    self:set_remote_zoom_in_camera_viewpoint(caster_entity, self.default_blend_time)
                else
                    -- 否则，镜头切换到 远程施法观察位
                    self:set_remote_camera_viewpoint(caster_entity, 0)
                end
            end
        else
            -- 我方对我方
            if component_data.event_type == camera_event_type.BEGIN_SKILL then
                -- 1. 单位技能起始时，镜头移至 远程观察位（配置时间）
                self:set_remote_camera_viewpoint(caster_entity, self.default_blend_time)
            elseif component_data.event_type == camera_event_type.BEGIN_ATTACK then
                -- 2. 单位开始攻击时，返回 战场观察位（瞬切）
                self:set_battlefield_camera_viewpoint()
            end
        end
    elseif caster_unit_info.team_type == team_type_flag.ENEMY then
        if self:get_unit_team_flag(component_data) == team_type_flag.OWN then
            -- 敌方对我方
            if component_data.event_type == camera_event_type.BEGIN_SKILL then
                -- 1. 单位技能起始时，镜头移动至受击者的 受击镜头观察位 镜头绑定（配置时间）
                self:set_hit_camera_viewpoint(component_data.target_eid, self.default_blend_time)
            elseif component_data.event_type == camera_event_type.BEGIN_ATTACK then
                -- 2. 单位开始攻击时，返回 战场观察位（配置时间）
                self:set_battlefield_camera_viewpoint(self.default_blend_time)
            end
        else
            -- 敌方对敌方
            if component_data.event_type == camera_event_type.BEGIN_SKILL then
                -- 1. 单位技能起始时，镜头移动至施法者的 受击镜头观察位 镜头绑定（配置时间）
                self:set_hit_camera_viewpoint(caster_entity.eid, self.default_blend_time)
            elseif component_data.event_type == camera_event_type.BEGIN_ATTACK then
                -- 2. 单位开始攻击时，返回 战场观察位（瞬切）
                self:set_battlefield_camera_viewpoint()
            end
        end
    end
end

---准备释放技能时
---@private
---@param caster_entity entity 准备施法的单位
---@param blend_time number 镜头融合时间
---@param is_rise_up boolean 是否升起
function battle_skill_camera:prepare_skill_camera_handle(caster_entity, blend_time, is_rise_up)
    if is_rise_up then
        -- 如果施法者是敌人：镜头移动至 战场观察位
        self:set_battlefield_camera_viewpoint(blend_time)
    else
        -- 如果是队友：镜头移动至队友 远程观察位
        self:set_remote_camera_viewpoint(caster_entity, blend_time)
    end
end

---敌方单体攻击我方流程
---@private
---@param target_eid number 受击者实体id
function battle_skill_camera:enemy_single_attacked_own_flow(target_eid)
    -- 单位技能起始时，镜头移动至受击者的 受击镜头观察位 镜头绑定（配置时间）
    self:set_hit_camera_viewpoint(target_eid, self.default_blend_time)
end

---镜头看向目标并融合向近战观察点位
---@private
---@param target_eid number
---@param blend_time number
---@param look_at_time_ratio number
function battle_skill_camera:set_look_at_and_melee_viewpoint(target_eid, blend_time, look_at_time_ratio)
    local unit_render = self.context.renderer:get_render_unit(target_eid)
    local look_at_trans = unit_render:get_attach_point(role_attach_point_type.BE_HIT_3, false)
    local look_at_time = math_ceil(blend_time * (look_at_time_ratio or 1)) / 1000
    
    local current_v_camera = camera_mgr.current_show_virtual_camera()
    -- 特殊处理，不可以设置通用相机动画prefab（skill_camera_node）的镜头看向目标，会引起坐标错误
    if current_v_camera.name ~= 'v_camera' then
        DoLookAtTarget(current_v_camera, look_at_trans, look_at_time, function()
            -- 相机看向目标
            camera_mgr.set_camera_hard_look_at(current_v_camera, look_at_trans)
            -- 相机看向目标
            -- camera_mgr.set_camera_hard_look_at(v_camera, look_at_trans)
        end, 0, UpdateTypeManual)
    end
    
    -- 融合近战镜头
    self:set_melee_camera_viewpoint(target_eid, blend_time)
end

---设置镜头到远程攻击推近位
---@private
---@param entity entity
---@param time number
---@return Cinemachine.CinemachineVirtualCamera
function battle_skill_camera:set_remote_zoom_in_camera_viewpoint(entity, time)
    local v_camera, v_camera_id = self:get_free_v_camera()

    ---@type battle_unit_info
    local unit_info = entity:get_component(battle_components.unit_info).value

    -- 设置相机信息，坐标和属性
    ---@type MapCameraInfo
    local camera_info
    if unit_info.body_type == role_body_type.LARGE then
        camera_info = unit_info.index_point_info.ZoomInCameraLargeInfo 
    elseif unit_info.body_type == role_body_type.HUGE then
        camera_info = unit_info.index_point_info.ZoomInCameraHugeInfo
    else
        camera_info = unit_info.index_point_info.ZoomInCameraMediumInfo
    end

    battle_utility.set_virtual_camera_info(v_camera, camera_info)

    -- 显示镜头
    self:show_virtual_camera_handle(v_camera_id, time, camera_info)

    return v_camera
end

---设置镜头到近战相机观察点位
---@private
---@param target_eid number
---@param blend_time number
---@return Cinemachine.CinemachineVirtualCamera
function battle_skill_camera:set_melee_camera_viewpoint(target_eid, blend_time)
    -- 目标实体
    local target_entity = self.context:get_entity_by_primary_index(battle_components.eid, target_eid)
    ---@type battle_unit_info
    local unit_info = target_entity:get_component(battle_components.unit_info).value
    -- 获取相机点位数据
    ---@type MapCameraInfo
    local camera_info = battle_utility.get_melee_camera_point_info(unit_info)

    -- 获取空闲相机
    local v_camera, v_camera_id = self:get_free_v_camera()
    -- 设置相机信息，坐标和属性
    battle_utility.set_virtual_camera_info(v_camera, camera_info)
    -- 显示镜头
    self:show_virtual_camera_handle(v_camera_id, blend_time, camera_info)
end

---设置镜头到远程相机观察点位
---@private
---@param entity entity
---@param time number
---@return Cinemachine.CinemachineVirtualCamera
function battle_skill_camera:set_remote_camera_viewpoint(entity, time)
    local v_camera, v_camera_id = self:get_free_v_camera()

    ---@type battle_unit_info
    local unit_info = entity:get_component(battle_components.unit_info).value

    -- 设置相机信息，坐标和属性
    ---@type MapCameraInfo
    local camera_info
    if unit_info.body_type == role_body_type.LARGE then
        camera_info = unit_info.index_point_info.RemoteCameraLargeInfo
    elseif unit_info.body_type == role_body_type.HUGE then
        camera_info = unit_info.index_point_info.RemoteCameraHugeInfo
    else
        camera_info = unit_info.index_point_info.RemoteCameraMediumInfo
    end
    
    battle_utility.set_virtual_camera_info(v_camera, camera_info)

    -- 显示镜头
    self:show_virtual_camera_handle(v_camera_id, time, camera_info)
    -- 同步给UI
    self.context.message:send_camera_change_handle(battle_camera_type.OWN_REMOTE_ATTACK)
    
    return v_camera
end

---设置镜头到远程相机观察点位
---@private
---@param eid number
---@param time number
---@return Cinemachine.CinemachineVirtualCamera
function battle_skill_camera:set_remote_camera_viewpoint_by_eid(eid, time)
    local target_entity = self.context:get_entity_by_primary_index(battle_components.eid, eid)
    return self:set_remote_camera_viewpoint(target_entity, time)
end

---设置镜头到受击相机观察点位
---@private
---@param eid number
---@param time number
---@return Cinemachine.CinemachineVirtualCamera
function battle_skill_camera:set_hit_camera_viewpoint(eid, time)
    local entity = self.context:get_entity_by_primary_index(battle_components.eid, eid)
    ---@type battle_unit_info
    local unit_info = entity:get_component(battle_components.unit_info).value

    -- 获取相机点位数据
    ---@type MapCameraInfo
    local camera_info
    if unit_info.team_type == team_type_flag.OWN then
        camera_info = unit_info.index_point_info.HitCameraInfo
    else
        camera_info = battle_utility.get_melee_camera_point_info(unit_info)
    end

    -- 获取空闲虚拟相机
    local v_camera, v_camera_id = self:get_free_v_camera()
    -- 设置相机信息，坐标和属性
    battle_utility.set_virtual_camera_info(v_camera, camera_info)
    -- 显示镜头
    self:show_virtual_camera_handle(v_camera_id, time, camera_info)
    -- 同步给UI
    self.context.message:send_camera_change_handle(battle_camera_type.OWN_BE_HIT)

    return v_camera
end

---设置镜头到战场观察位
---@private
---@param time number
---@return Cinemachine.CinemachineVirtualCamera
function battle_skill_camera:set_battlefield_camera_viewpoint(time)
    local v_camera, v_camera_id = self:get_free_v_camera()
    
    -- 设置相机信息，坐标和属性
    ---@type MapCameraInfo
    local camera_info = self.context.database:get_battlefield_camera_viewpoint()
    battle_utility.set_virtual_camera_info(v_camera, camera_info)

    -- 显示镜头
    self:show_virtual_camera_handle(v_camera_id, time, camera_info)
    -- 同步给UI
    self.context.message:send_camera_change_handle(battle_camera_type.COMMON_LOOK)

    return v_camera
end

---显示虚拟镜头
---@private
---@param v_camera_id number
---@param time number 融合时长（毫秒）
---@param camera_info MapCameraInfo
function battle_skill_camera:show_virtual_camera_handle(v_camera_id, time, camera_info)
    ---@type Cinemachine.CinemachineBlendDefinition.Style
    local style
    ---@type UnityEngine.AnimationCurve
    local curve
    if time ~= nil and time > 0 then
        style = self.blend_type
        if camera_info ~= nil then
            curve = SetAnimationCurve(camera_info.Keyframes, animation_curve)
        else
            curve = nil
        end
    else
        time = 0
        style = camera_blend_type.Cut
    end

    -- 显示镜头
    camera_mgr.set_camera_id_hard_look_at(v_camera_id)
    camera_mgr.show_virtual_camera(v_camera_id, style, time / 1000, curve)
end

---获取单位所属队伍
---@private
---@param component_data skill_camera_component_data 相机组件数据
---@return team_type_flag
function battle_skill_camera:get_unit_team_flag(component_data)
    -- 目标实体
    local entity = self.context:get_entity_by_primary_index(battle_components.eid, component_data.target_eid)
    if entity == nil then
        helper.error_skill("not found entity, target_eid = ", component_data.target_eid, ", event_type = ", 
                helper.get_enum_name(camera_event_type, component_data.event_type))
    end
    
    ---@type battle_unit_info
    local unit_info = entity:get_component(battle_components.unit_info).value
    
    return unit_info.team_type
end

---创建新的虚拟摄像机
---@private
---@return Cinemachine.CinemachineVirtualCamera, number, Game.Behaviour.BattleCameraLuaBehaviour
function battle_skill_camera:get_free_v_camera()
    local behaviour, v_camera_id = self.context.renderer:get_free_battle_view_camera()
    local v_camera = behaviour.virtualCamera
    
    -- 记录上一次使用的相机id
    self.pre_v_camera_id = v_camera_id
    
    return v_camera, v_camera_id, behaviour
end

---卸载
---@public
function battle_skill_camera:tear_down()
    self.pre_v_camera_id = nil
    self.blend_type = nil
    self.default_blend_time = nil
    self.show_wind_up_camera_action_finished_callback = nil
    
    super.tear_down(self)
end

return battle_skill_camera