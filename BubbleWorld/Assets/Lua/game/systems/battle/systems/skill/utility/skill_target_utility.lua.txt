---
--- Generated by wuhaijun
--- File name : skill_target_utility.lua.txt
--- DateTime : 2021/07/19
--- Description : 技能目标工具
---

local helper = battle_helper
local LuaUtil = cs.LuaUtil
local role_attach_point_type = enum.common.role_attach_point_type
local team_type_flag = enum.battle.team_type_flag
local math_acos = math.acos
local math_sqrt = math.sqrt
local math_rad2Deg = math.deg(1)
local math_atan = math.atan

---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type battle_components
local battle_components = require(helper.path.battle_components)

---@class skill_target_utility
local skill_target_utility = { cname = 'skill_target_utility' }

-- 临时结果列表，用完需要清空
local temp_unit_result_list = {}
local temp_pos_result_list = {}

---获取目标列表
---@public
---@param target_mid string SkillTarget表Id
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param context context 战斗上下文
---@param args skill_target_data 获取目标所需参数
---@param result_list entity[] 查找实体结果列表
---@return nil
function skill_target_utility.get_targets(target_mid, context, skill_data, running_data, args, result_list)
    -- 方法名字
    local func_name = 'skill_target_' .. target_mid
    local func = skill_target_utility[func_name]
    helper.assert_skill(func ~= nil, "skill target handle method not found, skill_id = ", skill_data.mid,
            ", target_mid = ", target_mid)

    -- 执行具体处理逻辑
    func(result_list or {}, context, skill_data, running_data, args)
end

--region 通用方法
---获取实体单位列表根据参数
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param args skill_target_data 获取目标所需参数
---@return entity[]
local get_entity_list_by_args = function(context, skill_data, running_data, args)
    ---@type string SkillTarget表id
    local target_mid = args.TargetId
    ---@type entity[]
    local temp_list = temp_pos_result_list
    
    helper.clear_array(temp_list)
    skill_target_utility.get_targets(target_mid, context, skill_data, running_data, args, temp_list)
    
    return temp_list
end

---获取单位挂点位置和旋转
---@private
---@param result_list number[]
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param args skill_target_data 获取目标所需参数
local get_unit_attach_point_trans = function(result_list, context, skill_data, running_data, args)
    ---@type entity[]
    local entity_list = get_entity_list_by_args(context, skill_data, running_data, args)
    -- 获取位置
    for i = 1, #entity_list do
        local entity = entity_list[i]
        helper.assert(entity.cname == "entity", "target type must be entity, TargetId = ", args.TargetId)

        ---@type UnityEngine.Transform 挂点
        local attach_point = context.renderer:get_attach_point(entity.eid, args.PointName)

        local pos_x, pos_y, pos_z, rot_x, rot_y, rot_z = 0, 0, 0, 0, 0, 0
        if attach_point ~= nil and not LuaUtil.IsNull(attach_point) then
            pos_x, pos_y, pos_z = attach_point:GetPosition()
            rot_x, rot_y, rot_z = attach_point:GetEulerAngles()
        else
            helper.error_skill('not found unit attach point, PointName = ', args.PointName, ', TargetId = ', args.TargetId)
        end

        -- 计算偏移
        pos_x = pos_x + args.OffsetX or 0
        pos_y = pos_y + args.OffsetY or 0
        pos_z = pos_z + args.OffsetZ or 0

        result_list[i] = { pos_x, pos_y, pos_z, rot_x, rot_y, rot_z }
    end
    helper.clear_array(entity_list)
end

---设置技能效果实体到列表中
---@private
---@param effect_item battle_effect_data 战斗效果数据
---@param result_list entity[] 实体结果列表
---@param context context 战斗环境
---@param is_repeated boolean 是否允许重复项
local set_skill_effect_entity_list = function(effect_item, result_list, context, is_repeated)
    local entity = context:get_entity_by_primary_index(battle_components.uid, effect_item.effect.target_id)
    if is_repeated then
        result_list[#result_list + 1] = entity
    else
        local has_entity = false
        for i = 1, #result_list do
            if result_list[i] == entity then
                has_entity = true
                break
            end
        end

        -- 不存在则添加
        if not has_entity then
            result_list[#result_list + 1] = entity
        end
    end
end

---设置子弹效果实体到列表中
---@private
---@param effect_item battle_effect_data 战斗效果数据
---@param result_list entity[] 实体结果列表
---@param context context 战斗环境
---@param is_repeated boolean 是否允许重复项
---@param is_reverse boolean false=过滤子弹效果，true=过滤非子弹效果
local set_valid_bullet_effect_entity_list = function(effect_item, result_list, context, is_repeated, is_reverse)
    -- 查找有效技能效果
    if not is_reverse then
        if effect_item.effect.damage ~= nil or effect_item.effect.heal ~= nil then
            set_skill_effect_entity_list(effect_item, result_list, context, is_repeated);
        end
    else
        if effect_item.effect.damage == nil and effect_item.effect.heal == nil then
            set_skill_effect_entity_list(effect_item, result_list, context, is_repeated);
        end
    end
end

---获取队伍近战群攻位置（单位,偏移）
---@private
---@param result_list number[]
---@param team_point_data BattleTeamPointData 技能数据
---@param args skill_target_data 获取目标所需参数
---@param index number
local get_team_group_position = function(team_point_data, result_list, args, index)
    ---@type BattleUnitIndexPoint
    local index_point_data = team_point_data.MeleeGroupAttackDict[index]
    ---@type MapPoint
    local map_point = index_point_data.AttackPointFront

    result_list[1] =
    {
        map_point.Position.X + args.OffsetX or 0,
        map_point.Position.Y + args.OffsetY or 0,
        map_point.Position.Z + args.OffsetZ or 0,
        map_point.Rotation.X,
        map_point.Rotation.Y,
        map_point.Rotation.Z,
    }
end

---计算方向转欧拉角
---@private
---@param x number X方向分量
---@param y number Y方向分量
---@param z number Z方向分量
---@return number, number, number
local calculate_dir_2_euler = function(x, y, z)
    local angle_x, angle_y, angle_z

    -- angle_x = arc cos(sqrt((x^2 + z^2)/(x^2 + y^2 + z^2)))
    local xx = x * x
    local yy = y * y
    local zz = z * z
    local numerator = xx + zz
    local denominator = xx + yy + zz
    if denominator > 0 then
        angle_x = math_acos(math_sqrt(numerator / denominator)) * math_rad2Deg
    else
        angle_x = 0
    end
    if y > 0 then angle_x = 360 - angle_x end

    -- angle_y = arc tan(x/z)
    angle_y = math_atan(x, z) * math_rad2Deg
    if angle_y < 0 then angle_y = angle_y + 180 end
    if x < 0 then angle_y = angle_y + 180 end

    -- angle_z = 0
    angle_z = 0

    return angle_x, angle_y, angle_z
end
--endregion

--region 获取单位类型目标
---施法单位，就是技能释放者
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
function skill_target_utility.skill_target_caster(result_list, context, skill_data)
    local caster = context:get_entity_by_primary_index(battle_components.uid, skill_data.caster_uid)
    helper.assert_skill(caster ~= nil, "not found caster entity, skill_id = ", skill_data.mid,
            ", caster_id = ", helper.to_string(skill_data.caster_uid))

    result_list[1] = caster
end

---技能目标单位
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
function skill_target_utility.skill_target_skill_target(result_list, context, skill_data)
    local target = context:get_entity_by_primary_index(battle_components.uid, skill_data.target_uid)
    helper.assert_skill(target ~= nil, "not found target entity, skill_id = ", skill_data.mid,
            ", target_uid = ", helper.to_string(skill_data.target_uid))

    result_list[1] = target
end

---获取敌方全部单位
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
function skill_target_utility.skill_target_all_enemy_units(result_list, context, skill_data)
    ---@type battle_unit_info[]
    local temp_info_list = temp_unit_result_list
    helper.clear_array(temp_info_list)

    ---@type battle_unit_info
    local caster_unit_info = context.database:get_unit_info_by_uid(skill_data.caster_uid)
    ---@type team_type_flag
    local team_type
    if caster_unit_info.team_type == team_type_flag.OWN then
        context.database:get_enemy_unit_info_list(temp_info_list)
    else
        context.database:get_own_unit_info_list(temp_info_list)
    end

    for i = 1, #temp_info_list do
        local info = temp_info_list[i]
        if not info.is_death then
            result_list[#result_list + 1] = context:get_entity_by_primary_index(battle_components.uid, info.uid)
        end
    end
    
    helper.clear_array(temp_info_list)
end

---获取己方全部单位
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param _ battle_skill_data 技能数据
function skill_target_utility.skill_target_all_our_units(result_list, context, _)
    ---@type battle_unit_info[]
    local temp_info_list = temp_unit_result_list
    helper.clear_array(temp_info_list)
    
    context.database:get_own_unit_info_list(temp_info_list)
    for i = 1, #temp_info_list do
        local info = temp_info_list[i]
        if not info.is_death then
            result_list[#result_list + 1] = context:get_entity_by_primary_index(battle_components.uid, info.uid)
        end
    end
    
    helper.clear_array(temp_info_list)
end

---剩余技能效果数据的目标单位（这里的效果是指 BTLEffect，后端数据）
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
function skill_target_utility.skill_target_remain_effect_target(result_list, context, skill_data)
    for i = 1, #skill_data.effect_list do
        set_skill_effect_entity_list(skill_data.effect_list[i], result_list, context, true)
    end
end

---获取全部技能效果数据目标单位
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param _ skill_running_data 技能运行数据
function skill_target_utility.skill_target_all_effect_target(result_list, context, skill_data, _)
    for i = 1, #skill_data.effect_list do
        set_skill_effect_entity_list(skill_data.effect_list[i], result_list, context, false)
    end
end

---获取技能动态目标
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
function skill_target_utility.skill_target_dynamic_target(result_list, context, skill_data, running_data)
    local target_eid = running_data.dynamic_eid
    helper.assert_skill(target_eid ~= nil, 'invalid dynamic_target_eid, skill_id = ', skill_data.mid, 
            ", director_id = ", skill_data.skill_director_data.Id, ", behavior_id = ", running_data.behavior_id)
    
    local entity = context:get_entity_by_primary_index(battle_components.eid, target_eid)
    helper.assert_skill(entity ~= nil, 'not found dynamic target, skill_id = ', skill_data.mid,
            ', target_eid = ', target_eid)

    result_list[1] = entity
end

---获取我方队伍实体
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
function skill_target_utility.skill_target_own_team_group(result_list, context, skill_data, running_data)
    local caster_uid = skill_data.caster_uid
    helper.assert_skill(caster_uid ~= nil, 'invalid caster_uid in own_team_group, skill_id = ', skill_data.mid,
            ", director_id = ", skill_data.skill_director_data.Id, ", behavior_id = ", running_data.behavior_id)

    ---@type entity
    local entity
    local group_index = battle_utility.get_team_group_index(context, team_type_flag.OWN)
    if group_index ~= -1 then
        local target_eid = battle_utility.get_team_group_eid(context, team_type_flag.OWN, group_index)
        entity = context:get_entity_by_primary_index(battle_components.eid, target_eid)
    else
        entity = context:get_entity_by_primary_index(battle_components.uid, skill_data.target_uid)
    end
    helper.assert_skill(entity ~= nil, 'not found entity, skill_id = ', skill_data.mid, ', group_index = ', group_index)
    
    result_list[1] = entity
end

---获取敌方队伍实体
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
function skill_target_utility.skill_target_enemy_team_group(result_list, context, skill_data, running_data)
    local caster_uid = skill_data.caster_uid
    helper.assert_skill(caster_uid ~= nil, 'invalid caster_uid enemy_team_group, skill_id = ', skill_data.mid,
            ", director_id = ", skill_data.skill_director_data.Id, ", behavior_id = ", running_data.behavior_id)

    ---@type battle_unit_info
    local caster_unit_info = context.database:get_unit_info_by_uid(caster_uid)
    ---@type team_type_flag
    local team_type
    if caster_unit_info.team_type == team_type_flag.OWN then
        team_type = team_type_flag.ENEMY
    else
        team_type = team_type_flag.OWN
    end

    ---@type entity
    local entity
    local group_index = battle_utility.get_team_group_index(context, team_type)
    if group_index ~= -1 then
        local target_eid = battle_utility.get_team_group_eid(context, team_type, group_index)
        entity = context:get_entity_by_primary_index(battle_components.eid, target_eid)
    else
        entity = context:get_entity_by_primary_index(battle_components.uid, skill_data.target_uid)
    end
  
    helper.assert_skill(entity ~= nil, 'not found entity, skill_id = ', skill_data.mid, ', group_index = ', group_index)
    
    result_list[1] = entity
end

---获取全部子弹目标
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
function skill_target_utility.skill_target_all_bullet_targets(result_list, context, skill_data, running_data)
    for i = 1, #skill_data.effect_list do
        set_valid_bullet_effect_entity_list(skill_data.effect_list[i], result_list, context, false)
    end
end

---获取剩余子弹目标(允许存在重复的实体)
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
function skill_target_utility.skill_target_remain_bullet_targets(result_list, context, skill_data, running_data)
    for i = 1, #skill_data.effect_list do
        set_valid_bullet_effect_entity_list(skill_data.effect_list[i], result_list, context, true)
    end
end

---获取非子弹技能效果目标
---@private
---@param result_list entity[] 实体列表
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
function skill_target_utility.skill_target_invert_remain_bullet_targets(result_list, context, skill_data, running_data)
    for i = 1, #skill_data.effect_list do
        set_valid_bullet_effect_entity_list(skill_data.effect_list[i], result_list, context, true, true)
    end
end
--endregion

--region 获取位置类目标（位置和方向）
---单位原始站立位置（单位,偏移）
---@private
---@param result_list number[]
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param args skill_target_data 获取目标所需参数
function skill_target_utility.skill_target_original_position(result_list, context, skill_data, running_data, args)
    ---@type entity[]
    local entity_list = get_entity_list_by_args(context, skill_data, running_data, args)
    for i = 1, #entity_list do
        ---@type entity
        local entity = entity_list[i]
        helper.assert(entity.cname == "entity", "target type must be entity, TargetId = ", args.TargetId)

        -- 获取目标原始位置
        local uid_comp = entity:get_component(battle_components.uid)
        ---@type battle_unit_info
        local unit_info = context.database:get_unit_info_by_uid(uid_comp.value)

        result_list[i] =
        {
            unit_info.position.x + args.OffsetX or 0,
            unit_info.position.y + args.OffsetY or 0,
            unit_info.position.z + args.OffsetZ or 0,
            unit_info.rotation.x,
            unit_info.rotation.y,
            unit_info.rotation.z
        }
    end

    helper.clear_array(entity_list)
end

---单位当前位置（单位,偏移）
---@private
---@param result_list number[]
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param args skill_target_data 获取目标所需参数
function skill_target_utility.skill_target_current_position(result_list, context, skill_data, running_data, args)
    ---@type entity[]
    local entity_list = get_entity_list_by_args(context, skill_data, running_data, args)
    for i = 1, #entity_list do
        local entity = entity_list[i]
        helper.assert(entity.cname == "entity", "target type must be entity, TargetId = ", args.TargetId)

        ---@type vector3 当前位置
        local position = entity:get_component(battle_components.position).value
        -- 获取当前位置
        ---@type vector3 当前旋转
        local rotation = entity:get_component(battle_components.rotation).value

        result_list[i] = 
        {
            position.x + args.OffsetX or 0,
            position.y + args.OffsetY or 0,
            position.z + args.OffsetZ or 0,
            rotation.x,
            rotation.y,
            rotation.z
        }
    end

    helper.clear_array(entity_list)
end

---单位身前挂点位置（单位,偏移）
---@private
---@param result_list number[]
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param args skill_target_data 获取目标所需参数
function skill_target_utility.skill_target_unit_front_position(result_list, context, skill_data, running_data, args)
    ---@type entity[]
    local entity_list = get_entity_list_by_args(context, skill_data, running_data, args)
    -- 获取位置
    for i = 1, #entity_list do
        local entity = entity_list[i]
        helper.assert(entity.cname == "entity", "target type must be entity, TargetId = ", args.TargetId)

        -- 获取施法者技能偏移
        ---@type battle_unit_info
        local c_unit_info = context.database:get_unit_info_by_uid(skill_data.caster_uid)
        
        -- 获取技能目标
        local t_uid_comp = entity:get_component(battle_components.uid)
        ---@type battle_unit_info
        local t_unit_info = context.database:get_unit_info_by_uid(t_uid_comp.value)
        local t_pos_x = t_unit_info.position.x
        local t_pos_y = t_unit_info.position.y
        local t_pos_z = t_unit_info.position.z
        ---@type MapPoint 近战攻击点位
        local t_attack_point = t_unit_info.index_point_info.AttackPointFront
        
        -- 动态计算身前位置
        local direction = (t_unit_info.position - c_unit_info.position):set_normalize()
        local distance_x = t_attack_point.LocalPosition.X + t_unit_info.pos_offset.x + args.OffsetX or 0
        local distance_y = t_attack_point.LocalPosition.Y + t_unit_info.pos_offset.y + args.OffsetY or 0
        local distance_z = t_attack_point.LocalPosition.Z + t_unit_info.pos_offset.z + args.OffsetZ or 0
        local ox, oy, oz = LuaUtil.RotationVector(t_unit_info.rotation.x, t_unit_info.rotation.y, t_unit_info.rotation.z, 
                direction.x, direction.y, direction.z)
        local distance = math_sqrt(distance_x * distance_x + distance_y * distance_y + distance_z * distance_z)
        ox = ox * distance
        oy = oy * distance
        oz = oz * distance

        if t_attack_point.DotValue then
            t_pos_x = t_pos_x - ox
            t_pos_y = t_pos_y - oy
            t_pos_z = t_pos_z - oz
        else
            t_pos_x = t_pos_x + ox
            t_pos_y = t_pos_y + oy
            t_pos_z = t_pos_z + oz
        end

        -- 计算y轴旋转
        local rot_x, rot_y, rot_z = calculate_dir_2_euler(direction.x, direction.y, direction.z)

        result_list[i] = 
        {
            t_pos_x,
            t_pos_y,
            t_pos_z,
            rot_x,
            rot_y,
            rot_z,
        }
    end
    helper.clear_array(entity_list)
end

---单位受击点位置（单位,偏移）
---@private
---@param result_list number[]
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param args skill_target_data 获取目标所需参数
function skill_target_utility.skill_target_be_hit_position(result_list, context, skill_data, running_data, args)
    args.PointName = role_attach_point_type.BE_HIT_2
    get_unit_attach_point_trans(result_list, context, skill_data, running_data, args)
end

---单位子弹挂点位置（单位,偏移）
---@private
---@param result_list number[]
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param args skill_target_data 获取目标所需参数
function skill_target_utility.skill_target_attach_point_position(result_list, context, skill_data, running_data, args)
    get_unit_attach_point_trans(result_list, context, skill_data, running_data, args)
end

---敌方群攻位置1（单位,偏移）
---@private
---@vararg any
function skill_target_utility.skill_target_enemy_team_group_position_1(...)
    skill_target_utility.skill_target_team_group_position(1, ...)
end

---敌方群攻位置2（单位,偏移）
---@private
---@vararg any
function skill_target_utility.skill_target_enemy_team_group_position_2(...)
    skill_target_utility.skill_target_team_group_position(2, ...)
end

---敌方群攻位置3（单位,偏移）
---@private
---@vararg any
function skill_target_utility.skill_target_enemy_team_group_position_3(...)
    skill_target_utility.skill_target_team_group_position(3, ...)
end

---我方群攻位置1（单位,偏移）
---@private
---@vararg any
function skill_target_utility.skill_target_own_team_group_position_1(...)
    skill_target_utility.skill_target_team_group_position(1, ...)
end

---我方群攻位置2（单位,偏移）
---@private
---@vararg any
function skill_target_utility.skill_target_own_team_group_position_2(...)
    skill_target_utility.skill_target_team_group_position(2, ...)
end

---我方群攻位置3（单位,偏移）
---@private
---@vararg any
function skill_target_utility.skill_target_own_team_group_position_3(...)
    skill_target_utility.skill_target_team_group_position(3, ...)
end

---我方群攻位置（单位,偏移）
---@private
---@param result_list number[]
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param args skill_target_data 获取目标所需参数
function skill_target_utility.skill_target_own_team_group_position(result_list, context, skill_data, running_data, args)
    local caster_uid = skill_data.caster_uid
    helper.assert_skill(caster_uid ~= nil, 'invalid caster_uid own_team_group_position, skill_id = ', skill_data.mid,
            ", director_id = ", skill_data.skill_director_data.Id, ", behavior_id = ", running_data.behavior_id)

    local caster_unit_info = context.database:get_unit_info_by_uid(caster_uid)
    ---@type BattleTeamPointData
    local team_point_data = context.database:get_team_group_point(caster_unit_info.team_type)
    
    get_team_group_position(team_point_data, result_list, args, 1)
end

---获取队伍近战群攻位置（单位,偏移）
---@private
---@param result_list number[]
---@param context context 战斗上下文
---@param skill_data battle_skill_data 技能数据
---@param running_data skill_running_data 技能运行数据
---@param args skill_target_data 获取目标所需参数
function skill_target_utility.skill_target_team_group_position(group_index, result_list, context, skill_data, running_data, args)
    local caster_uid = skill_data.caster_uid
    helper.assert_skill(caster_uid ~= nil, 'invalid caster_uid own_team_group_position, skill_id = ', skill_data.mid,
            ", director_id = ", skill_data.skill_director_data.Id, ", behavior_id = ", running_data.behavior_id)

    ---@type BattleTeamPointData
    local team_point_data 
    local caster_unit_info = context.database:get_unit_info_by_uid(caster_uid)
    if caster_unit_info.team_type == team_type_flag.OWN then
        team_point_data = context.database:get_team_group_point(team_type_flag.ENEMY)
    elseif caster_unit_info.team_type == team_type_flag.ENEMY then
        team_point_data = context.database:get_team_group_point(team_type_flag.OWN)
    end

    get_team_group_position(team_point_data, result_list, args, group_index)
end
--endregion

return skill_target_utility