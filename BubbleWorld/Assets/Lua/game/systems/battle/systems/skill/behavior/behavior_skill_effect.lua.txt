---
--- Generated by wuhaijun
--- File name : behavior_skill_effect.lua.txt
--- DateTime : 2021/07/19
--- Description : 
---     行为目标受到技能效果时显示受击动作/特效、血条增减动画、飘血动画
---

---@type battle_helper
local helper = battle_helper
local is_nil_or_empty = string.is_nil_or_empty
---@type enum_battle
local enum_battle = enum.battle
local behavior_class_name = enum_battle.behavior_class_name
local camera_event_type = enum_battle.skill_camera_event_type
local battle_buff_type = enum_battle.battle_buff_type
local buff_trigger_event_type = enum_battle.buff_trigger_event_type
local damage_number_type = enum_battle.damage_number_type

---@type battle_constant
local battle_constant = require(helper.path.battle_utils .. 'battle_constant')
---@type state_utility
local state_utility = require(helper.path.battle_fsm .. 'state_utility')
---@type skill_data_utility
local skill_data_utility = require(helper.path.battle_skill .. 'utility/skill_data_utility')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type battle_effect_utility
local battle_effect_utility = require(helper.path.battle_skill .. 'utility/battle_effect_utility')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type base_behavior
local super = require(helper.path.battle_skill .. 'behavior/base_behavior')

---@class behavior_skill_effect : base_behavior
local behavior_skill_effect = class("behavior_skill_effect", super)

---构造函数
---@protected
function behavior_skill_effect:ctor()
    super.ctor(self, self.cname)
    
    ---特效延迟执行回调
    ---@private
    ---@type fun(e:effect_res_data, eid:number)
    self.effect_delay_callback = function(e, eid) self:on_effect_delay_handle(e, eid) end
    ---动作延迟执行回调
    ---@private
    ---@type fun(bed:battle_effect_data, eid:number, is_last:boolean, times:number)
    self.action_delay_callback = function(bed, eid, is_last, times) self:on_action_delay_handle(bed, eid, is_last, times) end
    
    ---@type number[]
    self.timer_id_list = {}
end

---行为开始，根据配置延迟后开始
---@protected
function behavior_skill_effect:on_start()
    ---@type skill_effect_data
    local config_data = self.behavior_data.behavior_args.SkillEffectData
    self:log_assert(config_data ~= nil, "invalid SkillEffectData")

    local context = self.context
    local timer_id_list = self.timer_id_list
    ---@type skill_behavior_additional_data
    local additional_data = self.behavior_data.run_data.additional_data
    
    ---@type battle_effect_data 获取服务器伤害数据
    local server_data = additional_data.server_data
    ---@type boolean 最后一个技能效果数据
    local is_last_data = additional_data.is_last_data
    ---@type number 攻击次数
    local attack_times = additional_data.attack_times
    -- 回收附加数据
    context:recycle_free_table(additional_data)
    
    --if not helper.is_debug then
    --    self:log_info('get skill BTLEffect, run skill, has_effect_data = ', server_data ~= nil)
    --else
    --    local rapid = require 'rapidjson'
    --    self:log_info('get skill BTLEffect, run skill, cur_effect = ', rapid.encode(server_data))
    --end
    
    -- 开始攻击时触发相机事件
    self:set_camera_flow_handle(camera_event_type.BEGIN_ATTACK)
    
    -- 获取技能目标实体
    ---@type entity
    local target_entity = context:get_entity_by_primary_index(battle_components.uid, server_data.effect.target_id)
    if target_entity == nil then
        self:log_error("not found SkillEffect target entity, uid = ", helper.to_string(server_data.effect.target_id))
        return
    end
    
    -- 延迟应用技能效果数据和播放受击动作
    local action_timer_id = context.controller:add_timer(config_data.ActionDelayTime, self.action_delay_callback, server_data, 
            target_entity.eid, is_last_data, attack_times)
    timer_id_list[#timer_id_list + 1] = action_timer_id

    -- 伤害或治疗时才可以执行表现
    if config_data.EffectResDataList ~= nil then
        for i = 1, #config_data.EffectResDataList do
            local e_res_data = config_data.EffectResDataList[i]
            if not is_nil_or_empty(e_res_data.EffectId) then
                timer_id_list[#timer_id_list + 1] = context.controller:add_timer(e_res_data.DelayTime, self.effect_delay_callback, 
                        e_res_data, target_entity.eid)
            end
        end
    end

    -- 后处理
    self:on_post_processing_handle(target_entity.eid)
end

---动作延迟执行处理
---@private
---@param server_data battle_effect_data
---@param target_eid number
---@param is_last_data boolean
---@param attack_times number
function behavior_skill_effect:on_action_delay_handle(server_data, target_eid, is_last_data, attack_times)
    self:log_info("action delay handle, effect.mid = ", server_data.effect.mid, ", is_last_data = ", is_last_data)
    
    -- 获取暴击类型
    ---@type damage_number_type
    local damage_type
    if server_data.effect ~= nil and server_data.effect.damage ~= nil then
        damage_type = battle_utility.get_damage_number_type(server_data.effect.damage)
    end

    ---@type skill_effect_data 技能编辑器配置数据
    local skill_effect_config = self.behavior_data.behavior_args.SkillEffectData

    -- 显示技能效果处理
    skill_data_utility.show_skill_effect_handle(self.context, server_data, attack_times, is_last_data)

    ---@type show_unit_state_data
    local state_config = skill_effect_config.StateData
    if state_config ~= nil then
        ---@type entity 技能目标实体
        local target_entity = self.context:get_entity_by_primary_index(battle_components.eid, target_eid)
        ---@type boolean 触发buff流程
        local has_shield = self:on_damage_trigger_buff_flow(target_entity)
        
        -- 切换受击状态
        if not has_shield and target_entity ~= nil and state_config.UnitState > 0 then
            state_utility.try_switch_state_type(target_entity, state_config.UnitState)
        end
        -- 震屏数据
        local normal_shake_data = state_config.ShakeScreenConfig.ConfigList[1]
        -- 暴击逻辑
        self:on_critical_hit_handle(damage_type, target_entity)
        -- 非暴击震屏
        battle_effect_utility.generate_shake_screen_behavior(self, normal_shake_data)
    end

    -- 最后一个效果时执行如下逻辑
    if is_last_data then
        -- 检测目标单位是否死亡
        battle_effect_utility.check_unit_death_by_uid(self.context, server_data.effect.target_id, skill_effect_config.DeathType)

        -- 恢复被雅黑的战斗地图
        local battle_field_entity = self.context:get_unique_component(battle_components.battle_field)
        ---@type battle_map_component_data
        local battle_map_data = battle_field_entity:get_component(battle_components.battle_map)
        if battle_map_data ~= nil and battle_map_data.is_show then
            local begin_value = battle_constant.MAP_BRIGHTNESS_LESSEN_VALUE 
            local end_value = battle_constant.MAP_BRIGHTNESS_UNIVERSAL_VALUE
            local duration_time = battle_constant.MAP_BRIGHTNESS_DURATION_TIME
            battle_field_entity:replace_component(battle_components.battle_map, false, begin_value, end_value, duration_time)
        end
    end
end

---特效延迟执行处理
---@private
---@param res_data effect_res_data
---@param target_eid number
function behavior_skill_effect:on_effect_delay_handle(res_data, target_eid)
    local context = self.context
    if context == nil then return end

    local target_entity = context:get_entity_by_primary_index(battle_components.eid, target_eid)
    if target_entity ~= nil then
        local pos
        battle_utility.show_effect(context, target_entity, res_data.EffectId, res_data.IsSubObject, pos, pos, pos, res_data.PointName)
    end
end

---屏幕后处理
---@private
---@param target_eid number
function behavior_skill_effect:on_post_processing_handle(target_eid)
    ---@type show_unit_state_data
    local state_data = self.behavior_data.behavior_args.SkillEffectData.StateData
    if state_data == nil or state_data.PostProcessingConfig == nil then return end

    local delay_time<const> = 0
    local duration_time<const> = 0
    local class_name<const> = behavior_class_name.POST_PROCESSING

    ---@type skill_behavior_config_args
    local config_args = self.context:get_free_table("behavior_show_action.config_args")
    config_args.PostProcessingConfigData = state_data.PostProcessingConfig

    self:generate_behavior(delay_time, duration_time, class_name, config_args, target_eid)
end

---伤害触发buff流程
---@private
---@param target_entity entity
---@return boolean 是否存在护盾类Buff
function behavior_skill_effect:on_damage_trigger_buff_flow(target_entity)
    if target_entity == nil then return end
    
    ---@type { value:buff_data_component_data[] } buff列表
    local comp = target_entity:get_component(battle_components.buff_data)
    if comp == nil then return false end

    ---@type buff_data_component_data[] buff列表
    local buff_list = comp.value
    ---@type number 数量
    local buff_count = #buff_list
    -- 没有buff则不触发流程
    if buff_count == 0 then return end

    ---@type boolean 护盾Buff数量
    local shield_count = 0
    ---@type buff_trigger_event_type
    local event_type = buff_trigger_event_type.BE_HIT

    for i = 1, buff_count do
        local buff_data = buff_list[i]
        -- 检测护盾buff
        if buff_data.buff_type == battle_buff_type.SHIELD then
            shield_count = shield_count + 1
        end

        -- 检测是否配置了被击前端效果
        if buff_data.buff_director_data ~= nil and buff_data.buff_director_data.Map[event_type] ~= nil then
            local event_data = buff_data.buff_director_data.Map[event_type]
            if event_data ~= nil and #event_data.EventDataList > 0 then
                battle_effect_utility.trigger_buff_event_type(self.context, target_entity, event_type, buff_data.buff_uid)
            end
        end
    end

    return shield_count > 0
end

---暴击处理
---@private
---@param damage_type damage_number_type
---@param target_entity entity
function behavior_skill_effect:on_critical_hit_handle(damage_type, target_entity)
    if damage_type ~= damage_number_type.CRIT_DAMAGE then return end

    ---@type skill_effect_data
    local skill_effect_config = self.behavior_data.behavior_args.SkillEffectData
    if skill_effect_config.FreezeFrameConfigData == nil then return end

    -- 顿帧
    local freeze_data = skill_effect_config.FreezeFrameConfigData.ConfigList[1]
    battle_effect_utility.generate_freeze_battle_behavior(self, freeze_data)

    -- 暴击震屏
    local critical_shake_data = skill_effect_config.CriticalHitShakeScreenConfig
    if critical_shake_data == nil or skill_effect_config.StateData == nil then return end
    
    if critical_shake_data.ShakeForce >= skill_effect_config.StateData.ShakeScreenConfig.ConfigList[1].ShakeForce then
        battle_effect_utility.generate_shake_screen_behavior(self, critical_shake_data)
    end
    
    -- 播放音频
    if target_entity ~= nil and not is_nil_or_empty(skill_effect_config.CriticalHitAudioId) then
        target_entity:replace_component(battle_components.play_audio, skill_effect_config.CriticalHitAudioId)
    end
end

---清理行为
---@protected
function behavior_skill_effect:on_clear()
    local id_list = self.timer_id_list
    local context = self.context
    for i = 1, #id_list do
        context.controller:remove_timer(id_list[i])
        id_list[i] = nil
    end
end

---行为销毁
---@protected
function behavior_skill_effect:on_dispose()
    self.timer_id_list = nil
    
    self.effect_delay_callback = nil
    self.action_delay_callback = nil
end

return behavior_skill_effect