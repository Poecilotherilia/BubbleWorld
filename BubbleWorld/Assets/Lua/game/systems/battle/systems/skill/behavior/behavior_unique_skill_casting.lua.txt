---
--- Generated by wuhaijun
--- File name : behavior_unique_skill_casting.lua.txt
--- DateTime : 2021/12/02
--- Description : 
---     1. 屏幕渐变黑色，过度到到必杀施法流程
---     2. 播放必杀施法剧情动画，直到结束
---

---@type battle_helper
local helper = battle_helper
local enum_battle = enum.battle
local behavior_target_type = enum_battle.behavior_target_type
local camera_event_type = enum_battle.skill_camera_event_type
local message = message
---@type message_type
local message_type = enum.message_type
local UObject = cs.UObject

local wwise_util = require 'game/utils/wwise_util/wwise_util'
local wwise_const = wwise_const

---@type cutscene
local cutscene = require 'framework/cutscene/cutscene'
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type base_behavior
local super = require(helper.path.battle_skill .. 'behavior/base_behavior')

---@class behavior_unique_skill_casting : base_behavior
local behavior_unique_skill_casting = class("behavior_unique_skill_casting", super)

---提前结束事件名字
---@type string
local PREEACT_STOP_EVENT_NAME<const> = "PreactStop"

---构造函数
---@protected
function behavior_unique_skill_casting:ctor()
    super.ctor(self, self.cname)

    ---显示黑屏完毕
    ---@private
    ---@type fun(...)
    self.show_blank_fade_in_finished_callback = function()
        self:preload_skill_cutscene_handle()
    end

    ---防御倒计时回调
    ---@private
    ---@type fun()
    self.defense_time_finished_callback = function()
        self:on_defense_time_finished()
    end

    ---显示黑屏完毕
    ---@private
    ---@type fun()
    self.show_blank_finished_callback = function()
        self:on_show_blank_finished_handle()
    end

    ---加载动画完毕
    ---@private
    ---@type fun()
    self.load_animation_finished_callback = function()
        self:on_load_animation_finished()
    end

    ---动画事件
    ---@private
    ---@type fun()
    self.play_animation_event_callback = function(event_name)
        self:on_play_animation_event(event_name)
    end

    ---播放完毕回调
    ---@private
    ---@type fun()
    self.play_animation_finished_callback = function()
        self:on_play_animation_finished()
    end

    ---加载施法单位资源完成
    ---@protected
    ---@type fun(go:UnityEngine.GameObject)
    self.load_casting_unit_object_callback = function(go) self:on_load_casting_unit_object(go) end

    ---加载目标单位资源完成
    ---@protected
    ---@type fun(go:UnityEngine.GameObject)
    self.load_target_unit_object_callback = function(go) self:on_load_target_unit_object(go) end
    
    ---@private
    ---@type cutscene 必杀剧情动画
    self.unique_skill_cutscene = nil
    ---时间ID
    ---@private
    ---@type number
    self.blank_fade_in_timer_id, self.defense_time_timer_id, self.blank_screen_timer_id = nil, nil, nil
    ---技能施法者
    ---@private
    ---@type UnityEngine.GameObject
    self.skill_caster_object = nil
    ---技能目标
    ---@private
    ---@type { role_res_id:string, game_object:UnityEngine.GameObject }[]
    self.skill_target_list = {}
    ---是否跳过施法
    ---@private
    ---@type boolean
    self.is_skip_casting = nil
    ---是否显示跳过必杀UI
    ---@private
    ---@type boolean
    self.is_show_skip_ui = nil
    ---是否正在播放cutscene
    ---@private
    ---@type boolean
    self.is_playing_cutscene = nil
    ---加载到技能目标数量
    ---@private
    ---@type number
    self.loaded_target_count = nil
    ---是否改变了场景
    ---@private
    ---@type boolean
    self.is_change_scene = nil
    
    ---加载施法单位是否结束
    ---@private
    ---@type boolean
    self.is_load_caster_finished = nil
    ---加载技能目标们是否结束
    ---@private
    ---@type boolean
    self.is_load_targets_finished = nil
end

---行为开始，根据配置延迟后开始
---@protected
function behavior_unique_skill_casting:on_start()
    ---@type unique_skill_casting_data
    local data = self.behavior_data.behavior_args.UniqueSkillCastingData
    self:log_assert(data ~= nil, "invalid UniqueSkillCastingData")

    self.is_show_skip_ui = data.IsShowSkipUI
    
    -- 该行为自行控制行为结束时机
    self:set_can_add_end_timer(false)
    
    -- 显示黑屏淡入+立绘
    self:send_ult_skill_show_blank_screen(1)
    -- 黑屏淡入时间
    local fade_in_time = self.context.database:get_setting_const().KW_UTLSKILL_BLANK_SCREEN_FADE_IN_TIME
    self.blank_fade_in_timer_id = self.context.controller:add_timer_unscale(fade_in_time, self.show_blank_fade_in_finished_callback)
    
    -- 监听施法过程中的跳过必杀施法事件
    message.remove_listener(message_type.BATTLE_SKIP_UNIQUE_SKILL_CASTING_ANIMATION, self.on_skip_casting_animation, self)
    message.add_listener(message_type.BATTLE_SKIP_UNIQUE_SKILL_CASTING_ANIMATION, self.on_skip_casting_animation, self)
end

---预加载技能施法剧情动画
---@private
function behavior_unique_skill_casting:preload_skill_cutscene_handle()
    self.blank_fade_in_timer_id = nil
    
    -- 【防御机制】防止必杀施法动画没有加载到，卡住流程
    self.defense_time_timer_id = self.context.controller:add_timer_unscale(20000, self.defense_time_finished_callback)
    
    -- 是否跳过必杀
    self.is_skip_casting = self.context.database:get_is_jump_big_skill_ue(self.skill_data.caster_uid)
    if not self.is_skip_casting then
        ---@type unique_skill_casting_data
        local casting_data = self.behavior_data.behavior_args.UniqueSkillCastingData
        -- 创建必杀动画
        self.unique_skill_cutscene = cutscene.new(casting_data.ResPath, self.context.database:get_sound_volume_setting())
        -- 加载施法者和技能目标
        self:load_caster_and_targets(casting_data.IsChangeScene)
    else
        -- 立绘倒计时
        local show_time = self.context.database:get_setting_const().KW_UTLSKILL_BLANK_SCREEN_SHOW_TIME
        self.blank_screen_timer_id = self.context.controller:add_timer_unscale(show_time, self.show_blank_finished_callback)
    end
end

---黑屏播放完毕，尝试播放必杀
---@private
function behavior_unique_skill_casting:on_show_blank_finished_handle()
    self.blank_screen_timer_id = nil
    -- 必杀被跳过，主动结束施法行为
    self:autonomously_ending_behavior()
end

---获取施法者和目标
---@private
---@param is_change boolean 是否改变了场景
function behavior_unique_skill_casting:load_caster_and_targets(is_change)
    self.is_change_scene = is_change
    
    local battle_renderer = self.context.renderer
    local parent_trans = battle_renderer:get_root_transform()
    helper.clear(self.skill_target_list)

    -- 加载施法者模型
    local caster_info = self.context.database:get_unit_info_by_uid(self.skill_data.caster_uid)
    battle_renderer:load_gameobject_async(caster_info.res_path, parent_trans, self.load_casting_unit_object_callback)

    -- 加载技能目标模型
    ---@type entity[]
    local entity_list = self:get_behavior_targets(behavior_target_type.ALL_EFFECT_TARGET)
    self.loaded_target_count = #entity_list
    if is_change then
        for i = 1, self.loaded_target_count do
            ---@type battle_unit_info
            local target_info = entity_list[i]:get_component(battle_components.unit_info).value
            battle_renderer:load_gameobject_async(target_info.res_path, parent_trans, self.load_target_unit_object_callback, target_info.role_res_mid)
        end
    else
        for i = 1, self.loaded_target_count do
            ----@type render_battle_unit
            local render_unit = battle_renderer:get_render_unit(entity_list[i].eid)
            self.skill_target_list[#self.skill_target_list + 1] =
            {
                role_res_id = render_unit:get_role_res_mid(),
                game_object = UObject.Instantiate(render_unit.gameobject, parent_trans)
            }
        end
        self.loaded_target_count = 0
        self:on_load_target_unit_object()
    end
end

---加载施法单位完毕
---@private
---@param unit_obj UnityEngine.GameObject
function behavior_unique_skill_casting:on_load_casting_unit_object(unit_obj)
    self.skill_caster_object = unit_obj
    self.unique_skill_cutscene:set_skill_caster(unit_obj)
    self.is_load_caster_finished = true
    self:try_2_load_cutscene_handle()
end

---加载目标单位完毕
---@private
---@param unit_obj UnityEngine.GameObject
function behavior_unique_skill_casting:on_load_target_unit_object(unit_obj)
    self.loaded_target_count = self.loaded_target_count - 1
    if unit_obj ~= nil then
        self.skill_target_list[#self.skill_target_list + 1] =
        {
            role_res_id = unit_obj.name,
            game_object = unit_obj
        }
    end
    
    if self.loaded_target_count > 0 then return end

    self.is_load_targets_finished = true
    self.unique_skill_cutscene:set_skill_targets(self.skill_target_list)
    self:try_2_load_cutscene_handle()
end

---尝试加载必杀动画
---@private
function behavior_unique_skill_casting:try_2_load_cutscene_handle()
    -- 施法者和技能目标都加载完毕后，开始加载必杀动画
    if self.is_load_caster_finished and self.is_load_targets_finished then
        self.unique_skill_cutscene:preload_async(self.load_animation_finished_callback)
    end
end

---加载动画完毕，尝试播放必杀
---@private
function behavior_unique_skill_casting:on_load_animation_finished()
    -- 关闭黑屏+立绘
    self:send_ult_skill_show_blank_screen(2)

    -- 开始播放
    self.is_playing_cutscene = true
    -- self.unique_skill_cutscene:set_update_mode(self.context.renderer:get_cutscene_update_mode())
    wwise_util.set_state_by_id(wwise_const.StateIds.State_Volume_3)
    self.unique_skill_cutscene:play(self.play_animation_event_callback, self.play_animation_finished_callback, false)
end

---防御计时完毕，检测动画是否执行成功
---@private
function behavior_unique_skill_casting:on_defense_time_finished()
    self.defense_time_timer_id = nil

    -- 计时完毕，仍没有成功播放施法动画，主动结束行为
    if not self.is_playing_cutscene then
        self:autonomously_ending_behavior()
    end
end

---动画播放完毕回调
---@private
function behavior_unique_skill_casting:on_play_animation_finished()
    if not self.is_playing_cutscene then return end
    
    self.is_playing_cutscene = false
    wwise_util.set_state_by_id(wwise_const.StateIds.State_Volume_Normal)
    self:log_info("the unique skill casting animation has finished!")
    
    -- 白屏淡出
    self:send_ult_skill_show_blank_screen(3)
    -- 主动结束行为
    self:set_behavior_finish()
end

---必杀动画触发事件
---@private
function behavior_unique_skill_casting:on_play_animation_event(event_name)
    self:log_info("Received unique skill cutscene event, name = ", event_name, ', target = ', PREEACT_STOP_EVENT_NAME)
    if event_name == PREEACT_STOP_EVENT_NAME then
        self:set_after_behavior_data()
    end
end

---主动结束该行为
---@protected
function behavior_unique_skill_casting:autonomously_ending_behavior()
    -- 关闭黑屏+立绘
    self:send_ult_skill_show_blank_screen(2)
    -- 白屏淡出
    self:send_ult_skill_show_blank_screen(3)
    -- 主动结束
    self:set_after_behavior_data()
    self:set_behavior_finish()
end

---发送必杀显示黑屏
---@private
---@param state number 状态：1=显示黑屏+立绘，2=关闭黑屏+立绘，3=白屏淡出
function behavior_unique_skill_casting:send_ult_skill_show_blank_screen(state)
    local caster_info = self.context.database:get_unit_info_by_uid(self.skill_data.caster_uid)
    self.context.message:send_ultskill_show_blank_screen(state, self.is_show_skip_ui, self.skill_data.caster_uid, caster_info.team_type)
end

---设置后续行为数据
---@protected
function behavior_unique_skill_casting:set_after_behavior_data()
    self:log_info('set after behavior data')
    
    -- 此时镜头移至公共观察位
    self:set_camera_flow_handle(camera_event_type.ULTSKILL_CASTING_END, 0)
    
    -- 主动执行后续行为
    local dynamic_eid = self.behavior_data.run_data.dynamic_eid
    local behavior_ids = self.behavior_data.follow_up_ids
    self:execute_other_behavior_handle(dynamic_eid, behavior_ids)
end

---设置后续行为
---@protected
function behavior_unique_skill_casting:set_follow_up_behaviors()
    -- 因为已经提前执行了后续行为，这里只触发，不设置数据
    self:execute_other_behavior_handle()
end

---跳过施法动画并主动执行后续行为
---@protected
function behavior_unique_skill_casting:on_skip_casting_animation()
    if self.unique_skill_cutscene == nil then return end

    self:set_after_behavior_data()
    self.unique_skill_cutscene:skip()
end

---清理
---@private
function behavior_unique_skill_casting:on_clear()
    message.remove_listener(message_type.BATTLE_SKIP_UNIQUE_SKILL_CASTING_ANIMATION, self.on_skip_casting_animation, self)

    self.context.renderer:unload_gameobject(self.skill_caster_object)
    self.skill_caster_object = nil
    
    for i = 1, #self.skill_target_list do
        local obj = self.skill_target_list[i].game_object
        if self.is_change_scene then
            obj:SetActive(true)
            self.context.renderer:unload_gameobject(obj)
        else
            UObject.Destroy(obj)
        end
        self.skill_target_list[i] = nil
    end

    if self.blank_fade_in_timer_id ~= nil then
        self.context.controller:remove_timer_unscale(self.blank_fade_in_timer_id)
        self.blank_fade_in_timer_id = nil
    end
    if self.blank_screen_timer_id ~= nil then
        self.context.controller:remove_timer_unscale(self.blank_screen_timer_id)
        self.blank_screen_timer_id = nil
    end
    if self.defense_time_timer_id ~= nil then
        self.context.controller:remove_timer_unscale(self.defense_time_timer_id)
        self.defense_time_timer_id = nil
    end

    self.is_playing_cutscene = false
    wwise_util.set_state_by_id(wwise_const.StateIds.State_Volume_Normal)
    if self.unique_skill_cutscene ~= nil then
        self.unique_skill_cutscene:dispose()
        self.unique_skill_cutscene = nil
    end

    self.is_change_scene = false
    self.is_skip_casting = false
    self.is_load_caster_finished = false
    self.is_load_targets_finished = false
end

---销毁行为
---@protected
function behavior_unique_skill_casting:on_dispose()
    self.is_playing_cutscene = nil
    self.skill_caster_object = nil
    self.skill_target_list = nil
    self.is_skip_casting = nil
    self.is_show_skip_ui = nil
    self.loaded_target_count = nil
    self.is_load_caster_finished = nil
    self.is_load_targets_finished = nil

    self.show_blank_fade_in_finished_callback = nil
    self.preload_skill_cutscene_callback = nil
    self.load_animation_finished_callback = nil
    self.play_animation_finished_callback = nil
    self.play_animation_event_callback = nil
    self.load_casting_unit_object_callback = nil
    self.load_target_unit_object_callback = nil
end

return behavior_unique_skill_casting