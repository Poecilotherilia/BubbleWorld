---
--- Generated by wuhaijun
--- File name : behavior_post_processing.lua.txt
--- DateTime : 2023/02/07
--- Description : 后处理
---

---@type battle_helper
local helper = battle_helper
local TweenUtil =  cs.TweenUtil
local ease_linear = cs.Ease.Linear
local update_manual = cs.UpdateType.Manual
local scriptableobject = df.enum.asset_type.scriptableobject
local string_is_nil_or_empty = string.is_nil_or_empty

---@type base_behavior
local super = require(helper.path.battle_skill .. 'behavior/base_behavior')

---@class behavior_post_processing : base_behavior
local behavior_post_processing = class("behavior_post_processing", super)

---构造函数
---@protected
function behavior_post_processing:ctor()
    super.ctor(self, self.cname)

    ---显示黑屏完毕
    ---@private
    ---@type fun()
    self.show_finished_callback = function() self:set_behavior_finish() end
    
    ---序列列表
    ---@private
    ---@type DG.Tweening.Sequence[]
    self.sequence_list = {}
    ---加载的资源列表
    ---@private
    ---@type DeusFramework.Res.Model.DfRes[]
    self.profile_asset_list = {}
    ---volume列表
    ---@private
    ---@type DeusFramework.Res.Model.DfRes[]
    self.volume_list = {}
end

---行为开始，根据配置延迟后开始
---@public
---@param data post_processing_config_data
function behavior_post_processing:on_start(data, finish_callback)
    data = data or self.behavior_data.behavior_args.PostProcessingConfigData
    self:log_assert(data ~= nil, "invalid PostProcessingConfigData")

    -- 该行为自行控制行为结束时机
    self:set_can_add_end_timer(false)
    
    ---@type number
    local duration_time = 0
    for i = 1, #data.ProfileList do
        duration_time = duration_time + self:on_process_volume_profile(data.ProfileList[i])
    end

    finish_callback = finish_callback or self.show_finished_callback
    self.context.controller:add_timer(duration_time, finish_callback)
end

---处理Volume Profile数据
---@private
---@param config_data volume_profile_config_data
---@return number 总耗时(毫秒)
function behavior_post_processing:on_process_volume_profile(config_data)
    -- 获取一个Volume
    local renderer = self.context.renderer
    local volume = renderer:get_volume()
    self.volume_list[#self.volume_list + 1] = volume
    volume.weight = 0

    if string_is_nil_or_empty(config_data.ProfilePath) then
        self:log_error('Invalid VolumeProfile path, please check the skill config')
    end

    -- 加载Volume Profile
    local profile_asset = self.context.renderer:load_asset(config_data.ProfilePath, scriptableobject)
    if profile_asset ~= nil then
        self.profile_asset_list[#self.profile_asset_list + 1] = profile_asset
        volume.profile = profile_asset.Result
    end

    -- 延迟执行
    ---@type number
    local max_time = config_data.DelayTime
    
    -- 获取执行次序
    ---@type DG.Tweening.Sequence
    local sequence = TweenUtil.GetSequence(update_manual)
    self.sequence_list[#self.sequence_list + 1] = sequence
    sequence:AppendInterval(config_data.DelayTime / 1000)
    
    -- 执行后处理时间配置
    for _ = 1, config_data.LoopTimes do
        for i = 1, #config_data.TimeList do
            local time = config_data.TimeList[i]
            max_time = max_time + time.FadeInTime + time.DurationTime + time.FadeOutTime
            sequence:Append(self:show_volume_fade_handle(time.StartValue, time.EndValue, time.FadeInTime, volume))
            sequence:AppendInterval(time.DurationTime / 1000)
            sequence:Append(self:show_volume_fade_handle(time.EndValue, time.StartValue, time.FadeOutTime, volume))
        end
    end

    -- 播放序列
    sequence:PlayForward()
    
    return max_time
end

---后处理融合处理
---@private
---@param start_value number 开始值
---@param end_value number 结束值
---@param fade_time number 融合时间
---@return DG.Tweening.Tween
function behavior_post_processing:show_volume_fade_handle(start_value, end_value, fade_time, volume)
    local t = TweenUtil.DoChangeFloat(start_value, end_value, fade_time / 1000, 0, 
            function(value) volume.weight = value end, nil, ease_linear, update_manual)
    return t
end

---清理行为
---@protected
function behavior_post_processing:on_clear()
    local sequence_list = self.sequence_list
    for i = 1, #sequence_list do
        TweenUtil.Clear(sequence_list[i])
        sequence_list[i] = nil
    end
    
    local asset_list = self.profile_asset_list
    for i = 1, #asset_list do
        local asset = asset_list[i]
        self.context.renderer:unload_asset(asset)
        asset_list[i] = nil
    end

    local volume_list = self.volume_list
    for i = 1, #volume_list do
        local volume = volume_list[i]
        self.context.renderer:recycle_volume(volume)
        volume_list[i] = nil
    end
end

---销毁行为
---@protected
function behavior_post_processing:on_dispose()
    self.volume_list = nil
    self.profile_asset_list = nil
    self.sequence_list = nil
end

return behavior_post_processing