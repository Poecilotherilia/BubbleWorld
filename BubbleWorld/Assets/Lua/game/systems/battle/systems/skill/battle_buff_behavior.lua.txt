---
--- Generated by wuhaijun
--- File name : battle_buff_behavior.lua.txt
--- DateTime : 2021/09/29
--- Description : Buff行为处理
---

---@type battle_helper
local helper = battle_helper
local is_nil_or_empty = string.is_nil_or_empty
local table_remove = table.remove
---@type enum_battle
local enum_battle = enum.battle
local buff_trigger_event_type = enum_battle.buff_trigger_event_type
local data_mgr = data
local table_names = tables
local camera_skill_type = enum_battle.skill_camera_skill_type
local buff_perform_state = enum_battle.buff_perform_state

---@type battle_effect_utility
local battle_effect_utility = require(helper.path.battle_skill .. 'utility/battle_effect_utility')
---@type skill_data_utility
local skill_data_utility = require(helper.path.battle_skill .. 'utility/skill_data_utility')
---@type state_utility
local state_utility = require(helper.path.battle_fsm .. 'state_utility')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type battle_components
local battle_components = require(helper.path.battle_components)

---@class battle_buff_behavior
local battle_buff_behavior = class("battle_buff_behavior")

---构造函数
---@protected
---@param context context
function battle_buff_behavior:ctor(context)
    self.context = context

    ---Buff触发事件延迟时间回调
    ---@private
    ---@type fun()
    self.trigger_event_delay_time_callback = function(...) self:on_trigger_event_delay_time(...) end
    ---Buff触发事件完成时间回调
    ---@private
    ---@type fun()
    self.trigger_event_finished_time_callback = function(...) self:on_trigger_event_finished_time(...) end

    ---@private
    ---@type entity[]
    self.entity_cache_list = nil
    ---@private
    ---@type collector
    self.behavior_collector = nil
end

---初始化
---@public
function battle_buff_behavior:initialize()
    self.entity_cache_list = {}
    self.behavior_collector = self.context:get_collector(matchers.all(battle_components.buff_behavior))
end

---执行(每帧)
---@public
function battle_buff_behavior:execute()
    self:on_update_collector_handle()
end

---添加或更新收集器处理
---@private
function battle_buff_behavior:on_update_collector_handle()
    if not self.behavior_collector:has_entity() then return end

    local list, count = self.behavior_collector:get_entity_list(self.entity_cache_list)
    self.behavior_collector:clear_entity()

    for i = 1, count do
        local entity = list[i]
        ---@type queue queue<buff_behavior_component_data>
        local data_queue = entity:get_component(battle_components.buff_behavior).value
        while not data_queue:is_empty() do
            ---@type buff_behavior_component_data
            local tmp_data = data_queue:dequeue()
            self:on_buff_behavior_handle(entity, tmp_data)
            self.context:recycle_free_table(tmp_data)
        end
    end
end

---行为组件处理
---@private
---@param entity entity
---@param behavior_data buff_behavior_component_data
function battle_buff_behavior:on_buff_behavior_handle(entity, behavior_data)
    helper.log_skill("trigger buff behavior, buff_uid = ", behavior_data.buff_uid.index, '_', behavior_data.buff_uid.svrid, 
            ', event_type = ', behavior_data.event_type, ', eid = ', entity.eid)
    
    local context = self.context
    -- 没有buff数据时跳过
    ---@type { value:buff_data_component_data[] } buff列表
    local buff_data_comp = entity:get_component(battle_components.buff_data)
    if buff_data_comp == nil then return end
    
    ---@type buff_data_component_data[]
    local buff_data_list = buff_data_comp.value
    if buff_data_list == nil then return end
    
    for i = 1, #buff_data_list do
        local buff_data = buff_data_list[i]
        if buff_data.buff_uid == behavior_data.buff_uid then
            ---@type boolean 是否是移除buff事件
            local is_remove = behavior_data.event_type == buff_trigger_event_type.REMOVE or
                    behavior_data.event_type == buff_trigger_event_type.REMOVE_CRUSH or
                    behavior_data.event_type == buff_trigger_event_type.REMOVE_REPLACE or
                    behavior_data.event_type == buff_trigger_event_type.REMOVE_DISPEL or
                    behavior_data.event_type == buff_trigger_event_type.REMOVE_PURIFY

            -- 移除buff时，移除相关效果
            if is_remove then
                self:remove_buff_handle(entity, buff_data)
            end

            -- 触发事件特效
            self:on_buff_trigger_event_data(entity, buff_data, behavior_data)

            -- 移除buff时，回收相关数据
            if is_remove then
                table_remove(buff_data_list, i)
                context:recycle_battle_buff_data(buff_data)
                if behavior_data.perform_state ~= buff_perform_state.HAS_PERFORM then
                    skill_data_utility.recycle_battle_skill_data(context, behavior_data.skill_data)
                end
            end
            break
        end
    end
end

---处理Buff触发事件数据
---@private
---@param entity entity
---@param buff_data buff_data_component_data
---@param behavior_data buff_behavior_component_data
function battle_buff_behavior:on_buff_trigger_event_data(entity, buff_data, behavior_data)
    local context = self.context
    ---@type battle_skill_data
    local skill_data = behavior_data.skill_data
    ---@type buff_perform_state
    local perform_state = behavior_data.perform_state
    ---@type number 展示时间
    local show_time = 0

    helper.log_skill("trigger buff event, buff_uid = ", behavior_data.buff_uid.index, '_', behavior_data.buff_uid.svrid,
        ', perform_state = ', perform_state, ', buff_mid = ', buff_data.buff_mid, ', eid = ', entity.eid,
            ', event_type = ', behavior_data.event_type)
    
    -- 延迟执行buff表现流程
    if buff_data.buff_director_data ~= nil then
        ---@type buff_behavior_config_data
        local event_config = buff_data.buff_director_data.Map[behavior_data.event_type]
        if event_config ~= nil then
            for i = 1, #event_config.EventDataList do
                local event_data = event_config.EventDataList[i]
                context.controller:add_timer(event_data.DelayTime, self.trigger_event_delay_time_callback, entity.eid, 
                        event_data, buff_data, perform_state, skill_data)
                if perform_state == buff_perform_state.HAS_PERFORM then
                    show_time = show_time + event_data.DelayTime + event_data.ShowTimeValue
                end
            end
        end
    end

    -- 没有服务器数据时，无需执行后续流程
    if skill_data ~= nil then
        if perform_state == buff_perform_state.FINAL_ATTACK then
            self:on_show_skill_effect_handle(skill_data)
        end
        
        -- 显示时间接受后，触发下一阶段
        if perform_state == buff_perform_state.HAS_PERFORM or perform_state == buff_perform_state.FINAL_ATTACK then
            context.controller:add_timer(show_time, self.trigger_event_finished_time_callback, skill_data)
        end
    end
end

---Buff触发事件延迟时间处理
---@private
---@param eid number
---@param event_data buff_trigger_event_data
---@param buff_data buff_data_component_data
---@param perform_state buff_perform_state
---@param skill_data battle_skill_data
function battle_buff_behavior:on_trigger_event_delay_time(eid, event_data, buff_data, perform_state, skill_data)
    -- 数据可能为空，比如战斗结束时，延迟时间未到，后端发送了移除该buff的消息，就出现这种情况
    if buff_data == nil or buff_data.running_data == nil then return end
    
    local context = self.context
    ---@type entity
    local unit_entity = context:get_entity_by_primary_index(battle_components.eid, eid)
    
    -- 如果buff有表演，执行对应的逻辑
    if perform_state == buff_perform_state.HAS_PERFORM then
        -- 显示技能效果
        self:on_show_skill_effect_handle(skill_data)
        -- buff镜头流程
        battle_utility.set_skill_camera_component_data(unit_entity, camera_skill_type.BUFF)
    end

    if event_data ~= nil then
        local running_data = buff_data.running_data
        -- 切换状态
        local state_mid = state_utility.get_state_mid_by_type(event_data.UnitState)
        if state_mid ~= nil then
            state_utility.try_switch_state(unit_entity, state_mid)

            -- 记录循环的动作，移除时处理
            if data_mgr.get(table_names.BTLState.name, state_mid, table_names.BTLState.properties.IsLoop) == 1 then
                if running_data.state_data == nil then
                    running_data.state_data = context:get_free_table("battle_buff_behavior.trigger_event_delay_time_finished.state")
                end
                running_data.state_data.type = 1
                running_data.state_data.id = state_mid
            end
        end

        -- 播放特效
        local pos_x, pos_y, pos_z = 0, 0, 0
        local effect_list = event_data.EffectList
        for i = 1, #effect_list do
            local effect_data = effect_list[i]
            if not is_nil_or_empty(effect_data.EffectId) then
                battle_utility.show_effect(context, unit_entity, effect_data.EffectId, effect_data.IsSubObject, pos_x, pos_y, pos_z)

                -- 记录循环的特效，移除时处理
                if effect_data.IsLoop then
                    ---@type skill_buff_running_data
                    local loop_data = context:get_free_table("battle_buff_behavior.trigger_event_delay_time_finished.Effect")
                    loop_data.type = 2
                    loop_data.id = effect_data.EffectId

                    running_data[#running_data + 1] = loop_data
                end
            end
        end

        -- 材质球数据
        battle_utility.show_material_operation(unit_entity, event_data.MaterialOperationConfig)
    end
end

---显示技能效果处理
---@private
---@param skill_data battle_skill_data
function battle_buff_behavior:on_show_skill_effect_handle(skill_data)
    if skill_data == nil then return false end

    -- 应用服务器数据
    local effect_count = #skill_data.effect_list
    for i = 1, effect_count do
        local is_last_data = i == effect_count
        skill_data_utility.show_skill_effect_handle(self.context, skill_data.effect_list[i], 0, is_last_data)
    end

    -- 检测最后一击
    if battle_effect_utility.check_battle_final_attack(self.context) then
        local skill_entity = self.context:get_unique_component(battle_components.skill_entity)
        if not skill_entity:has_component(battle_components.final_attack) then
            skill_entity:add_component(battle_components.final_attack)
        end
    end
end

---Buff触发事件完成时间处理
---@public
---@param skill_data battle_skill_data
function battle_buff_behavior:on_trigger_event_finished_time(skill_data)
    -- 检测目标单位死亡
    battle_effect_utility.check_unit_death_by_uid(self.context, skill_data.target_uid)
    -- 触发下一个技能逻辑
    skill_data_utility.trigger_next_skill_handle(self.context, skill_data)
end

---移除buff处理, 需要把该Buff附加的效果全部移除掉：循环的特效，循环的动作，持续的特殊效果
---@private
---@param entity entity
---@param buff_data buff_data_component_data
function battle_buff_behavior:remove_buff_handle(entity, buff_data)
    -- 移除循环效果
    for _, value in pairs(buff_data.running_data) do
        if value.type == 1 then
            -- 1=退出状态
            state_utility.exit_state(entity, value.id)
        elseif value.type == 2 then
            -- 2=移除特效
            battle_utility.remove_effect(entity, value.id)
        end
    end
end

---卸载
---@public
function battle_buff_behavior:tear_down()
    self.context:destroy_collector(self.behavior_collector)
    self.behavior_collector = nil
    helper.clear_array(self.entity_cache_list)
    self.entity_cache_list = nil

    self.context = nil

    self.trigger_event_delay_time_callback = nil
    self.trigger_event_finished_time_callback = nil
end

return battle_buff_behavior