---
--- Generated by wuhaijun
--- File name : base_behavior.lua.txt
--- DateTime : 2021/07/05
--- Description : 行为基类
---       生命周期，根据情况重写：
---         on_start()      行为开始，根据配置延迟后开始
---         on_update()     每帧更新
---         on_end()        行为结束
---         on_clear()	    行为清理
---         on_dispose()    行为销毁
---
---       实用方法：
---         get_behavior_targets(...)               获取行为目标
---         get_current_entity()                    获取当前执行行为的实体
---         get_current_eid()                       获取当前执行行为的实体id
---         set_add_end_timer(is_add)               设置是否能够添加结束Timer
---         set_camera_flow_handle(...)             设置相机流程
-----       set_follow_up_behaviors()               设置后续行为
---         set_behavior_finish()                   设置行为结束
---         generate_behavior(...)                  生成行为
---
---         log_info(...)                           打印信息
---         log_error(...)                          打印错误
---         log_assert(...)                         断言
---

---@type battle_helper
local helper = battle_helper
local table_remove = table.remove

---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type skill_target_utility
local skill_target_utility = require(helper.path.battle_skill .. 'utility/skill_target_utility')
---@type battle_components
local battle_components = require(helper.path.battle_components)

---@class base_behavior 
local base_behavior = class("base_behavior")

---构造函数
---@protected
---@param type string 行为类型
function base_behavior:ctor(type)
    ---当前行为类型
    ---@public
    ---@type string
    self.behavior_type = type
    ---开始行为
    ---@protected
    ---@type fun()
    self.start_callback = function()
        self.delay_timer_id = nil
        self:on_delay_start()
    end
    ---行为结束
    ---@protected
    ---@type fun()
    self.end_callback = function()
        self.duration_timer_id = nil
        self:set_behavior_finish()
    end
    ---激活状态
    ---@protected
    ---@type boolean
    self.is_active = nil
    ---是否初始化
    ---@protected
    ---@type boolean
    self.is_init = nil
    ---结果列表
    ---@private
    ---@type table[]
    self.result_table_list = nil

    --region 参数部分
    ---行为id
    ---@protected
    ---@type number
    self.bid = nil
    ---战斗上线文环境
    ---@protected
    ---@type context
    self.context = nil
    ---技能数据
    ---@protected
    ---@type battle_skill_data
    self.skill_data = nil
    ---行为数据
    ---@protected
    ---@type skill_behavior_data
    self.behavior_data = nil
    ---技能配置id
    ---@protected
    ---@type string
    self.behavior_config_id = nil
    ---是否延迟开始
    ---protected
    ---@type boolean
    self.is_delay_start = nil
    
    ---是否添加结束timer
    ---@private
    ---@type boolean
    self.is_can_add_end_timer = nil
    ---延迟Timer Id
    ---@private
    ---@type number
    self.delay_timer_id = nil
    ---持续Timer Id
    ---@private
    ---@type number
    self.duration_timer_id = nil
    --endregion
end

--region 编辑器方法
---技能编辑器方法
---@private
local on_editor_start = function(cid)
    local battle_ctrl = _battle_ctrl
    if battle_ctrl == nil then return end

    if battle_ctrl._behavior_start_callback ~= nil then
        battle_ctrl._behavior_start_callback(cid)
    end
end
--endregion

--region 共有方法
---初始化数据
---@public
---@param context context
---@param skill_data battle_skill_data 技能数据
---@param behavior_data skill_behavior_data 模板数据
function base_behavior:init_data(context, skill_data, behavior_data)
    if self.is_init then
        self:log_error('behavior is already init_data')
        return
    end
    self.is_init = true

    self.bid = behavior_data.bid
    self.context = context
    self.skill_data = skill_data
    self.behavior_data = behavior_data
    self.behavior_config_id = behavior_data.run_data.behavior_id

    -- 方便配置，重新计算真实结束时间点
    if behavior_data.duration_time > 0 then
        self.behavior_data.duration_time = behavior_data.duration_time - behavior_data.delay_time
    end
    self:log_assert(self.behavior_data.duration_time >= 0, "behavior Duration time point error, time = ", 
            self.behavior_data.duration_time)
    
    -- 初始化行为参数
    self:set_active(true)
    self:set_actived_behaviors(true)
    self.is_can_add_end_timer = true
    
    self:log_info('behavior init data, delay_time = ', self.behavior_data.delay_time, 'ms')
    
    -- 延迟开始
    self:add_delay_start_timer()
end

---行为更新
---@public
function base_behavior:behavior_update()
    if not self:get_active() then return end
    if not self.is_delay_start then return end

    self:on_update()
end

---获取唯一id
---@public
---@return number
function base_behavior:get_bid()
    return self.bid
end

---获取激活状态
---@public
---@return boolean
function base_behavior:get_active()
    return self.is_active
end

---设置行为激活状态
---@public
---@param active boolean
function base_behavior:set_active(active)
    if self.is_active == active then return end
    self.is_active = active
end

---设置行为结束
---@public
function base_behavior:set_behavior_finish()
    if not self.is_init then return end
    self.is_init = false

    self:log_info('behavior finished')
    
    -- 设置不激活状态
    self:set_active(false)
    -- 结束处理
    self:on_end()
    -- 移除行为记录
    self:set_actived_behaviors(false)
    -- 设置后续行为
    self:set_follow_up_behaviors()
    -- 结束回调
    self.behavior_data.behavior_finished_callback(self.behavior_data)
end

---清理
---@public
function base_behavior:clear()
    self:on_clear_timer()
    self:on_clear()
    self:on_clear_base()
end

---销毁
---@public
function base_behavior:dispose()
    self:on_dispose()
    
    self.behavior_type = nil
    self.start_callback = nil
    self.end_callback = nil
    self.is_active = nil
    self.is_init = nil
end
--endregion

--region 行为生命周期
---行为开始，根据配置延迟后开始
---@protected
function base_behavior:on_start()
end

---每帧更新
---@public
function base_behavior:on_update()
end

---行为结束
---@protected
function base_behavior:on_end()
end

---清理行为
---@protected
function base_behavior:on_clear()
end

---销毁行为
---@protected
function base_behavior:on_dispose()
end
--endregion

--region 实用方法
---获取目标列表
---@protected
---@param target_mid string SkillTarget表Id
---@param target_args skill_target_data 获取目标所需参数
---@return entity[] | number[][] 结果列表
function base_behavior:get_behavior_targets(target_mid, target_args)
    local context = self.context
    local result_list = context:get_free_table("base_behavior.get_behavior_targets.result_list")
    
    if self.result_table_list == nil then
        self.result_table_list = context:get_free_table("base_behavior.get_behavior_targets.result_table_list")
    end
    self.result_table_list[#self.result_table_list + 1] = result_list
    
    local run_data = self.behavior_data.run_data
    skill_target_utility.get_targets(target_mid, context, self.skill_data, run_data, target_args, result_list)

    return result_list
end

---获取当前执行行为的实体
---@protected
---@return entity
function base_behavior:get_current_entity()
    return self.context:get_entity_by_primary_index(battle_components.eid, self:get_current_eid())
end

---获取当前执行行为的实体id
---@protected
---@return number
function base_behavior:get_current_eid()
    return self.behavior_data.run_data.current_eid
end

---生成行为
---@protected
---@param delay number 延迟时间
---@param duration number 持续时间
---@param class_name string 行为配置id
---@param config_args skill_behavior_config_args 行为配置参数
---@param execute_eid number 执行行为的实体id
---@param follow_up_ids number[] 后续行为id列表
---@param dynamic_eid number 动态的行为目标eid，一般用于指定子弹击中的目标
---@param additional_data any 用于行为间传递额外的运行时数据
---@return number 行为id
function base_behavior:generate_behavior(delay, duration, class_name, config_args, execute_eid, follow_up_ids, 
                                         dynamic_eid, additional_data)
    ---@type skill_behavior_data
    local behavior_data = self.behavior_data.get_behavior_data_callback()
    behavior_data.delay_time = delay
    behavior_data.duration_time = duration
    behavior_data.class_name = class_name
    behavior_data.behavior_args = config_args
    behavior_data.follow_up_ids = follow_up_ids

    behavior_data.run_data = self.context:get_skill_running_data(nil, self.cname)
    behavior_data.run_data.current_eid = execute_eid or self:get_current_eid()
    behavior_data.run_data.dynamic_eid = dynamic_eid or self.behavior_data.run_data.dynamic_eid
    behavior_data.run_data.additional_data = additional_data or self.behavior_data.run_data.additional_data

    behavior_data.is_internal = true

    -- 生成行为
    self.behavior_data.generate_behavior_callback(self.skill_data, behavior_data)

    return behavior_data.bid
end

---设置是否添加结束Timer
---@protected
---@param is_add boolean true=添加, false=不添加
function base_behavior:set_can_add_end_timer(is_add)
    self.is_can_add_end_timer = is_add
end

---设置镜头流程
---@protected
---@param event_type skill_camera_event_type 事件点
---@param blend_time number 镜头融合时间
---@param target_eid number 目标实体id
---@param look_at_time_ratio number 镜头看向目标时间
function base_behavior:set_camera_flow_handle(event_type, blend_time, target_eid, look_at_time_ratio)
    local caster_uid = self.skill_data.caster_uid
    if target_eid == nil then
        local target_entity = self.context:get_entity_by_primary_index(battle_components.uid, self.skill_data.target_uid)
        if target_entity ~= nil then
            target_eid = target_entity.eid
        end
    end
    blend_time = blend_time or 0
 
    battle_utility.set_skill_camera_following_flow(self.context, caster_uid, target_eid, event_type, blend_time, nil, look_at_time_ratio)
end

---设置后续行为
---@protected
function base_behavior:set_follow_up_behaviors()
    local dynamic_eid = self.behavior_data.run_data.dynamic_eid
    local behavior_ids = self.behavior_data.follow_up_ids
    self:execute_other_behavior_handle(dynamic_eid, behavior_ids)
end

---执行其他行为处理
---@protected
---@param dynamic_eid number 执行eid，执行其他行为中会使用到
---@param behavior_ids number[] 要执行的行为id列表
---@param additional_data any 用于行为间传递额外的运行时数据
function base_behavior:execute_other_behavior_handle(dynamic_eid, behavior_ids, additional_data)
    ---@type Ident 施法单位uid
    local caster_uid = self.skill_data.caster_uid
    ---@type entity 施法者实体
    local caster_entity = self.context:get_entity_by_primary_index(battle_components.uid, caster_uid)
    self:log_assert(caster_entity ~= nil, 'no caster unit found while set_follow_up_behaviors, caster_uid = ', self.skill_data)

    ---@type skill_running_component_data
    local running_comp = caster_entity:get_component(battle_components.skill_running)
    ---@type queue skill_running_data技能要执行的行为
    local running_queue = running_comp.running_queue

    -- 如果有要执行的行为，将要它们添加到列表中，之后执行
    if behavior_ids ~= nil then
        for i = 1, #behavior_ids do
            ---@type skill_running_data
            local running_data = self.context:get_skill_running_data(behavior_ids[i], self.cname)
            running_data.dynamic_eid = dynamic_eid
            running_data.additional_data = additional_data

            running_queue:enqueue(running_data)
        end
    end

    if not helper.is_debug then
        self:log_info('prepare to set follow-up behaviors, count = ', running_queue:count())
    else
        local str_table = self.context:get_free_table("base_behavior.str_table")
        running_queue:foreach(function(value, arr) arr[#arr + 1] = value.template_mid end, str_table)
        self:log_info('prepare to set follow-up behaviors, count = ', running_queue:count(), ', behavirs = ', table.concat(str_table, ','))
        self.context:recycle_free_table(str_table)
    end

    -- 替换skill_running组件
    caster_entity:replace_component(battle_components.skill_running, self.skill_data, running_queue)
end

---打印信息
---@protected
function base_behavior:log_info(...)
    local skill_mid = self.skill_data.mid
    helper.log_skill(self.behavior_type, '[', self.bid , '][', skill_mid, '][', self.behavior_config_id, '], ', ...)
end

---打印错误
---@protected
function base_behavior:log_error(...)
    local skill_mid = self.skill_data.mid
    helper.error_skill(self.behavior_type, '[', self.bid , '][', skill_mid, '][', self.behavior_config_id, '], ', ...)
end

---断言
---@protected
function base_behavior:log_assert(condition, ...)
    local skill_mid = self.skill_data.mid
    helper.assert_skill(condition, self.behavior_type, '[', self.bid , '][', skill_mid, '][', self.behavior_config_id, '], ', ...)
end
--endregion

--region 私有方法
---设置技能行为激活记录
---@private
---@param is_record boolean 是否记录, true=记录,false=移除
function base_behavior:set_actived_behaviors(is_record)
    ---@type entity 施法者实体
    local caster_entity = self.context:get_entity_by_primary_index(battle_components.uid, self.skill_data.caster_uid)
    ---@type string[]
    local name_list = caster_entity:get_component(battle_components.actived_behaviors).value
    ---@type string
    local behavior_type = self.behavior_type
    
    if is_record then
        name_list[#name_list + 1] = behavior_type
    else
        for i = 1, #name_list do
            if name_list[i] == behavior_type then
                table_remove(name_list, i)
                break
            end
        end
    end
end

---添加延迟开始Timer
---@private
function base_behavior:add_delay_start_timer()
    local delay_time = self.behavior_data.delay_time
    if delay_time < 0 then delay_time = 0 end
    
    self.delay_timer_id = self.context.controller:add_timer(delay_time, self.start_callback)
end

---延迟开始
---@private
function base_behavior:on_delay_start()
    self.is_delay_start = true
    self:log_info('behavior start delay, duration_time = ', self.behavior_data.duration_time, 'ms')

    on_editor_start(self.behavior_data.cid)
    self:on_start()
    self:add_duration_end_timer()
end

---添加持续结束Timer
---@private
function base_behavior:add_duration_end_timer()
    if not self.is_can_add_end_timer then return end

    self:log_info('behavior add end timer, duration_time = ', self.behavior_data.duration_time, 'ms')

    local duration_time_point = self.behavior_data.duration_time
    if duration_time_point >= 0 then
        self.context.controller:add_timer(duration_time_point, self.end_callback)
    end
end

---清理timer
---@private
function base_behavior:on_clear_timer()
    if self.delay_timer_id ~= nil then
        self.context.controller:remove_timer(self.delay_timer_id)
        self.delay_timer_id = nil
    end
    
    if self.duration_timer_id ~= nil then
        self.context.controller:remove_timer(self.duration_timer_id)
        self.duration_timer_id = nil
    end
end

---清理父类
---@private
function base_behavior:on_clear_base()
    local result_t_list = self.result_table_list
    if result_t_list ~= nil then
        for i = 1, #result_t_list do
            self.context:recycle_free_table(result_t_list[i])
        end
        self.context:recycle_free_table(result_t_list)
        self.result_table_list = nil
    end
    
    self.bid = nil
    self.context = nil

    self.skill_data = nil
    self.behavior_data = nil
    self.behavior_config_id = nil
    self.generate_callback = nil
    
    self.is_can_add_end_timer = nil
    self.is_delay_start = nil
end
--endregion

return base_behavior