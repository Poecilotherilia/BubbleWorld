---
--- Generated by wuhaijun
--- File name : behavior_generate_bullet.lua.txt
--- DateTime : 2021/09/09
--- Description : 在施法者挂点上生成子弹并射出，生成数量根据子弹目标数量确定，每个子弹分别飞向子弹目标
---

---@type battle_helper
local helper = battle_helper
local data_mgr = data
local table_names = tables
local is_nil_or_empty = string.is_nil_or_empty
---@type enum_battle
local enum_battle = enum.battle
local LuaUtil = cs.LuaUtil
local math_atan2 = math.atan
local math_rad2Deg = math.deg(1)
local math_sqrt = math.sqrt
local camera_event_type = enum_battle.skill_camera_event_type
local battle_bullet_type = enum_battle.battle_bullet_type

---@type vector3
local vector3 = require(helper.path.battle_utils .. 'vector3')
---@type multi_segment_path_ctrl
local multi_segment_path_ctrl = require(helper.path.battle_utils .. 'curve/multi_segment_path_ctrl')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type base_behavior
local super = require(helper.path.battle_skill .. 'behavior/base_behavior')

---@class behavior_generate_bullet : base_behavior
local behavior_generate_bullet = class("behavior_generate_bullet", super)

---构造函数
---@protected
function behavior_generate_bullet:ctor()
    super.ctor(self, self.cname)

    ---当前子弹实体的id
    ---@private
    ---@type number
    self.current_bullet_eid = nil

    ---子弹路径控制器
    ---@private
    ---@type multi_segment_path_ctrl
    self.bullet_path_ctrl = nil
end

---行为开始，根据配置延迟后开始
---@protected
function behavior_generate_bullet:on_start()
    ---@type generate_bullet_data
    local config_data = self.behavior_data.behavior_args.GenerateBulletData
    self:log_assert(config_data ~= nil, "invalid GenerateBulletData")
    
    -- 发射子弹时触发相机事件
    self:set_camera_flow_handle(camera_event_type.BEGIN_ATTACK)

    ---@type string 子弹资源路径
    local bullet_res_path

    if not is_nil_or_empty(config_data.BulletConfigId) then
        -- 获取子弹资源配置
        ---@type Effect
        local effect_data = data_mgr.get(table_names.Effect.name, config_data.BulletConfigId)
        if effect_data ~= nil then
            if not is_nil_or_empty(effect_data.Path) then
                bullet_res_path = effect_data.Path
            else
                self:log_error("invalid effect res path, BulletConfigId = ", config_data.BulletConfigId)
                return
            end
        else
            self:log_error("effect config id not found, BulletConfigId = ", config_data.BulletConfigId)
            return
        end
    else
        return
    end

    ---@type number 生成子弹逻辑实体id
    local bullet_born_eid = self:get_current_eid()
    ---@type number 生成子弹逻辑实体id
    local bullet_target_eid
    
    ---@type entity
    local bullet_entity = battle_utility.generate_bullet_entity(self.context, bullet_res_path, config_data)
    self.current_bullet_eid = bullet_entity.eid
    -- 设置子弹出生信息
    self:set_bullet_born_info(bullet_born_eid, bullet_entity, config_data)

    -- 根据子弹类型处理逻辑
    if config_data.BulletType == battle_bullet_type.NORMAL then
        -- 0=普通子弹，从出生点飞向目标，命中后造成一次伤害，持续结束后销毁
        ---@type number 子弹的目标
        bullet_target_eid = self.behavior_data.run_data.dynamic_eid
        self:on_bullet_move_handle(bullet_target_eid, bullet_entity, config_data)
        
    elseif config_data.BulletType == battle_bullet_type.PLACE then
        -- 1=放置子弹，向出生点放置一个子弹，持续结束后销毁
        bullet_target_eid = bullet_born_eid
        
    else
        self:log_error("new bulletType not processed!, type = ", config_data.BulletType)
    end
end

---设置子弹出生信息
---@private
---@param born_eid number 子弹根据born_eid实体上出生
---@param bullet_entity entity 子弹实体
---@param bullet_data generate_bullet_data 子弹配置数据
function behavior_generate_bullet:set_bullet_born_info(born_eid, bullet_entity, bullet_data)
    -- 获取子弹的出生所在渲染单位，根据其坐标信息设置子弹的位置和旋转
    ---@type render_battle_unit
    local born_render_unit = self.context.renderer:get_render_unit(born_eid)
    ---@type UnityEngine.Transform
    local born_attack_point = born_render_unit:get_attach_point(bullet_data.BornInfo.AttackPoint)
    local c_pos_x, c_pos_y, c_pos_z = born_attack_point:GetPosition()
    local c_rot_x, c_rot_y, c_rot_z = born_render_unit:get_euler_angles()

    -- 计算旋转后的出生偏移
    local result_x, result_y, result_z = LuaUtil.RotationVector(c_rot_x, c_rot_y, c_rot_z, 
            bullet_data.BornInfo.Offset.X, 
            bullet_data.BornInfo.Offset.Y, 
            bullet_data.BornInfo.Offset.Z)
    c_pos_x = c_pos_x + result_x
    c_pos_y = c_pos_y + result_y
    c_pos_z = c_pos_z + result_z
    
    -- 获取缩放值
    local scale_x, _, _ = born_attack_point:GetLocalScale()

    bullet_entity:add_component(battle_components.position, vector3.new(c_pos_x, c_pos_y, c_pos_z))
    bullet_entity:add_component(battle_components.rotation, vector3.new(c_rot_x, c_rot_y, c_rot_z))
    bullet_entity:add_component(battle_components.scale, vector3.new(scale_x, scale_x, scale_x))
    bullet_entity:add_component(battle_components.unit_active, true)
end

---子弹移动处理
---@private
---@param target_eid number 子弹根据born_eid实体上出生
---@param bullet_entity entity 子弹实体
---@param bullet_data generate_bullet_data 子弹配置数据
function behavior_generate_bullet:on_bullet_move_handle(target_eid, bullet_entity, bullet_data)
    ---@type vector3 子弹的位置
    local position = bullet_entity:get_component(battle_components.position).value
    ---@type vector3 子弹的旋转
    local rotation = bullet_entity:get_component(battle_components.rotation).value
    ---@type vector3 子弹的旋转
    local scale = bullet_entity:get_component(battle_components.scale).value
    
    -- 获取目标挂点位置
    ---@type UnityEngine.Transform
    local target_point = self.context.renderer:get_attach_point(target_eid, bullet_data.TargetInfo.AttackPoint)
    scale.x, scale.y, scale.z = target_point:GetLocalScale()
    local t_pos_x, t_pos_y, t_pos_z = target_point:GetPosition()
    
    local flag_value<const> = 0.001
    if t_pos_x > -flag_value and t_pos_x < flag_value then
        t_pos_x = 0
    end
    if t_pos_y > -flag_value and t_pos_y < flag_value then
        t_pos_y = 0
    end
    if t_pos_z > -flag_value and t_pos_z < flag_value then
        t_pos_z = 0
    end
    
    -- 计算Y轴旋转
    rotation.y = self:calculate_y_axis_rotation(t_pos_x - position.x, t_pos_z - position.z)
    
    -- 计算目标点位置偏移，根据子弹自身旋转
    local result_x, result_y, result_z = LuaUtil.RotationVector(rotation.x, rotation.y, rotation.z, 
            bullet_data.TargetInfo.Offset.X, 
            bullet_data.TargetInfo.Offset.Y, 
            bullet_data.TargetInfo.Offset.Z)
    t_pos_x = t_pos_x + result_x
    t_pos_y = t_pos_y + result_y
    t_pos_z = t_pos_z + result_z

    bullet_entity:replace_component(battle_components.rotation, rotation)
    bullet_entity:replace_component(battle_components.scale, scale)

    -- 子弹路径控制器
    local path_ctrl = multi_segment_path_ctrl.get_segment_path(bullet_data.PathId, bullet_data.DurationTime)
    if path_ctrl ~= nil then
        ---@type number 与目标点距离
        local distance = math_sqrt((t_pos_x - position.x) ^ 2 + (t_pos_y - position.y) ^ 2 + (t_pos_z - position.z) ^ 2)
        path_ctrl:set_path_transform_info(distance, rotation.x, rotation.y, rotation.z, position.x, position.y, position.z)
        path_ctrl:set_target_point_position(t_pos_x, t_pos_y, t_pos_z)

        -- path_ctrl:draw_path_point(self.context.renderer:get_root_transform())
    end

    self.bullet_path_ctrl = path_ctrl
end

---计算Y轴旋转
---@private
---@param x number X方向分量
---@param z number Z方向分量
---@return number
function behavior_generate_bullet:calculate_y_axis_rotation(x, z)
    -- angle_y = arc tan(x/z)
    local angle_y = math_atan2(x, z) * math_rad2Deg
    if angle_y < 0 then angle_y = angle_y + 180 end
    if x < 0 then angle_y = angle_y + 180 end

    return angle_y
end

---更新
---@protected
function behavior_generate_bullet:on_update()
    local path_ctrl = self.bullet_path_ctrl
    if path_ctrl == nil then return end
    
    local context = self.context

    local delta_time = context.controller:get_delta_time()
    local xx, yy, zz = path_ctrl:get_point_position(delta_time)
    local bullet_entity = context:get_entity_by_primary_index(battle_components.eid, self.current_bullet_eid)
    
    -- 是否旋转
    if path_ctrl:get_direction_type() == 0 then
        bullet_entity:replace_component(battle_components.look_at_position, xx, yy, zz)
    end

    ---@type vector3 子弹的位置
    local position = bullet_entity:get_component(battle_components.position).value
    position:set(xx, yy, zz)
    bullet_entity:replace_component(battle_components.position, position)
end

---清理行为
---@protected
function behavior_generate_bullet:on_clear()
    if self.bullet_path_ctrl ~= nil then
        self.bullet_path_ctrl:dispose()
        self.bullet_path_ctrl = nil
    end
    
    local entity = self.context:get_entity_by_primary_index(battle_components.eid, self.current_bullet_eid)
    if entity ~= nil then
        entity:replace_component(battle_components.destroyed)
    end
    self.current_bullet_eid = nil
end

return behavior_generate_bullet