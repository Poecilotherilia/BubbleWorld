---
--- Generated by wuhaijun
--- File name : battle_skill_trigger.lua.txt
--- DateTime : 2022/06/28
--- Description : 
---

---@type battle_helper
local helper = battle_helper
local system_manager = system_manager
local battle_step_type = enum.battle.battle_step_type
local data_mgr = data
local table_names = tables
local string_is_nil_or_empty = string.is_nil_or_empty

local wwise_util = require 'game/utils/wwise_util/wwise_util'
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class battle_skill_trigger : reactive_system
local battle_skill_trigger = class("battle_skill_trigger", super)

---构造函数
---@protected
---@param context context
function battle_skill_trigger:ctor(context)
    super.ctor(self, context)

    ---触发器执行完毕回调
    ---@private
    ---@type fun()
    self.trigger_finished_callback = function() self:on_trigger_finished_handle() end

    ---上一个战斗步骤
    ---@private
    ---@type battle_step_type
    self.pre_battle_step = nil
end

---获取触发配置
---@protected
---@param context context
---@return collector
function battle_skill_trigger:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.skill_trigger))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function battle_skill_trigger:filter(entity)
    return entity:has_component(battle_components.skill_trigger)
end

---组件变化时执行
---@protected
---@param list entity[] 实体列表
---@param count number 列表长度
function battle_skill_trigger:executes(list, count)
    for i = 1, count do
        local trigger_comp = list[i]:get_component(battle_components.skill_trigger)
        ---@type queue BTLTriggerInfo
        local info_queue = trigger_comp.value
        while not info_queue:is_empty() do
            self:on_trigger_info_handle(info_queue:dequeue())
        end
    end
end

---触发器信息处理
---@private
---@param info BTLTriggerInfo
function battle_skill_trigger:on_trigger_info_handle(info)
    if info == nil then return end

    ---@type Trigger
    local trigger_data = data_mgr.get(table_names.Trigger.name, info.trigger_id)
    if trigger_data == nil then return end

    helper.log('execute battle trigger, trigger_id = ', info.trigger_id)
    
    -- Switch背景音乐
    if trigger_data.FunctionType == 5 then
        if string_is_nil_or_empty(trigger_data.FunctionValue) then
            wwise_util.set_switch_by_id(trigger_data.FunctionValue)
        end
    else
        -- 记录上一个战场步骤
        local _, step_comp = self.context:get_unique_component(battle_components.battle_step)
        self.pre_battle_step = step_comp.value
        helper.log('execute battle trigger, pre_battle_step = ', helper.get_enum_name(battle_step_type, self.pre_battle_step))

        -- 设置战场到剧情状态
        self.context.controller:set_battle_step(battle_step_type.STORY)
        -- 设置是否正在战斗前的触发器
        self.context.database:set_is_execute_trigger(info.trigger_id)
        -- 执行触发器
        system_manager.trigger:execute_trigger(info.trigger_id, self.trigger_finished_callback)
    end
end

---触发器结束处理
---@private
function battle_skill_trigger:on_trigger_finished_handle()
    if self.pre_battle_step ~= nil then
        -- 恢复战场步骤
        self.context.controller:set_battle_step(self.pre_battle_step)
        self.pre_battle_step = nil
    else
        helper.error_skill("the previous battle_step is nil")
    end
end

---卸载
---@public
function battle_skill_trigger:tear_down()
    self.pre_battle_step = nil
    self.trigger_finished_callback = nil

    super.tear_down(self)
end

return battle_skill_trigger