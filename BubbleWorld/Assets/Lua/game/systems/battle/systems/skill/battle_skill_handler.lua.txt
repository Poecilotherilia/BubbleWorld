---
--- Generated by wuhaijun
--- File name : battle_skill_handler.lua.txt
--- DateTime : 2021/07/13
--- Description : 技能处理
---

---@type battle_helper
local helper = battle_helper
local table_concat = table.concat

---@type battle_effect_utility
local battle_effect_utility = require(helper.path.battle_skill .. 'utility/battle_effect_utility')
---@type skill_data_utility
local skill_data_utility = require(helper.path.battle_skill .. 'utility/skill_data_utility')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class battle_skill_handler : reactive_system
local battle_skill_handler = class("battle_skill_handler", super)

---构造函数
---@protected
---@param context context
function battle_skill_handler:ctor(context)
    super.ctor(self, context)
    
    ---日志容器
    ---@private
    self.str_table = {}
end

---获取触发配置
---@protected
---@param context context
---@return collector
function battle_skill_handler:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.skill_handler))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function battle_skill_handler:filter(entity)
    return entity:has_component(battle_components.skill_handler)
end

---组件变化时执行
---@protected
---@param entity_list entity[]
---@param list_count number
function battle_skill_handler:executes(entity_list, list_count)
    local context = self.context
    
    for i = 1, list_count do
        local entity = entity_list[i]

        -- 技能处理组件
        ---@type skill_handler_component_data
        local handler_comp = entity:get_component(battle_components.skill_handler)
        ---@type stack effect_data_group[]效果数据组栈
        local queue_stack = handler_comp.queue_stack

        -- 执行堆栈数据
        local is_run = true
        while is_run do
            if not queue_stack:is_empty() then
                if not skill_data_utility.try_to_execute_skill_queue(context, queue_stack:peek()) then
                    context:recycle_free_queue(queue_stack:pop())
                else
                    is_run = false
                end

            elseif handler_comp.skill_hash:count() <= 0 then
                helper.log_skill("the skill queue data is completed!")
                is_run = false
                self:process_all_skill_completed(entity)

            else
                is_run = false

                if helper.is_debug then
                    local str_table = self.str_table
                    helper.clear_array(str_table)
                    handler_comp.skill_hash:foreach(function(k, _)
                        str_table[#str_table + 1] = helper.to_string(k)
                    end)
                    helper.log_skill("there are skills being executed, guid_list = ", table_concat(str_table, ', '))
                end
            end
        end
    end
end

---处理效果数据列表完毕
---@private
---@param skill_entity entity
function battle_skill_handler:process_all_skill_completed(skill_entity)
    -- 效果处理后逻辑
    ---@type { value:table<number, number>, entities:BTLEntity[] } 魔力色相
    local effect_after_comp = skill_entity:get_component(battle_components.skill_after)
    if effect_after_comp ~= nil then
        -- 魔力色相更新
        self.context.database:set_magic_hues_data(effect_after_comp.value)
        -- 更新实体
        battle_effect_utility.update_entities_handle(self.context, effect_after_comp.entities)
        
        -- 移除行动中组件
        skill_entity:remove_component(battle_components.skill_after)
    end

    -- 战场实体
    local battlefield, _ = self.context:get_unique_component(battle_components.battle_field)
    -- 检测行动数据所处阶段
    battlefield:replace_component(battle_components.check_action_stage)
    -- 个人行动结束
    self.context.message:send_unit_actions_finished()
end

---卸载
---@public
function battle_skill_handler:tear_down()
    self.str_table = nil
    
    super.tear_down(self)
end

return battle_skill_handler