---
--- Generated by wuhaijun
--- File name : round_battle_check_action_stage.lua.txt
--- DateTime : 2021/08/30
--- Description : 检测行动阶段
---

---@type battle_helper
local helper = battle_helper
local enum = enum
local BTLStage = enum.proto.BTLStage
---@type enum_battle
local enum_battle = enum.battle
local table_names = tables
local battle_wait_data_type = enum_battle.battle_wait_data_type

---@type ident
local ident = require(helper.path.battle_utils .. 'ident')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class round_battle_check_action_stage : reactive_system
local round_battle_check_action_stage = class("round_battle_check_action_stage", super)

---构造函数
---@protected
---@param context context
function round_battle_check_action_stage:ctor(context)
    super.ctor(self, context)
end

---获取触发配置
---@protected
---@param context context
---@return collector
function round_battle_check_action_stage:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.check_action_stage))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function round_battle_check_action_stage:filter(entity)
    return entity:has_component(battle_components.check_action_stage) and entity:has_component(battle_components.action_data)
end

---执行(每帧)
---@protected
---@param entity_list entity[]
---@param list_count number
function round_battle_check_action_stage:executes(entity_list, list_count)
    for i = 1, list_count do
        local battlefield = entity_list[i]
        
        -- 获取行动数据
        ---@type BTLAction
        local action_data = battlefield:get_component(battle_components.action_data).value
        helper.assert_round(action_data ~= nil, "action data not found in get_action_data")

        helper.log_round("execute check_action_stage process, action_data.stage = ", helper.get_enum_name(BTLStage, action_data.stage))
        
        -- 检测行动数据所处阶段
        if action_data.stage == BTLStage.BS_ROLE_PRE_ACTION then
            -- 行动前阶段
            self:on_process_post_pre_stage(action_data)

        elseif action_data.stage == BTLStage.BS_START then
            -- 开始阶段
            helper.log_round('ready to show start ui animation')
            self.context.message:send_battle_show_start_anim_msg()
            
        else
            -- 没有关心的阶段，尝试获取下一个战斗数据
            battlefield:replace_component(battle_components.try_get_data, battle_wait_data_type.WAIT_SYSTEM_DATA)
        end
    end
end

---处理战后+战前阶段
---@private
---@param action_data BTLAction
function round_battle_check_action_stage:on_process_post_pre_stage(action_data)
    helper.log_round("prepare to process post_pre_stage data, round_number = ", action_data.round_number)

    -- 获取角色行动后+行动前阶段的行动数据
    local post_pre_action = action_data.post_pre_action
    helper.assert_round(post_pre_action ~= nil, "not found action.post_pre_action, stage = ", action_data.stage, 
            ", round_number = ", action_data.round_number)

    -- 1. 检测是否有可添加单位
    self:check_has_battle_units_need_add(post_pre_action.new_entities)
    -- 2. 准备执行单位行动前处理
    self:process_unit_action_before_handle(action_data)
end

---添加战斗单位
---@private
---@param btl_entity_list BTLEntity[] 要添加的单位列表
function round_battle_check_action_stage:check_has_battle_units_need_add(btl_entity_list)
    local add_count = 0
    if btl_entity_list ~= nil then
        add_count = #btl_entity_list
    end
    helper.log_round("prepare to add battle unit, add count = ", add_count)

    -- 开始添加单位
    local unit_state = table_names.BTLState.ids.BTLState_Born
    for i = 1, add_count do
        ---@type BTLEntity
        local btl_entity = btl_entity_list[i]
        local unit_info = self.context.database:add_unit_info(btl_entity)
        battle_utility.generate_unit_entity(self.context, unit_info, true, unit_state)
    end
end

---检测单位行动前处理
---@private
---@param action_data BTLAction
function round_battle_check_action_stage:process_unit_action_before_handle(action_data)
    ---@type BTLEntityStateInTurn 当值单位数据
    local in_turn_unit = action_data.post_pre_action.entity_state_in_turn
    in_turn_unit.entity_id = ident.wrap(in_turn_unit.entity_id)
    
    local battlefield, _ = self.context:get_unique_component(battle_components.battle_field)
    battlefield:replace_component(battle_components.action_before, in_turn_unit)
end

return round_battle_check_action_stage