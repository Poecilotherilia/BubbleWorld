---
--- Generated by wuhaijun
--- File name : round_battle_unit_action_before.lua.txt
--- DateTime : 2022/03/11
--- Description : 单位行动前阶段
---

---@type battle_helper
local helper = battle_helper
local EGameEventCode = enum.proto.EGameEventCode
---@type enum_battle
local enum_battle = enum.battle
local battle_operation_mode = enum_battle.battle_operation_mode
local battle_wait_data_type = enum_battle.battle_wait_data_type

---@type battle_constant
local battle_constant = require(helper.path.battle_utils .. 'battle_constant')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type matchers
local matchers = require(helper.path.ecs .. 'matchers')
---@type reactive_system
local super = require(helper.path.ecs .. 'reactive_system')

---@class round_battle_unit_action_before : reactive_system
local round_battle_unit_action_before = class("round_battle_unit_action_before", super)

---构造函数
---@protected
---@param context context
function round_battle_unit_action_before:ctor(context)
    super.ctor(self, context)

    ---异常技能ui完成后回调
    ---@private
    ---@type fun(uid:Ident)
    self.abnormal_skill_ui_finished_callback = function(uid) self:on_abnormal_skill_ui_finished(uid) end

    ---异常技能ui倒计时timer id
    ---@private
    ---@type number
    self.abnormal_skill_timer_id = nil
end

---获取触发配置
---@protected
---@param context context
---@return collector
function round_battle_unit_action_before:get_trigger(context)
    return context:get_collector(matchers.all(battle_components.action_before))
end

---过滤
---@protected
---@param entity entity
---@return boolean
function round_battle_unit_action_before:filter(entity)
    return entity:has_component(battle_components.action_before)
end

---组件变化时执行
---@protected
---@param entity_list entity[]
---@param count number
function round_battle_unit_action_before:executes(entity_list, count)
    for i = 1, count do
        self:start_prepare_release_skill(entity_list[i])
    end
end

---开始准备释放技能
---@private
---@param caster_entity entity
function round_battle_unit_action_before:start_prepare_release_skill(caster_entity)
    local context = self.context
    
    -- 获取当值单位数据
    ---@type BTLEntityStateInTurn
    local in_turn_unit = caster_entity:get_component(battle_components.action_before).value
    ---@type battle_operation_mode 操作模式
    local operation_mode = context.database:get_operation_mode()
    ---@type ident 施法者uid
    local caster_uid = in_turn_unit.entity_id
    ---@type boolean 是否能够行动
    local is_unit_act = in_turn_unit.code == EGameEventCode.SUCCESS
    ---@type boolean 是否是我们的队伍
    local is_own_team = context.database:check_unit_own_team(caster_uid)

    -- 预加载技能
    self:preload_target_skill_assets(in_turn_unit.skill_states, caster_uid)
    -- 设置镜头操作模式
    context.database:set_camera_operation_mode(operation_mode)

    helper.log_round("unit try to release skill, caster_uid = ", helper.to_string(caster_uid), ", is_own_team = ", is_own_team,
            ", operation = ", helper.get_enum_name(battle_operation_mode, operation_mode), ", code = ", in_turn_unit.code)
    
    -- 显示技能面板，UI根据情况显示
    -- 无论是敌我、是否处于异常状态都发送消息
    context.message:send_release_skill_message(is_own_team, in_turn_unit)

    if is_own_team then
        -- 可释放技能
        if is_unit_act then
            ---@type number 镜头融合时间
            local blend_time = context.database:get_setting_const().KW_SKILL_V_CAMERA_BLEND_TIME
            
            -- 非手动模式也需要主动发送消息给服务端
            if operation_mode == battle_operation_mode.AUTOMATIC then
                context.network:request_use_skill(nil, caster_uid, nil, 2)
                -- 恢复敌方自身旋转
                self:enemy_restore_rotation_handle(blend_time)
            else
                -- 非自动战斗模式下，施法单位是己方时，所有敌人单位转向施法单位
                self:enemy_look_at_caster_handle(caster_uid, blend_time)
            end

            -- 等待玩家操作，尝试获取行动数据
            self:on_execute_get_next_action(battle_wait_data_type.WAIT_OWN_DATA, caster_uid)
        else
            -- 被限制状态，没有可释放的技能
            -- 展示文字提示面板，持续1秒，执行下一个行动数据
            local show_time = battle_constant.ABNORMAL_SKILL_UI_SHOW_TIME
            self.abnormal_skill_timer_id = context.controller:add_timer_unscale(show_time, self.abnormal_skill_ui_finished_callback, caster_uid)
        end
    else
        -- 如果是敌方单位行动, 获取下一个行动数据
        self:on_execute_get_next_action(battle_wait_data_type.WAIT_SYSTEM_DATA, caster_uid)
    end
end

---异常技能完成时
---@private
---@param uid Ident
function round_battle_unit_action_before:on_abnormal_skill_ui_finished(uid)
    self.abnormal_skill_timer_id = nil

    -- 跳过行动指令：玩家操控的单位，行动前无可选用的技能（被控制状态），需要上报这一类指令
    self.context.network:request_use_skill(nil, uid, nil, 3)
    -- 获取下一个行动数据
    self:on_execute_get_next_action(battle_wait_data_type.WAIT_SYSTEM_DATA)
end

---执行获取下一个行动数据
---@private
---@param wait_data_type battle_wait_data_type
---@param uid ident
function round_battle_unit_action_before:on_execute_get_next_action(wait_data_type, uid)
    helper.log_round("go to get the next action data process !")

    local battlefield, _ = self.context:get_unique_component(battle_components.battle_field)
    battlefield:replace_component(battle_components.try_get_data, wait_data_type, uid)
end

---所有敌方恢复自身旋转
---@private
---@param blend_time number
function round_battle_unit_action_before:enemy_restore_rotation_handle(blend_time)
    local context = self.context
    
    -- 敌方单位数据列表
    ---@type battle_unit_info[]
    local unit_info_list = context:get_free_table('round_battle_unit_action_before.enemy_restore_rotation_handle.unit_info_list')
    context.database:get_enemy_unit_info_list(unit_info_list)
    for i = 1, #unit_info_list do
        local unit_info = unit_info_list[i]
        if not unit_info.is_death then
            local entity = context:get_entity_by_primary_index(battle_components.uid, unit_info.uid)
            ---@type vector3
            local caster_pos = entity:get_component(battle_components.position).value
            entity:replace_component(battle_components.visual_follow, caster_pos.x, caster_pos.y, caster_pos.z, blend_time)
        end
    end

    -- 回收
    context:recycle_free_table(unit_info_list)
end

---所有敌人看向我方施法者处理
---@private
---@param caster_uid ident
---@param blend_time number
function round_battle_unit_action_before:enemy_look_at_caster_handle(caster_uid, blend_time)
    local context = self.context

    -- 获取施法者位置
    local caster_entity = context:get_entity_by_primary_index(battle_components.uid, caster_uid)
    ---@type vector3
    local caster_pos = caster_entity:get_component(battle_components.position).value

    -- 敌方单位数据列表
    ---@type battle_unit_info[]
    local unit_info_list = context:get_free_table('round_battle_unit_action_before.enemy_look_at_caster_handle.unit_info_list')
    context.database:get_enemy_unit_info_list(unit_info_list)
    for i = 1, #unit_info_list do
        local unit_info = unit_info_list[i]
        if not unit_info.is_death then
            local entity = context:get_entity_by_primary_index(battle_components.uid, unit_info.uid)
            entity:replace_component(battle_components.visual_follow, caster_pos.x, caster_pos.y, caster_pos.z, blend_time)
        end
    end

    -- 回收
    context:recycle_free_table(unit_info_list)
end

---预加载目标技能资产
---@private
---@param skill_states BTLEntitySkillState[]
---@param caster_uid ident
function round_battle_unit_action_before:preload_target_skill_assets(skill_states, caster_uid)
    if skill_states == nil then return end
    
    local skill_count = #skill_states
    if skill_count == 0 then return end

    ---@type string[]
    local skill_list, caster_entity = battle_utility.get_preload_skill_list(self.context, caster_uid)

    -- 更新技能id
    local change_num = 0
    for i = 1, #skill_states do
        if battle_utility.set_preload_skill_list(skill_states[i].skill_mid, skill_list) then
            change_num = change_num + 1
        end
    end
    if change_num > 0 then
        caster_entity:replace_component(battle_components.preload_skill, skill_list)
    end
end

---卸载
---@public
function round_battle_unit_action_before:tear_down()
    if self.abnormal_skill_timer_id ~= nil then
        self.context.controller:remove_timer_unscale(self.abnormal_skill_timer_id)
        self.abnormal_skill_timer_id = nil
    end

    self.abnormal_skill_ui_finished_callback = nil

    super.tear_down(self)
end

return round_battle_unit_action_before