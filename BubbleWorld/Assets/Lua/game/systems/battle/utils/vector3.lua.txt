---
--- Generated by wuhaijun
--- File name : vector3.lua.txt
--- DateTime : 2021/04/01
--- Description : 
---

local Vector3 = cs.Vector3

local clamp = function(value, min, max)
    if value < min then
        value = min
    elseif value > max then
        value = max
    end
    
    return value
end

local math = math
local infinity = math.huge
local sqrt = math.sqrt
local max = math.max
local acos = math.acos
--local atan = math.atan

local rad2Deg = math.deg(1) -- 57.295779513082
--local deg2Rad = 0.017453292519943

---@class vector3
local vector3 = {}
vector3.__index = vector3

---New
---@public
---@param x number
---@param y number
---@param z number
---@return vector3
function vector3.new(x, y, z)
    local t = 
    {
        cname = "vector3",
        x = x or 0, 
        y = y or 0, 
        z = z or 0 
    }
    return setmetatable(t, vector3)
end

local new = vector3.new

---【引用类型】只能用于比较，不要修改
vector3.zero = new(0, 0, 0)
---【引用类型】只能用于比较，不要修改
vector3.one = new(1, 1, 1)

---@type vector3
local tmp_vec1 = new()
---@type vector3
local tmp_vec2 = new()
---@type vector3
local tmp_vec3 = new()
---@type vector3
local tmp_vec4 = new()
---@type vector3
--local tmp_vec5 = new()

---Set Value
---@public
function vector3:set(x, y, z)
    self.x = x or 0
    self.y = y or 0
    self.z = z or 0
end

---Reset Value
---@public
function vector3:reset()
    self:set()
end

---Clone Vector3
---@public
function vector3:clone()
    return new(self.x, self.y, self.z)
end

---Copy Vector3
---@public
---@param v vector3
function vector3:copy(v)
    return self:set(v.x, v.y, v.z)
end

---To Unity Vector3
---@public
function vector3:to_unity_vec()
    return Vector3(self.x, self.y, self.z)
end

---自身归一化
---@public
---@return vector3
function vector3:set_normalize()
    local num = sqrt(self.x * self.x + self.y * self.y + self.z * self.z)

    if num > 1e-5 then
        self.x = self.x / num
        self.y = self.y / num
        self.z = self.z /num
    else
        self.x = 0
        self.y = 0
        self.z = 0
    end

    return self
end

---不开根
---@public
---@return number
function vector3:sqr_magnitude()
    return self.x * self.x + self.y * self.y + self.z * self.z
end

---向量大小
---@public
---@return number
function vector3:magnitude()
    return sqrt(self.x * self.x + self.y * self.y + self.z * self.z)
end

---与四元数相乘
---@param quaternion quaternion
---@return vector3
function vector3:mul_quaternion(quaternion)
    local num = quaternion.x * 2
    local num2 = quaternion.y * 2
    local num3 = quaternion.z * 2
    local num4 = quaternion.x * num
    local num5 = quaternion.y * num2
    local num6 = quaternion.z * num3
    local num7 = quaternion.x * num2
    local num8 = quaternion.x * num3
    local num9 = quaternion.y * num3
    local num10 = quaternion.w * num
    local num11 = quaternion.w * num2
    local num12 = quaternion.w * num3

    local x = (((1 - (num5 + num6)) * self.x) + ((num7 - num12) * self.y)) + ((num8 + num11) * self.z)
    local y = (((num7 + num12) * self.x) + ((1 - (num4 + num6)) * self.y)) + ((num9 - num10) * self.z)
    local z = (((num8 - num11) * self.x) + ((num9 + num10) * self.y)) + ((1 - (num4 + num5)) * self.z)

    self:set(x, y, z)
    return self
end

---Returns a copy of vector with its magnitude clamped to maxLength.
---@public
function vector3:clamp_magnitude(max_length)
    if self:sqr_magnitude() > (max_length * max_length) then
        self:set_normalize()
        self:mul(max_length)
    end

    return self
end

--region Static
---将v归一化
---@public
---@param v vector3
---@return vector3
function vector3.normalize(v)
    local x,y,z = v.x, v.y, v.z
    local num = sqrt(x * x + y * y + z * z)

    if num > 1e-5 then
        return new(x / num, y / num, z / num)
    end

    return new()
end

---叉乘
---@public
---@return vector3
function vector3.cross(lhs, rhs)
    return new(vector3.cross_value(lhs, rhs))
end

---叉乘
---@public
---@return number, number, number
function vector3.cross_value(lhs, rhs)
    local x = lhs.y * rhs.z - lhs.z * rhs.y
    local y = lhs.z * rhs.x - lhs.x * rhs.z
    local z = lhs.x * rhs.y - lhs.y * rhs.x
    return x, y, z
end

---Clone Vector3
---@public
function vector3.distance(va, vb)
    return sqrt((va.x - vb.x) ^ 2 + (va.y - vb.y) ^ 2 + (va.z - vb.z) ^ 2)
end

---@public
function vector3.dot(lhs, rhs)
    return lhs.x * rhs.x + lhs.y * rhs.y + lhs.z * rhs.z
end

---@param from vector3
---@param to vector3
function vector3.angle(from, to)
    return acos(clamp(vector3.dot(from:set_normalize(), to:set_normalize()), -1, 1)) * rad2Deg
end

---Gradually changes a vector towards a desired goal over time
---@public
---@param current vector3 The current position.
---@param target vector3 The position we are trying to reach.
---@param current_velocity vector3 The current velocity, this value is modified by the function every time you call it.
---@param smooth_time number Approximately the time it will take to reach the target. A smaller value will reach the target faster.
---@param delta_time number delta time
---@param result vector3 Calculation result
function vector3.smooth_damp(current, target, current_velocity, smooth_time, delta_time, result)
    local maxSpeed = infinity
    smooth_time = max(0.0001, smooth_time)
    local num = 2 / smooth_time
    local num2 = num * delta_time
    local num3 = 1 / (1 + num2 + 0.48 * num2 * num2 + 0.235 * num2 * num2 * num2)

    tmp_vec1:set()
    tmp_vec2:set()
    tmp_vec3:set()
    tmp_vec4:set()
    result = result or new()

    tmp_vec1:set(current.x - target.x, current.y - target.y, current.z - target.z)
    tmp_vec2:copy(target)

    local maxLength = maxSpeed * smooth_time
    tmp_vec1:clamp_magnitude(maxLength)

    tmp_vec3:set(current.x - tmp_vec1.x, current.y - tmp_vec1.y, current.z - tmp_vec1.z)

    local xx, yy, zz = current_velocity.x, current_velocity.y, current_velocity.z
    tmp_vec4:set((xx + tmp_vec1.x * num) * delta_time,
            (yy + tmp_vec1.y * num) * delta_time,
            (zz + tmp_vec1.z * num) * delta_time)

    current_velocity:set((xx - tmp_vec4.x * num) * num3,
            (yy - tmp_vec4.y * num) * num3,
            (zz - tmp_vec4.z * num) * num3)

    result:set(tmp_vec3.x + (tmp_vec1.x + tmp_vec4.x) * num3,
            tmp_vec3.y + (tmp_vec1.y + tmp_vec4.y) * num3,
            tmp_vec3.z + (tmp_vec1.z + tmp_vec4.z) * num3)

    tmp_vec3:set(tmp_vec2.x - current.x, tmp_vec2.y - current.y, tmp_vec2.z - current.z)
    tmp_vec4:set(result.x - tmp_vec2.x, result.y - tmp_vec2.y, result.z - tmp_vec2.z)
    if vector3.dot(tmp_vec3, tmp_vec4) > 0 then
        result:copy(tmp_vec2)
        current_velocity:set(0,0,0)
    end

    return result, current_velocity
end

---Calculate a position between the points specified by current and target, 
---moving no farther than the distance specified by max_distance_delta.
---@param current vector3
---@param target vector3
---@param max_distance_delta number
---@param out_result vector3
function vector3.move_towards(current, target, max_distance_delta, out_result)
    out_result.x = target.x - current.x
    out_result.y = target.y - current.y
    out_result.z = target.z - current.z
    local sqr_delta = out_result:sqr_magnitude()
    local sqr_distance = max_distance_delta * max_distance_delta

    if sqr_delta > sqr_distance then
        local magnitude = sqrt(sqr_delta)

        if magnitude > 1e-6 then
            out_result:mul(max_distance_delta / magnitude)
            out_result:add(current)
        else
            out_result:copy(current)
        end
    else
        out_result:copy(target)
    end

    return out_result
end

---Linearly interpolates between two points.
---@public
---@param from vector3
---@param to vector3
---@param t number [0, 1]
---@param out_result vector3
---@return vector3
function vector3.lerp(from, to, t, out_result)
    out_result = out_result or {}
    t = clamp(t, 0, 1)
    out_result:set(from.x + (to.x - from.x) * t, from.y + (to.y - from.y) * t, from.z + (to.z - from.z) * t)
    return out_result
end
--endregion

--region Operator
---加
---@public
---@param vb vector3
---@return vector3
function vector3:add(vb)
    self.x = self.x + vb.x
    self.y = self.y + vb.y
    self.z = self.z + vb.z

    return self
end

---减
---@public
---@param vb vector3
---@return vector3
function vector3:sub(vb)
    self.x = self.x - vb.x
    self.y = self.y - vb.y
    self.z = self.z - vb.z

    return self
end

---乘
---@public
---@param q number
---@return vector3
function vector3:mul(q)
    if type(q) == "number" then
        self.x = self.x * q
        self.y = self.y * q
        self.z = self.z * q
    else
        self:mul_quaternion(q)
    end

    return self
end

---除
---@public
---@param d number
---@return vector3
function vector3:div(d)
    self.x = self.x / d
    self.y = self.y / d
    self.z = self.z / d

    return self
end

---@private
---@return vector3
vector3.__call = function(t, x, y, z)
    return t.new(x, y, z)
end

---@private
---@return string
vector3.__tostring = function(t)
    return string.format("[%f, %f, %f]", t.x, t.y, t.z)
end

---@private
---@return vector3
vector3.__div = function(va, d)
    return new(va.x / d, va.y / d, va.z / d)
end

---@private
---@return vector3
vector3.__mul = function(va, d)
    if type(d) == "number" then
        return new(va.x * d, va.y * d, va.z * d)
    else
        local vec = va:clone()
        vec:mul_quaternion(d)
        return vec
    end
end

---@private
---@return vector3
vector3.__add = function(va, vb)
    return new(va.x + vb.x, va.y + vb.y, va.z + vb.z)
end

---@private
---@return vector3
vector3.__sub = function(va, vb)
    return new(va.x - vb.x, va.y - vb.y, va.z - vb.z)
end

---@private
---@return vector3
vector3.__unm = function(va)
    return new(-va.x, -va.y, -va.z)
end

---@private
---@return vector3
vector3.__eq = function(a, b)
    if a.cname == 'vector3' and b.cname == 'vector3' then
        local v = a - b
        local delta = v:sqr_magnitude()
        return delta < 1e-10
    else
        return false
    end
end
--endregion

vector3.up = new(0, 1, 0)
vector3.right = new(1, 0, 0)
vector3.forward = new(0, 0, 1)

return vector3