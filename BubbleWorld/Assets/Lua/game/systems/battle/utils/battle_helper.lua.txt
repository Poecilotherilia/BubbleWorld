---
--- Generated by wuhaijun
--- File name : battle_helper.lua.txt
--- DateTime : 2021/05/12
--- Description : 
---

---@type battle_path
local path = require 'game/systems/battle/utils/battle_path'
---@type ecs_helper
ecs_helper = require(path.ecs_helper)
path.ecs = ecs_helper.path

local log = log
local is_nil_or_empty = string.is_nil_or_empty

---@class battle_helper
local battle_helper = 
{
    ---是否是debug模式
    ---@public
    ---@type boolean
    is_debug = false,

    ---战斗中使用的路径
    ---@public
    ---@type battle_path
    path = path,
}

---初始化
---@private
function battle_helper.init()
    if game.is_debug then
        local is_open = setting.get_int('BattleLogSwitchKey') == 0
        battle_helper.is_debug = is_open
        ecs_helper.is_debug = is_open
    end
end

---清理Table
---@public
function battle_helper.clear(t)
    if t == nil then return end

    for key, _ in pairs(t) do
        t[key] = nil
    end
end

---清理数组
---@public
---@param arr table 数组
function battle_helper.clear_array(arr)
    if arr == nil then return end

    for i = 1, #arr do
        arr[i] = nil
    end
end

---检测字符串是否有效
---@public
---@param str string 要检测的字符串
function battle_helper.check_string_invalid(str, ...)
    local is_invalid = is_nil_or_empty(str)
    battle_helper.assert(not is_invalid, ...)
    
    return is_invalid
end

---获取枚举字符串名字
---@public
---@param target_eunm enum
---@param type number
function battle_helper.get_enum_name(target_eunm, type)
    if battle_helper.is_debug then
        for key, value in pairs(target_eunm) do
            if value == type then
                return key
            end
        end
    end
    return type
end

---转换字符串
---@public
---@param t table
---@return string
function battle_helper.to_string(t)
    if not battle_helper.is_debug then
        return t
    else
        if nil == t then
            return "nil"
        else
            return tostring(t)
        end
    end
end

--region 日志
---输出日志
---@private
local print_log = function(...)
    log.config.enable_trace = false
    log.info(...)
    log.config.enable_trace = true
end

---输出警告
---@private
local print_warning = function(...)
    log.config.enable_trace = false
    log.warning(...)
    log.config.enable_trace = true
end

---输出错误
---@private
local print_error = function(...)
    log.error(...)
end

---打印Info日志
---@public
function battle_helper.log(...)
    if not battle_helper.is_debug then return end

    print_log(...)
end

---打印警告
---@public
function battle_helper.warning(...)
    if not battle_helper.is_debug then return end

    print_warning(...)
end

---打印Error日志
---@public
---@return void
function battle_helper.error(...)
    print_error(...)
end

---断言
---@public
function battle_helper.assert(condition, ...)
    if not condition then
        print_error(...)
    end
end

---战斗回合中打印日志
---@public
function battle_helper.log_round(...)
    if not battle_helper.is_debug then return end

    print_log('[ROUND] ', ...)
end

---战斗回合中打印警告
---@public
function battle_helper.warning_round(...)
    if not battle_helper.is_debug then return end

    print_warning('[ROUND] ', ...)
end

---战斗回合中打印Error日志
---@public
---@return void
function battle_helper.error_round(...)
    print_error('[ROUND] ', ...)
end

---断言
---@public
function battle_helper.assert_round(condition, ...)
    if not condition then
        print_error('[ROUND] ', ...)
    end
end

---技能中打印日志
---@public
function battle_helper.log_skill(...)
    if not battle_helper.is_debug then return end

    print_log('[SKILL] ', ...)
end

---战斗回合中打印Error日志
---@public
---@return void
function battle_helper.error_skill(...)
    print_error('[SKILL] ', ...)
end

---断言
---@public
function battle_helper.assert_skill(condition, ...)
    if not condition then
        print_error('[SKILL] ', ...)
    end
end
--endregion

battle_helper.init()

return battle_helper