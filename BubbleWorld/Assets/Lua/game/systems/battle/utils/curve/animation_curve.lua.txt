---
--- Generated by wuhaijun
--- File name : animation_curve.lua.txt
--- DateTime : 2022/04/26
--- Description : 动画曲线工具
---

local table_remove = table.remove

---@class animation_curve
---@field cname string 类名
---@field keys animation_curve_keyframe[] 关键帧数组
local animation_curve = { cname = 'animation_curve' }

---@public
---@return animation_curve
function animation_curve.new()
    return setmetatable({}, { __index = animation_curve })
end

---初始化
---@public
---@param keyframes animation_curve_keyframe[] 关键帧数组，最少两帧数据
function animation_curve:init(keyframes)
    self.keys = keyframes or {}
end

---添加关键帧
---@public
---@param key animation_curve_keyframe
function animation_curve:add_key(key)
    self.keys[#self.keys + 1] = key
end

---移除关键帧
---@public
---@param key animation_curve_keyframe
function animation_curve:remove_key(key)
    local keys = self.keys
    for i = 1, #keys do
        if keys[i] == key then
            table_remove(keys, i)
            break
        end
    end
end

---关键帧数量
---@public
function animation_curve:length()
    return #self.keys
end

---获取曲线上时间点的值
---@public
---@param t number 时间值[0 ~ 1]
---@return number
function animation_curve:evaluate(t)
    local keys = self.keys
    if keys == nil or #keys < 2 then return t end
    
    local current_index = self:get_curve_index(t, keys)
    local value = self:calculate(t , keys[current_index - 1], keys[current_index])

    return value
end

---获取关键帧数据索引
---@private
---@param time number 时间值[0 ~ 1]
---@param array animation_curve_keyframe[] 关键帧数组
---@return number
function animation_curve:get_curve_index(time, array)
    for i = 1, #array do
        if array[i].Time > time then
            return i
        end
    end
    return 2
end

---计算
---@private
---@param time number 时间值[0 ~ 1]
---@param keyframe0 animation_curve_keyframe 关键帧数据
---@param keyframe1 animation_curve_keyframe 关键帧数据
---@return number
function animation_curve:calculate(time, keyframe0, keyframe1)
    local dt = keyframe1.time - keyframe0.time

    local m0 = keyframe0.OutTangent * dt
    local m1 = keyframe1.InTangent * dt

    local t = (time - keyframe0.Time) / dt

    local t2 = t * t
    local t3 = t2 * t

    local a = 2 * t3 - 3 * t2 + 1
    local b = t3 - 2 * t2 + t
    local c = t3 - t2
    local d = -2 * t3 + 3 * t2

    local v = a * keyframe0.Value + b * m0 + c * m1 + d * keyframe1.Value

    return v
end

---销毁
---@public
function animation_curve:dispose()
    self.keys = nil
end

return animation_curve