---
--- Generated by wuhaijun
--- File name : battle_system.lua.txt
--- DateTime : 2021/05/10
--- Description : 战斗系统
---

---战斗帮助类
---@type battle_helper
battle_helper = require 'game/systems/battle/utils/battle_helper'

local helper = battle_helper

local battle_step_type = enum.battle.battle_step_type
---@type game_scene_manager
local game_scene_mgr

---@class battle_system
local battle_system = {
    cname = "battle_system",
    ---战斗网络层
    ---@private
    ---@type battle_network
    network = nil,

    ---战斗控制器
    ---@private
    ---@type battle_controller
    controller = nil,
}
battle_system.__index = battle_system

---@public
---@return battle_system
function battle_system.new()
    game_scene_mgr = game_scene_manager

    ---@type battle_system
    local instance = setmetatable({}, battle_system)
    instance.network = require(helper.path.battle_control .. 'battle_network').new()
    return instance
end

---初始化战斗
---@public
---@param scene_id string 场景id
---@param scene_param any 战斗场景参数
function battle_system:init_battle(scene_id, scene_param)
    -- 战斗控制器
    if self.controller == nil then
        self.controller = require(helper.path.battle_control .. 'battle_controller').new()
        self.controller:initialize(self.network)
    else
        helper.error('Why repeatedly create battle controller?')
    end

    -- 设置战斗控制器
    self.network:set_controller(self.controller)

    -- 进战斗场景
    if scene_id ~= nil then
        game_scene_mgr.switch_scene(scene_id, 2, scene_param)
    end
end

---开始战斗
---@public
function battle_system:start_battle()
    if self.controller ~= nil then
        self.controller:start_battle()
    else
        helper.error("战斗尚未初始化，不能开始战斗")
    end
end

---设置战斗开始阶段
---@public
function battle_system:set_start_step()
    if self.controller ~= nil then
        self.controller:set_battle_step(battle_step_type.START)
    end
end

---设置战斗运行阶段
---@public
function battle_system:set_running_step()
    if self.controller ~= nil then
        self.controller:set_battle_step(battle_step_type.RUNNING)
    end
end

---设置战斗暂停
---@public
---@param is_pause boolean true=暂停, false=恢复
function battle_system:set_pause(is_pause)
    if self.controller ~= nil then
        self.controller:set_pause(is_pause)
    end
end

---释放技能前设置镜头设置：镜头升起(战场观察位)或落下(远程观察位)
---@public
---@param caster_uid Ident 施法者UID
---@param is_rise_up boolean 镜头是否升起，否则落下
function battle_system:set_camera_up_or_down(caster_uid, is_rise_up)
    if self.controller ~= nil then
        self.controller:set_camera_up_or_down(caster_uid, is_rise_up)
    end
end

---跳过必杀施法动画
---@public
function battle_system:skip_unique_skill_casting_animation()
    if self.controller ~= nil then
        self.controller.message:send_skip_unique_skill_casting_animation()
    end
end

---获取单位transform，根据站位索引
---@public
---@param team_type number 队伍类型：1=己方，2=敌方
---@param pos_idx number 站位
---@return UnityEngine.Transform
function battle_system:get_unit_transform_by_pos_idx(team_type, pos_idx)
    if self.controller == nil or self.controller.renderer == nil then
        return
    end

    local render = self.controller.renderer:get_battle_unit_by_pos_index(team_type, pos_idx)
    if render == nil then
        return
    end

    return render.transform
end

---请求使用技能
---@public
---@param skill_mid number 技能ID
---@param caster_uid Ident 施法者
---@param target_uid Ident 目标ID
function battle_system:request_use_skill(skill_mid, caster_uid, target_uid)
    helper.assert(skill_mid ~= nil, "request use invalid skill id")

    self.network:request_use_skill(skill_mid, caster_uid, target_uid, 1)
end

---请求切换自动模式
---@public
---@param operation_mode battle_operation_mode
function battle_system:request_toggle_auto_mode(operation_mode)
    self.network:request_toggle_auto_mode(operation_mode)
end

---尝试进行连战
---@public
---@return boolean false=没有连战次数了
function battle_system:try_to_continuous_battle()
    helper.log("request exit battle msg")

    local data = self:get_data()
    local remain_continuous_count = data:get_remain_continuous_count() or 0
    -- 检测是否需要请求连战，-1表示无限连
    if remain_continuous_count == -1 or remain_continuous_count > 0 then
        self.network:request_continuous_battle()
        return true
    else
        return false
    end
end

---开始战斗回放
---@public
---@param replay_id Ident
function battle_system:start_replay_battle(replay_id)
    if self.network ~= nil then
        self.network:request_battle_replay(replay_id, 0)
    end
end

---回放本场战斗
---@public
function battle_system:playback_current_battle()
    -- 清理战场数据
    self:clear_battlefield()
    -- 请求回放
    self:start_replay_battle()
end

---请求服务器退出战斗
---@public
---@param exit_type battle_exit_type 退出战斗类型（0-普通退出；1-特殊退出流程；2-重新挑战；3-跳转（指定场景退出））
function battle_system:request_exit_battle(exit_type)
    helper.log("request exit battle msg")

    self.network:request_exit_battle(exit_type)
end

---获取战斗网络层
---@public
---@return battle_network
function battle_system:get_network()
    return self.network
end

---获取战斗数据层
---@public
---@return battle_database
function battle_system:get_data()
    if self.controller ~= nil then
        return self.controller.database
    else
        helper.error("战斗未初始化")
        return nil
    end
end

---获取协议最新的索引值
---@public
---@return number
function battle_system:get_message_latest_index()
    if self.controller ~= nil then
        return self.network:get_latest_index()
    else
        helper.error("战斗未初始化")
        return nil
    end
end

---是否正在战斗中
---@public
---@return boolean
function battle_system:is_in_battle()
    return self.controller ~= nil
end

---Tick
---@public
function battle_system:on_update()
    if self.controller ~= nil then
        self.controller:on_update()
    end
end

---清理战场
---@public
function battle_system:clear_battlefield()
    if self.network ~= nil then
        self.network:clear()
    end

    if self.controller ~= nil then
        self.controller:dispose()
        self.controller = nil
    end
end

---销毁
---@public
function battle_system:dispose()
    self:clear_battlefield()

    if self.network ~= nil then
        self.network:dispose()
        self.network = nil
    end
end

return battle_system