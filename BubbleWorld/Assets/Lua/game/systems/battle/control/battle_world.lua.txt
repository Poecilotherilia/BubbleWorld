---
--- Generated by wuhaijun
--- File name : battle_world.lua.txt
--- DateTime : 2021/04/20
--- Description : 
---

local helper = battle_helper
local enum_battle = enum.battle
local battle_step_type = enum_battle.battle_step_type
local BTLStage = enum.proto.BTLStage
local battle_wait_data_type = enum_battle.battle_wait_data_type
local team_type_flag = enum_battle.team_type_flag

---@type state_utility
local state_utility = require(helper.path.battle_fsm .. 'state_utility')
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type battle_components
local battle_components = require(helper.path.battle_components)
---@type context
local battle_context_class = require(helper.path.battle_control .. 'battle_context')
---@type battle_systems
local battle_systems_class = require(helper.path.battle_system .. 'battle_systems')

---@class battle_world
local battle_world = { cname = 'battle_world' } -- class("battle_world")
battle_world.__index = battle_world

---new
---@public
---@return battle_world
function battle_world.new()
    ---@type battle_world
    local instance = setmetatable({}, battle_world)
    instance:ctor()
    return instance
end

---构造函数
---@protected
function battle_world:ctor()
    ---@private
    ---@type battle_controller
    self.controller = nil

    ---uid计数器
    ---@private
    ---@type number
    self.uid_counter = 100

    ---是否正在运行中
    ---@type boolean
    self.is_running = false
    
    ---战斗步骤
    ---@type battle_step_type
    self.battle_step = nil

    ---战斗上下文
    ---@protected
    self.battle_context = nil
    
    ---战斗系统
    ---@protected
    self.battle_systems = nil
end

---初始化
---@public
function battle_world:initialize(controller)
    self.controller = controller
    self.battle_step = battle_step_type.NONE
end

---战斗开始
---@public
function battle_world:start()
    self.battle_context = battle_context_class.new()
    self.battle_context:initialize(self.controller)
    self.battle_systems = battle_systems_class.new(self.battle_context)
    state_utility.initialize(self.battle_context)
    
    self:generate_map()
    self:generate_team()
    self:generate_index()

    self.battle_systems:initialize()
    self:set_battle_step(battle_step_type.INIT)
    
    self:operation_mode_changed()
    
    helper.log('start battle')
end

---设置运行状态
---@public
---@param is_run boolean
function battle_world:set_is_running(is_run)
    self.is_running = is_run
end

---获取战斗上下文
---@public
---@return context
function battle_world:get_battle_context()
    return self.battle_context
end

---设置所有战斗单位激活状态
---@public
---@param is_active boolean
function battle_world:set_all_battle_units_active(is_active)
    local battle_context = self:get_battle_context()
    if battle_context == nil then return end

    local unit_info_list = battle_context.database:get_unit_info_list()
    for i = 1, #unit_info_list do
        local unit_info = unit_info_list[i]
        local entity = battle_context:get_entity_by_primary_index(battle_components.uid, unit_info.uid)
        if entity ~= nil then
            entity:replace_component(battle_components.unit_active, is_active)
        end
    end
end

---检测战斗步骤
---@public
---@return boolean
function battle_world:check_in_battle_step(step)
    return self.battle_step == step
end

---检测战斗步骤是否已经初始化
---@public
---@return boolean
function battle_world:check_battle_initialized()
    return self.battle_step >= battle_step_type.INIT
end

---战斗操作模式改变了，通知系统
---@public
function battle_world:operation_mode_changed()
    local context = self.battle_context
    if context ~= nil then
        local battlefield, _ = context:get_unique_component(battle_components.battle_field)
        local operation_mode = context.database:get_operation_mode()
        battlefield:replace_component(battle_components.operation_mode, operation_mode)
    else
        helper.error('invalid battle_context')
    end
end

--region 生成实体
---生成地图
---@private
function battle_world:generate_map()
    local battle_context = self.battle_context
    
    -- 创建战场实体
    local mode_type = self.controller.database:get_mode_type()
    local battlefield = battle_context:set_unique_component(battle_components.battle_field, mode_type)
    battlefield:add_component(battle_components.eid, battlefield.eid)

    -- 创建战斗步骤组件 
    local step_entity = battle_context:set_unique_component(battle_components.battle_step, self.battle_step)
    step_entity:add_component(battle_components.eid, step_entity.eid)
    
    -- 技能处理实体
    local skill_entity = battle_context:set_unique_component(battle_components.skill_entity)
    skill_entity:add_component(battle_components.eid, skill_entity.eid)
    
    helper.log('generate map finished')
end

---生成队伍
---@private
function battle_world:generate_team()
    local battle_context = self.battle_context

    -- 生成小组实体
    ---@type table<team_type_flag, table<number, number>>
    local team_group = {}
    team_group[team_type_flag.OWN] = battle_utility.generate_group_entity(battle_context, team_type_flag.OWN)
    team_group[team_type_flag.ENEMY] = battle_utility.generate_group_entity(battle_context, team_type_flag.ENEMY)
    
    -- 存储队伍数据
    local battlefield = battle_context:get_unique_component(battle_components.battle_field)
    battlefield:add_component(battle_components.team_group, team_group)
    
    -- 创建队伍单位实体
    ---@type battle_unit_info[]
    local info_list = battle_context.database:get_unit_info_list()
    local unit_count = #info_list
    for i = 1, unit_count do
        battle_utility.generate_unit_entity(battle_context, info_list[i], false)
    end

    helper.log('generate team finished, unit_count = ', unit_count)
end

---生成实体索引
---@private
function battle_world:generate_index()
    self.battle_context:create_primary_entity_index(battle_components.eid, 'value')
    self.battle_context:create_primary_entity_index(battle_components.uid, 'value')

    helper.log('generate index finished')
end
--endregion

--region 战斗步骤处理
---设置战斗步骤
---@private
function battle_world:set_battle_step(step_type)
    local step_entity, comp = self.battle_context:get_unique_component(battle_components.battle_step)
    if comp.value == step_type then return end

    step_entity:replace_component(battle_components.battle_step, step_type)
    self:on_switch_battle_step(step_type)
end

---设置战斗步骤
---@private
---@param step_type battle_step_type
function battle_world:on_switch_battle_step(step_type)
    self.battle_step = step_type
    helper.log('switch the battle step to : ', helper.get_enum_name(battle_step_type, step_type))

    if step_type == battle_step_type.INIT then
        -- 战斗初始化阶段
        self:set_is_running(true)
        
    elseif step_type == battle_step_type.BEFORE then
        -- 战前准备阶段
        local battlefield, _ = self.battle_context:get_unique_component(battle_components.battle_field)
        battlefield:remove_component(battle_components.try_get_data)
        self.controller.message:send_battle_step_before()
        
    elseif step_type == battle_step_type.START then
        -- 战斗开始阶段
        local battlefield, _ = self.battle_context:get_unique_component(battle_components.battle_field)
        if not battlefield:has_component(battle_components.try_get_data) then
            battlefield:add_component(battle_components.try_get_data, battle_wait_data_type.WAIT_SYSTEM_DATA)
        end
        
    elseif step_type == battle_step_type.RUNNING then
        -- 战斗运行阶段
        local battlefield, _ = self.battle_context:get_unique_component(battle_components.battle_field)
        ---@type BTLAction
        local action_data = battlefield:get_component(battle_components.action_data).value
        if action_data ~= nil and action_data.stage == BTLStage.BS_START then
            battlefield:replace_component(battle_components.try_get_data, battle_wait_data_type.WAIT_SYSTEM_DATA)
        end

    elseif step_type == battle_step_type.END then
        -- 战斗结束阶段
        self.controller.message:send_battle_step_end()
        
    elseif step_type == battle_step_type.STORY then
        -- 战斗剧情阶段
        self:set_is_running(true)
        helper.log("战斗剧情阶段")
        
    elseif step_type == battle_step_type.SETTLE then
        -- 战斗结算阶段
        self.controller.message:send_battle_step_settle()
    elseif step_type == battle_step_type.FINISHED then
        -- 战斗结束阶段
        self:set_is_running(false)
        self.controller.message:send_battle_step_finished()
    end
end
--endregion

---更新
---@public
function battle_world:on_update()
    if self.is_running then
        self.battle_systems:execute()
        self.battle_systems:cleanup()
    end
end

---销毁
---@public
function battle_world:dispose()
    self.is_running = nil
    
    if self.battle_systems ~= nil then
        self.battle_systems:tear_down()
        self.battle_systems = nil
    end

    if self.battle_context ~= nil then
        self.battle_context:destroy()
        self.battle_context = nil
    end

    state_utility.dispose()

    self.uid_counter = nil
    self.is_running = nil
    self.battle_step = nil
    
    self.controller = nil
end

return battle_world