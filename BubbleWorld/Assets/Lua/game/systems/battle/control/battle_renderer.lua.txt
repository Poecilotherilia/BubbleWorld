---
--- Generated by wuhaijun
--- File name : battle_renderer.lua.txt
--- DateTime : 2021/07/21
--- Description : 战斗渲染层
---

local table_remove = table.remove
local get_file_name = string.get_file_name_without_extension
local helper = battle_helper
local camera_mgr = camera_manager
local res_manager = res
local GameObject = cs.GameObject
local LuaUtil = cs.LuaUtil
local CinemachineCore = cs.CinemachineCore
local BattleCameraLuaBehaviour = cs.BattleCameraLuaBehaviour
local team_type_flag = enum.battle.team_type_flag
local battle_renderer_type = enum.battle.battle_renderer_type
local UObject_Instantiate = cs.UObject.Instantiate
local CutsceneUpdateMode = cs.CutsceneUpdateMode
local AnimatorUpdateMode = cs.AnimatorUpdateMode
local AnimatorUpdateModeType = AnimatorUpdateMode.UnscaledTime
---@type battle_components
local battle_components = require(helper.path.battle_components)

---@type queue
local queue = require 'framework/basic/queue'
---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type effect_controller
local effect_controller = require 'framework/effect/effect_controller'

---@class battle_renderer
local battle_renderer = { cname = 'battle_renderer' } -- class("battle_renderer")
battle_renderer.__index = battle_renderer

---new
---@public
---@return battle_renderer
function battle_renderer.new()
    ---@type battle_renderer
    local instance = setmetatable({}, battle_renderer)
    instance:ctor()
    return instance
end

--region 初始化相关
---构造函数
---@protected
function battle_renderer:ctor()
    ---加载相机节点完成回调
    ---@private
    self.load_battle_camera_finished_callback = function(g) self:load_battle_camera_finished(g) end
    ---加载相机节点完成回调
    ---@private
    self.load_skill_camera_node_finished_callback = function(g) self:load_skill_camera_node_finished(g) end
    
    ---战斗控制器
    ---@type battle_controller
    ---@private
    self.controller = nil
    
    ---根节点Transform
    ---@private
    ---@type UnityEngine.Transform
    self.root_transform = nil
    ---对象池节点
    ---@private
    ---@type UnityEngine.Transform
    self.pool_transform = nil

    ---资源加载器
    ---@private
    ---@type DeusFramework.Res.DfResLoader
    self.res_loader = nil
    ---资源池
    ---@private
    ---@type DeusFramework.Pool.DfResPool
    self.res_pool = nil

    ---战斗相机控制器
    ---@private
    ---@type Game.Behaviour.BattleCameraLuaBehaviour
    self.battle_camera_behavior_list = nil
    ---战斗相机id
    ---@private
    ---@type number
    self.battle_camera_id_list = nil
    ---我方出现使用相机索引
    ---@private
    ---@type number
    self.our_appear_camera_index = nil
    ---敌方出现使用相机索引
    ---@private
    ---@type number
    self.enemy_appear_camera_index = nil
    ---默认相机索引值
    ---@private
    ---@type number
    self.default_camera_index = nil
    ---当前正在使用的相机索引值
    ---@private
    ---@type number
    self.current_use_camera_index = nil
    ---技能相机动画控制器
    ---@private
    ---@type Game.Behaviour.BattleCameraLuaBehaviour
    self.skill_camera_behavior = nil
    ---技能相机id
    ---@private
    ---@type number
    self.skill_camera_id = nil
    ---boss出场相机节点
    ---@private
    ---@type Game.Behaviour.BattleCameraLuaBehaviour
    self.boss_appear_camera_behavior = nil

    ---渲染器存储字典
    ---@private
    ---@type table<entity, base_render>
    self.render_dict = nil
    ---渲染器列表
    ---@private
    ---@type base_render[]
    self.render_list = nil
    ---渲染器数量
    ---@private
    ---@type number
    self.render_count = nil
    ---被移除渲染器id列表
    ---@private
    ---@type number
    self.removed_eid_list = nil

    ---特效控制器
    ---@private
    ---@type effect_controller
    self.effect_ctrl = nil

    ---原始Volume组件
    ---@private
    ---@type 
    self.source_volume = nil
    ---技能Volume
    ---@private
    ---@type UnityEngine.Rendering.Volume[]
    self.free_volume_queue = nil
    ---Volume
    ---@private
    ---@type UnityEngine.Rendering.Volume[]
    self.use_volume_list = nil
end

---初始化
---@public
---@param controller battle_controller
function battle_renderer:initialize(controller)
    self.controller = controller
    self.render_dict = {}
    self.render_list = {}
    self.render_count = 0
    self.removed_eid_list = {}
    self.free_volume_queue = queue.new()
    self.use_volume_list = {}
end

---战斗开始
---@public
function battle_renderer:start()
    if self.root_transform ~= nil then
        helper.error("The battle render has already begun")
        return
    end
    
    -- 获取BattleRoot节点
    self.root_transform = GameObject("BattleRoot").transform
    -- 创建池
    local pool_transform = GameObject("BattlePool").transform
    pool_transform:SetPosition(-99999, -99999, -99999)
    pool_transform:SetActive(false)
    self.pool_transform = pool_transform
    
    -- 创建资源加载
    self.res_loader = res_manager.create_res_loader()
    self.res_pool = res_manager.create_res_pool(self.res_loader, pool_transform)

    -- 创建特效控制器
    self.effect_ctrl = effect_controller.new()
    self.effect_ctrl:init(self.res_loader, self.res_pool)

    -- 创建后处理节点
    local battle_volume_go = GameObject("BattleVolume")
    battle_volume_go:SetParent(pool_transform)
    self.source_volume = battle_volume_go:AddComponent(typeof(cs.Volume))
    self.source_volume.enabled = false

    -- 加载战斗通用资源
    self:load_battle_common_assets()
end

---预加载通用的资源
---@public
function battle_renderer:load_battle_common_assets()
    -- 预加载技能特效资产
    -- battle_utility.preload_all_skill_effect_handle(self.controller.database, self)

    -- 默认使用第3个相机
    self.our_appear_camera_index = 1
    self.enemy_appear_camera_index = 2
    self.default_camera_index = 3
    self.current_use_camera_index = self.default_camera_index

    -- 初始化相机存储列表
    self.battle_camera_behavior_list = {}
    self.battle_camera_id_list = {}
    
    -- 加载战场观察相机
    local battle_setting_const = self.controller.database:get_setting_const()
    local battle_camera_path = battle_setting_const.KW_BATTLE_VIEW_CAMERA_PATH
    self:load_gameobject_async(battle_camera_path, self.root_transform, self.load_battle_camera_finished_callback)
    self:load_gameobject_async(battle_camera_path, self.root_transform, self.load_battle_camera_finished_callback)
    self:load_gameobject_async(battle_camera_path, self.root_transform, self.load_battle_camera_finished_callback)
    self:load_gameobject_async(battle_camera_path, self.root_transform, self.load_battle_camera_finished_callback)
    
    -- 加载必杀技能节点
    local skill_camera_node_path = battle_setting_const.KW_SKILL_CAMERA_NODE_PATH
    self:load_gameobject_async(skill_camera_node_path, self.pool_transform, self.load_skill_camera_node_finished_callback)
end

---加载相机完毕处理
---@public
---@param go UnityEngine.GameObject
---@return Game.Behaviour.BattleCameraLuaBehaviour, number
function battle_renderer:load_camera_finished_handle(go)
    local behavior = go:GetComponent(typeof(BattleCameraLuaBehaviour))
    if behavior == nil then
        local battle_camera_path = self.controller.database:get_setting_const().KW_BATTLE_VIEW_CAMERA_PATH
        helper.error("not found BattleCameraLuaBehaviour, path = ", battle_camera_path)
        return
    end

    ---@type number
    local v_camera_id
    ---@type Cinemachine.CinemachineVirtualCamera
    local v_camera = behavior.virtualCamera
    if v_camera ~= nil then
        v_camera_id = camera_mgr.add_virtual_camera(v_camera)
    else
        helper.error("not found BattleCameraLuaBehaviour.virtualCamera")
    end

    return behavior, v_camera_id
end

---加载战斗观察详解完成
---@private
---@param go UnityEngine.GameObject
function battle_renderer:load_battle_camera_finished(go)
    local behavior, camera_id = self:load_camera_finished_handle(go)
    if behavior == nil then return end

    local index = #self.battle_camera_behavior_list + 1
    self.battle_camera_behavior_list[index] = behavior
    self.battle_camera_id_list[index] = camera_id

    behavior.virtualCamera.name = 'battlefield_v_camera_' .. tostring(index)
    behavior:SetAnimUpdateMode(self:get_animator_update_mode())

    -- 默认使用第一个相机
    if index == self.default_camera_index then
        ---@type MapCameraInfo 战场观察相机信息
        local camera_info = self.controller.database:get_battlefield_camera_viewpoint()
        battle_utility.set_virtual_camera_info(behavior.virtualCamera, camera_info)

        -- 设置默认相机
        camera_mgr.set_default_v_camera_id(camera_id)
    end
end

---加载技能相机节点完成
---@private
---@param go UnityEngine.GameObject
function battle_renderer:load_skill_camera_node_finished(go)
    local behavior, v_camera_id = self:load_camera_finished_handle(go)
    if behavior == nil then return end

    behavior:SetAnimUpdateMode(self:get_animator_update_mode())
    
    self.skill_camera_behavior = behavior
    self.skill_camera_id = v_camera_id
end

---加载boss出场相机节点
---@public
function battle_renderer:load_boss_appear_camera_node()
    if self.boss_appear_camera_behavior ~= nil then return end

    local battle_setting_const = self.controller.database:get_setting_const()
    local camera_node_path = battle_setting_const.KW_APPEAR_CAMERA_NODE_PATH

    local camera_go = self:load_gameobject(camera_node_path, self.pool_transform)
    if camera_go == nil then
        helper.error("not found BattleCameraLuaBehaviour, camera_node_path = ", camera_node_path)
        return
    end

    ---@type Game.Behaviour.BattleCameraLuaBehaviour
    local behavior = camera_go:GetOrAddComponent(typeof(cs.BattleCameraLuaBehaviour))
    behavior:SetAnimUpdateMode(self:get_animator_update_mode())
    ---@type UnityEngine.Camera
    local camera = behavior.normalCamera
    if camera == nil then
        helper.error("not found BattleCameraLuaBehaviour.normalCamera, path = ", camera_node_path)
        return
    end

    -- 隐藏
    behavior:SetActive(false)

    self.boss_appear_camera_behavior = behavior
end
--endregion

--region 功能接口
---设置战斗倍速
---@public
---@param value number
function battle_renderer:set_battle_time_speed(value)
    -- 设置单位和子弹
    local list = self.render_list
    for i = 1, self.render_count do
        local render = list[i]
        if render:get_is_init() then
            render:set_play_speed(value)
        end
    end

    -- 设置相机动画速度
    local camera_behavior_list = self.battle_camera_behavior_list
    for i = 1, #camera_behavior_list do
        camera_behavior_list[i]:SetAnimationSpeed(value)
    end
    if self.skill_camera_behavior ~= nil then
        self.skill_camera_behavior:SetAnimationSpeed(value)
    end
end
--endregion

--region 获取相关
---获取根节点transform
---@public
---@return UnityEngine.Transform
function battle_renderer:get_root_transform()
    return self.root_transform
end

---获取根节点transform
---@public
---@return UnityEngine.Transform
function battle_renderer:get_pool_transform()
    return self.pool_transform
end

---获取res_loader和res_pool
---@public
---@return DeusFramework.Res.DfResLoader, DeusFramework.Pool.DfResPool
function battle_renderer:get_res_loader_and_pool()
    return self.res_loader, self.res_pool
end

---获取特效控制器
---@public
---@return effect_controller
function battle_renderer:get_effect_ctrl()
    return self.effect_ctrl
end

---获取队伍出现使用的相机
---@public
---@param team_flag team_type_flag
---@return Game.Behaviour.BattleCameraLuaBehaviour, number
function battle_renderer:get_team_appear_used_camera(team_flag)
    local camera_index
    if team_flag == team_type_flag.OWN then
        camera_index = self.our_appear_camera_index
    elseif team_flag == team_type_flag.ENEMY then
        camera_index = self.enemy_appear_camera_index
    end

    local behavior = self.battle_camera_behavior_list[camera_index]
    local camera_id = self.battle_camera_id_list[camera_index]

    return behavior, camera_id
end

---获取空闲战斗观察相机
---@public
---@return Game.Behaviour.BattleCameraLuaBehaviour, number
function battle_renderer:get_free_battle_view_camera()
    local camera_index = self.current_use_camera_index
    camera_index = camera_index + 1
    if camera_index > #self.battle_camera_behavior_list then
        camera_index = 3
    end
    self.current_use_camera_index = camera_index
    
    local behavior = self.battle_camera_behavior_list[camera_index]
    local camera_id = self.battle_camera_id_list[camera_index]

    return behavior, camera_id
end

---获取技能相机和技能相机id
---@public
---@return Game.Behaviour.BattleCameraLuaBehaviour, number
function battle_renderer:get_skill_camera_behavior_and_id()
    return self.skill_camera_behavior, self.skill_camera_id
end

---获取boss出场相机节点
---@public
---@return Game.Behaviour.BattleCameraLuaBehaviour
function battle_renderer:get_boss_appear_camera_behavior()
    return self.boss_appear_camera_behavior
end
--endregion

--region 后处理相关
---获取后处理Volume
---@public
---@return UnityEngine.Rendering.Volume
function battle_renderer:get_volume()
    ---@type UnityEngine.Rendering.Volume
    local free_volume = self.free_volume_queue:dequeue()
    if free_volume ~= nil then
        free_volume:SetParent(self.root_transform)
    else
        free_volume = UObject_Instantiate(self.source_volume, self.root_transform)
    end
    free_volume.enabled = true

    -- 设置优先级
    local max_priority = 10
    local use_volume_list = self.use_volume_list
    for i = 1, #use_volume_list do
        if use_volume_list[i].priority > max_priority then
            max_priority = use_volume_list[i].priority
        end
    end
    free_volume.priority = max_priority + 1

    -- 标记已使用
    self.use_volume_list[#self.use_volume_list + 1] = free_volume

    return free_volume
end

---回收后处理Volume
---@public
---@param volume UnityEngine.Rendering.Volume
function battle_renderer:recycle_volume(volume)
    if volume == nil then return end

    volume.profile = nil
    volume.priority = 10
    volume.enabled = false
    volume:SetParent(self.pool_transform)

    self.free_volume_queue:enqueue(volume)
    local use_volume_list = self.use_volume_list
    for i = 1, #use_volume_list do
        if use_volume_list[i] == volume then
            table_remove(use_volume_list, i)
            break
        end
    end
end

---获取动画更新模式
---@public
---@return UnityEngine.AnimatorUpdateMode
function battle_renderer:get_animator_update_mode()
    return AnimatorUpdateModeType
end

---获取Cutscene更新模式
---@public
---@return Slate.Cutscene.UpdateMode
function battle_renderer:get_cutscene_update_mode()
    if AnimatorUpdateModeType == AnimatorUpdateMode.UnscaledTime then
        return CutsceneUpdateMode.UnscaledTime
    else
        return CutsceneUpdateMode.Normal
    end
end
--endregion

--region 资源加载相关
---加载GameObject(异步)
---@public
---@param res_path string 资源路径
---@param parent UnityEngine.Transform 父节点
---@param callback fun(go:UnityEngine.GameObject) 加载完成回调
---@param obj_name string 物体的名字
function battle_renderer:load_gameobject_async(res_path, parent, callback, obj_name)
    local t_name = obj_name or get_file_name(res_path)
    parent = parent or self.root_transform
    res_manager.load_instance_async(res_path, t_name, parent, nil, self.res_loader, self.res_pool, callback)
end

---加载GameObject(同步)
---@public
---@param res_path string 资源路径
---@param parent UnityEngine.Transform 父节点
---@return UnityEngine.GameObject
function battle_renderer:load_gameobject(res_path, parent)
    local name = get_file_name(res_path)
    parent = parent or self.root_transform
    return res_manager.load_instance(res_path, name, parent, self.res_loader, self.res_pool)
end

---卸载GameObject
---@public
---@param go UnityEngine.GameObject
function battle_renderer:unload_gameobject(go)
    if go == nil then return end

    res_manager.unload_instance(go, self.res_loader)
end

---根据资源类型加载资源(异步)
---@public
---@param res_path string 资源路径
---@param type asset_type 资源类型
---@param callback fun(res_data:DeusFramework.Res.Model.DfRes) 加载完成回调
function battle_renderer:load_asset_async(res_path, type, callback)
    res_manager.load_asset_async(res_path, type, nil, self.res_loader, self.res_pool, callback)
end

---根据资源类型加载资源(同步)
---@public
---@param res_path string 资源路径
---@param type asset_type 资源类型
---@return DeusFramework.Res.Model.DfRes
function battle_renderer:load_asset(res_path, type)
    return res_manager.load_asset(res_path, type, self.res_loader, self.res_pool)
end

---根据资源类型卸载资源
---@public
---@param res_data DeusFramework.Res.Model.DfRes 要卸载的资源
---@param enqueue_pool boolean 是否入池，默认为true(仅对由池创建的对象有效)。
function battle_renderer:unload_asset(res_data, enqueue_pool)
    if res_data ~= nil then
        res_manager.unload_asset(res_data, self.res_loader, enqueue_pool) 
    end
end

---预加载assets(异步)
---@public
---@param res_path string 资源路径
---@param count number
function battle_renderer:preload_instance_async(res_path, count)
    local name = get_file_name(res_path)
    res_manager.preload_instance_async(self.res_pool, res_path, name, count or 1)
end

---预加载GameObject(同步)
---@public
---@param res_path string 资源路径
---@param count number
---@return DeusFramework.Res.Model.DfRes
function battle_renderer:preload_instance(res_path, count)
    local name = get_file_name(res_path)
    return res_manager.preload_instance(self.res_pool, res_path, name, count or 1)
end

---预加载Asset(异步)
---@public
---@param res_path string 资源路径
---@param type asset_type
---@param finished_callback fun(res:DeusFramework.Res.Model.DfRes)
function battle_renderer:preload_asset_async(res_path, type, finished_callback)
    res_manager.preload_asset_async(self.res_pool, res_path, type, finished_callback)
end

---预加载Asset(同步)
---@public
---@param res_path string 资源路径
---@param type asset_type
---@return DeusFramework.Res.Model.DfRes
function battle_renderer:preload_asset(res_path, type)
    return res_manager.preload_asset(self.res_pool, res_path, type)
end
--endregion

--region 渲染单位相关
---添加渲染单位
---@public
---@param entity entity
---@param render base_render
function battle_renderer:add_render_unit(entity, render)
    if self.render_dict[entity.eid] ~= nil then
        helper.error('Render units already exist, eid = ', entity.eid)
        return
    end
    
    self.render_dict[entity.eid] = render
    self.render_count = self.render_count + 1
    self.render_list[self.render_count] = render
end

---移除渲染单位
---@public
---@param eid number
function battle_renderer:remove_render_unit(eid)
    local render = self.render_dict[eid]
    if render == nil then return end

    self.removed_eid_list[#self.removed_eid_list + 1] = eid
end

---获取渲染单位
---@public
---@param eid number
---@return base_render
function battle_renderer:get_render_unit(eid)
    return self.render_dict[eid]
end

---获取渲染单位列表
---@public
---@return base_render[]
function battle_renderer:get_render_list()
    return self.render_list
end

---是否存在渲染单位
---@public
---@param eid number
---@return boolean
function battle_renderer:has_render_unit(eid)
    return self:get_render_unit(eid) ~= nil
end

---获取渲染单位挂点
---@public
---@param eid number
---@param point_name string 挂点名字
---@return UnityEngine.Transform
function battle_renderer:get_attach_point(eid, point_name)
    local render = self:get_render_unit(eid)
    helper.assert(render ~= nil, "failed to get render unit, eid = ", eid)

    return render:get_attach_point(point_name)
end

---获取战斗单位根据站位索引
---@public
---@param team_type team_type_flag
---@param pos_idx number 站位
---@return render_battle_unit
function battle_renderer:get_battle_unit_by_pos_index(team_type, pos_idx)
    local render_list = self.render_list
    if render_list == nil then return end
    
    for i = 1, #render_list do
        ---@type render_battle_unit
        local render = render_list[i]
        if render:check_renderer_type(battle_renderer_type.ROLE) and render:get_team_type() == team_type 
                and render:get_pos_index() == pos_idx then
            return render
        end
    end
end
--endregion

--region 更新相关
---更新
---@public
---@param delta_time number 帧间隔(毫秒)
---@param unscaled_time number 帧间隔(毫秒)
function battle_renderer:on_update(delta_time, unscaled_time)
    local unscaled_second_time = unscaled_time / 1000

    self:on_update_effect_ctrl(unscaled_second_time)
    --self:on_update_audio_ctrl(unscaled_second_time)
    self:on_update_render_list(unscaled_second_time)

    LuaUtil.BattleUpdate(delta_time / 1000, unscaled_second_time)

    self:remove_render_handle()
end

---将被移除的渲染器在列表中剔除
---@private
function battle_renderer:remove_render_handle()
    if self.removed_eid_list == nil then return end
    
    local count = #self.removed_eid_list
    if count == 0 then return end

    local removed_eid_list = self.removed_eid_list
    local render_count = self.render_count
    local render_list = self.render_list

    for i = 1, count do
        local eid = removed_eid_list[i]
        
        -- 销毁渲染实体
        for j = 1, render_count do
            local render = render_list[j]
            if eid == render:get_eid() then
                self.render_dict[eid] = nil
                table_remove(render_list, j)
                render:dispose()

                render_count = render_count - 1
                break
            end
        end
    end
    helper.clear_array(removed_eid_list)
    
    self.render_count = render_count
end

---更新render列表
---@private
---@param delta_time number 间隔（秒）
function battle_renderer:on_update_render_list(delta_time)
    if self.render_list == nil then return end
    
    local list = self.render_list
    for i = 1, self.render_count do
        local render = list[i]
        if render.on_update ~= nil and render:get_is_init() then
            render:on_update(delta_time)
        end
    end
end

---@private
---@param delta_time number 间隔（秒）
function battle_renderer:on_update_effect_ctrl(delta_time)
    if nil ~= self.effect_ctrl then
        self.effect_ctrl:on_update(delta_time)
    end
end

---@private
---@param delta_time number 间隔（秒）
--function battle_renderer:on_update_audio_ctrl(delta_time)
--    if nil ~= self.audio_ctrl then
--        self.audio_ctrl:on_update(delta_time)
--    end
--end
--endregion

---清理
---@public
function battle_renderer:clear()
    local render_list = self.render_list
    for i = 1, self.render_count do
        render_list[i]:dispose()
    end
end

---销毁
---@public
function battle_renderer:dispose()
    CinemachineCore.UniformDeltaTimeOverride = -1

    local camera_behavior_list = self.battle_camera_behavior_list
    if camera_behavior_list ~= nil then
        for i = 1, #camera_behavior_list do
            camera_mgr.remove_virtual_camera(self.battle_camera_id_list[i])
            self:unload_gameobject(camera_behavior_list[i].gameObject)
        end
    end
    
    if self.skill_camera_behavior ~= nil then
        camera_mgr.remove_virtual_camera(self.skill_camera_id)
        self.skill_camera_id = nil
        self.skill_camera_behavior:ReleaseTexture()
        self:unload_gameobject(self.skill_camera_behavior.gameObject)
        self.skill_camera_behavior = nil
    end

    if self.boss_appear_camera_behavior ~= nil then
        self.boss_appear_camera_behavior:ReleaseTexture()
        self:unload_gameobject(self.boss_appear_camera_behavior.gameObject)
        self.boss_appear_camera_behavior = nil
    end

    if self.use_volume_list ~= nil then
        for i = 1, #self.use_volume_list do
            helper.error("Found volume file in use")
            self.use_volume_list[i].profile = nil
            self.use_volume_list[i] = nil
        end
    end

    self.battle_camera_behavior_list = nil
    self.battle_camera_id_list = nil
    self.our_appear_camera_index = nil
    self.enemy_appear_camera_index = nil
    self.current_use_camera_index = nil
    self.use_volume_list = nil

    if self.free_volume_queue ~= nil then
        self.free_volume_queue:dispose()
        self.free_volume_queue = nil
    end
    if self.source_volume ~= nil then
        self.source_volume.profile = nil
        self.source_volume = nil
    end
    
    self.render_count = nil
    self.render_list = nil
    self.render_dict = nil
    self.removed_eid_list = nil

    self.effect_ctrl:dispose()
    self.effect_ctrl = nil
    --self.audio_ctrl:dispose()
    --self.audio_ctrl = nil

    self.res_pool:Clear()
    self.res_pool = nil
    self.res_loader:Dispose()
    self.res_loader = nil

    LuaUtil.DestroyObj(self.root_transform)
    self.root_transform = nil
    LuaUtil.DestroyObj(self.pool_transform)
    self.pool_transform = nil
    
    self.controller = nil

    self.load_own_appear_view_camera_finished_callback = nil
    self.load_enemy_appear_view_camera_finished_callback = nil
    self.load_battle_camera_finished_callback = nil
    self.load_skill_camera_node_finished_callback = nil
end

return battle_renderer