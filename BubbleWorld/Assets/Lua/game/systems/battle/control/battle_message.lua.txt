---
--- Generated by wuhaijun
--- File name : battle_message.lua.txt
--- DateTime : 2021/04/20
--- Description : 战斗中的消息管理
---

local enum = enum
local message = message
---@type message_type
local message_type = enum.message_type

---@class battle_message
local battle_message = class("battle_message")

---构造函数
---@protected
function battle_message:ctor()
    ---@private
    ---@type battle_controller
    self.controller = nil
end

---初始化
---@public
function battle_message:initialize(controller)
    self.controller = controller
    
    self:add_events()
end

---添加消息
---@private
function battle_message:add_events()
    message.add_listener(message_type.START_CUTSCENE, self.on_start_cutscene_handle, self)
    message.add_listener(message_type.END_CUTSCENE, self.on_end_cutscene_handle, self)
end

---移除消息
---@private
function battle_message:remove_events()
    message.remove_listener(message_type.START_CUTSCENE, self.on_start_cutscene_handle, self)
    message.remove_listener(message_type.END_CUTSCENE, self.on_end_cutscene_handle, self)
end

---剧情动画开始处理
---@private
function battle_message:on_start_cutscene_handle()
    self.controller.world:set_all_battle_units_active(false)
end

---剧情动画结束处理
---@private
function battle_message:on_end_cutscene_handle()
    self.controller.world:set_all_battle_units_active(true)
end

--region 消息处理

--endregion

--region 发送消息
---发送战斗渲染单位同步
---@public
---@param render base_render
function battle_message:send_battle_render_unit(render)
    message.broadcast(message_type.BATTLE_SYNC_RENDER_UNIT, render)
end

---发送进入战场消息
---@public
function battle_message:send_battle_enter_battlefield()
    message.broadcast(message_type.BATTLE_ENTER_BATTLEFIELD)
end

---发送战前准备阶段
---@public
function battle_message:send_battle_step_before()
    message.broadcast(message_type.BATTLE_STEP_BEFORE_HANDLE)
end

---Boss来袭
---@public
---@param state number 状态：1=展示UI，2=开始慢放，3=结束展示
---@param normal_tex UnityEngine.RenderTexture 渲染rt
---@param child_tex UnityEngine.RenderTexture 渲染rt
function battle_message:send_battle_show_boss_coming(state, normal_tex, child_tex)
    message.broadcast(message_type.BATTLE_SHOW_BOSS_COMING, state, normal_tex, child_tex)
end

---发送显示PK面板
---@public
---@param pk_info BTLPkInfo
function battle_message:send_battle_power_pk_msg(pk_info)
    message.broadcast(message_type.BATTLE_POWER_PK_HANDLE, pk_info)
end

---发送战斗显示开始动画消息
---@public
function battle_message:send_battle_show_start_anim_msg()
    message.broadcast(message_type.BATTLE_SHOW_START_ANAM)
end

---战斗终结阶段
---@public
function battle_message:send_battle_step_end()
    message.broadcast(message_type.BATTLE_STEP_END_HANDLE)
end

---战斗结算阶段
---@public
function battle_message:send_battle_step_settle()
    message.broadcast(message_type.BATTLE_STEP_SETTLE_HANDLE)
end

---战斗完成阶段
---@public
function battle_message:send_battle_step_finished()
    message.broadcast(message_type.BATTLE_STEP_FINISHED_HANDLE)
end

---发送释放技能消息给UI
---@public
---@param is_own_team boolean 是否时我方队伍
---@param in_turn_unit BTLEntityStateInTurn 行动单位数据
function battle_message:send_release_skill_message(is_own_team, in_turn_unit)
    message.broadcast(message_type.BATTLE_RELEASE_SKILL_HANDLE, is_own_team, in_turn_unit)
end

---使用技能结果数据
---@public
---@param in_action BTLInActionDetail
function battle_message:send_use_skill_result(in_action)
    message.broadcast(message_type.BATTLE_USE_SKILL_RESULT, in_action)
end

---发送显示技能伤害消息
---@public
---@param effect_data BTLEffect 技能效果数据
---@param effect_list BTLEffect[] 当前阶段所有技能效果(仅可用于判断，不可修改)
---@param multi_count number 段数
function battle_message:send_show_skill_damage(effect_data, effect_list, multi_count)
    message.broadcast(message_type.BATTLE_SHOW_SKILL_DAMAGE, effect_data, effect_list, multi_count or 0)
end

---发送回合数改变开始
---@public
function battle_message:send_round_number_change_start(num)
    if self.controller.database:get_round_number() ~= num then
        message.broadcast(message_type.BATTLE_ROUND_NUMBER_CHANGE_START)
    end
end

---发送回合数改变
---@public
---@param num number
function battle_message:send_round_number_change(num)
    message.broadcast(message_type.BATTLE_ROUND_NUMBER_CHANGE_END, num)
end

---发送行动队列数
---@public
---@param action_queue BTLActionQueue
function battle_message:send_action_queue_change(action_queue)
    message.broadcast(message_type.BATTLE_ACTION_QUEUE_CHANGE, action_queue)
end

---发送魔力色相改变消息
---@public
---@param magic_hues table<number, number>
function battle_message:send_magic_hues_change(magic_hues)
    message.broadcast(message_type.BATTLE_MAGIC_HUES_CHANGE, magic_hues)
end

---同步游戏单位死亡消息
---@public
---@param uid Ident
function battle_message:send_sync_unit_death(uid)
    message.broadcast(message_type.BATTLE_SYNC_UNIT_DEATH, uid)
end

---同步变身单位删除变身前Render
---@public
---@param uid Ident
function battle_message:send_sync_delete_render(uid)
    message.broadcast(message_type.BATTLE_SYNC_DELETE_RENDER, uid)
end

---发送必杀显示黑屏
---@public
---@param state number 状态：1=显示黑屏+立绘，2=关闭黑屏+立绘，3=白屏淡出
---@param is_show boolean 是否显示跳过必杀UI: true=显示，false=不显示
---@param caster_uid Ident 施法者UID
---@param team_type team_type_flag 队伍标识
function battle_message:send_ultskill_show_blank_screen(state, is_show, caster_uid, team_type)
    message.broadcast(message_type.BATTLE_ULTSKILL_BLANK_SCREEN_STATE, state, is_show, caster_uid, team_type)
end

---发送必杀施法视频给UI
---@public
---@param video_clip UnityEngine.Video.VideoClip 要播放的视频文件
function battle_message:send_show_unique_skill_casting_video(video_clip)
    message.broadcast(message_type.BATTLE_ULTSKILL_BLANK_SCREEN_HIDE, video_clip)
end

---发送显示必杀施法立绘结束消息
---@public
function battle_message:send_unique_skill_casting_painting_finished()
    message.broadcast(message_type.BATTLE_UNIQUE_SKILL_CASTING_PAINING_FINISHED)
end

---发送必杀施法完毕消息
---@public
function battle_message:send_unique_skill_casting_finished()
    message.broadcast(message_type.BATTLE_UNIQUE_SKILL_CASTING_FINISHED)
end

---发送技能施法完毕消息
---@public
---@param skill_mid string 配置id
---@param caster_uid ident 施法者UID
---@param target_uid ident 目标UID
function battle_message:send_skill_cast_complete(skill_mid, caster_uid, target_uid)
    message.broadcast(message_type.BATTLE_SKILL_CAST_COMPLETE, skill_mid, caster_uid, target_uid)
end

---发送单位个人行动结束
---@public
function battle_message:send_unit_actions_finished()
    message.broadcast(message_type.BATTLE_UNIT_ACTIONS_FINISHED)
end


---胜利镜头结束
---@public
function battle_message:send_victory_closeup_finished()
    message.broadcast(message_type.BATTLE_VICTORY_CLOSEUP_FINISHED)
end


---强势期变化
---@public
---@param camera_type battle_camera_type
function battle_message:send_camera_change_handle(camera_type)
    message.broadcast(message_type.BATTLE_CAMERA_CHANGE_HANDLE, camera_type)
end

---跳过必杀施法动画
---@public
function battle_message:send_skip_unique_skill_casting_animation()
    message.broadcast(message_type.BATTLE_SKIP_UNIQUE_SKILL_CASTING_ANIMATION)
end

---最后一击事件
---@public
---@param is_our_victory boolean true=我方胜利，false=非我方胜利
---@param state number 状态：1=开始，2=结束
function battle_message:send_final_attack_message(is_our_victory, state)
    message.broadcast(message_type.BATTLE_FINAL_ATTACK_MESSAGE, is_our_victory, state)
end

---同步行动前详情数据
---@public
---@param detail BTLPostPreActionDetail
function battle_message:send_pre_action_detail_message(detail)
    message.broadcast(message_type.BATTLE_PRE_ACTION_DETAIL_MESSAGE, detail)
end

---接收到服务器战斗信息后广播
---@public
---@param ack_info AckBTLInfo
function battle_message:send_battle_info_message(ack_info)
    message.broadcast(message_type.BATTLE_RECEIVED_BATTLE_INFO, ack_info)
end

--endregion

---清理
---@public
function battle_message:clear()
    self:remove_events()
end

---销毁
---@public
function battle_message:dispose()
    self:clear()

    self.controller = nil
end

return battle_message