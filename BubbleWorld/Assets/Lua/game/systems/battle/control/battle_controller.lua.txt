---
--- Generated by wuhaijun
--- File name : battle_controller.lua.txt
--- DateTime : 2021/04/23
--- Description : 战斗控制器
---

-- local math_modf = math.modf
-- local socket = require 'socket'
local Time = cs.Time

local helper = battle_helper
local battle_step_type = enum.battle.battle_step_type
local system_manager = system_manager
local game_scene_manager = game_scene_manager
local window_mgr = window
local table_names = tables
local enum = enum
local battle_mode_type = enum.battle.battle_mode_type
local EBattleType = enum.proto.EBattleType
local ui_cache_data = game_data_manager.cache
local cache_keys = enum.cache_keys

---@type battle_utility
local battle_utility = require(helper.path.battle_utils .. 'battle_utility')
---@type timer_control
local timer_control = require 'framework/timer/timer_control'
---@type wwise_util
local wwise_util = require 'game/utils/wwise_util/wwise_util'
---@type battle_constant
local battle_constant = require(helper.path.battle_utils .. 'battle_constant')

---@type battle_database
local battle_database = require(helper.path.battle_control .. 'battle_database')
---@type battle_message
local battle_message = require(helper.path.battle_control .. 'battle_message')
---@type battle_world
local battle_world = require(helper.path.battle_control .. 'battle_world')
---@type battle_renderer
local battle_renderer = require(helper.path.battle_control .. 'battle_renderer')

---@class battle_controller
local battle_controller = { cname = 'battle_controller' }
battle_controller.__index = battle_controller

local MAXIMUM_DELTA_TIME<const> =  math.ceil(Time.maximumDeltaTime * 1000)

---new
---@public
---@return battle_controller
function battle_controller.new()
    ---@type battle_controller
    local instance = setmetatable({}, battle_controller)
    instance:ctor()
    return instance
end

---构造函数
---@private
function battle_controller:ctor()
    ---是否正在运行中
    ---@private
    ---@type boolean
    self.is_running = false
    ---战斗是否结束
    ---@private
    ---@type boolean
    self.is_finished = nil
    ---退出战斗类型（0-普通退出；1-特殊退出流程；2-重新挑战；3-跳转（指定场景退出））
    ---@private
    ---@type battle_exit_type
    self.exit_type = nil

    ---时间控制器
    ---@private
    ---@type timer_control
    self.timer_ctrl = nil
    ---时间控制器(不缩放)
    ---@private
    ---@type timer_control
    self.timer_ctrl_unscale = nil
    ---时间控制器
    ---@public
    ---@type battle_network
    self.network = nil
    ---战斗数据管理
    ---@public
    ---@type battle_database
    self.database = nil
    ---战斗消息管理
    ---@public
    ---@type battle_message
    self.message = nil
    ---战斗世界
    ---@private
    ---@type battle_world
    self.world = nil
    ---战斗渲染层
    ---@public
    ---@type battle_renderer
    self.renderer = nil

    ---时间流逝(毫秒)
    ---@private
    ---@type number
    self.elapse_time = 0  -- socket.gettime() * 1000
    ---没有缩放帧间隔时间(毫秒)
    ---@private
    ---@type number
    self.unscale_delta_time = 16
    ---时间缩放
    ---@private
    ---@type number
    self.time_scale = 1
end

---初始化
---@public
---@param battle_network battle_network
function battle_controller:initialize(battle_network)
    self.network = battle_network

    self.timer_ctrl = timer_control.new()
    self.timer_ctrl_unscale = timer_control.new()
    self.database = battle_database.new()
    self.message = battle_message.new()
    self.world = battle_world.new()
    self.renderer = battle_renderer.new()

    self.timer_ctrl:initialize()
    self.timer_ctrl_unscale:initialize()
    self.database:initialize(self)
    self.message:initialize(self)
    self.world:initialize(self)
    self.renderer:initialize(self)

    self.is_running = true
    self.is_finished = false
    self.exit_type = 0
end

---设置战斗信息
---@public
---@param btl_info AckBTLInfo
function battle_controller:set_battle_info(btl_info)
    if self:check_in_battle_step(battle_step_type.NONE) then
        self.database:init_battle_info(btl_info)
    else
        self.database:add_battle_data(btl_info)
    end
    self.message:send_battle_info_message(btl_info)
end

---开始战斗世界
---@public
function battle_controller:start_battle()
    if helper.is_debug then
        local LogType = CS.UnityEngine.LogType
        local StackTraceLogType = CS.UnityEngine.StackTraceLogType
        cs.Application.SetStackTraceLogType(LogType.Log, StackTraceLogType.None)
    end
    
    self.renderer:start()
    self.world:start()
end

---设置战斗步骤
---@public
---@param step_type battle_step_type
function battle_controller:set_battle_step(step_type)
    self.world:set_battle_step(step_type)
end

---设置战斗步骤
---@public
---@param is_pause boolean true=暂停, false=恢复
function battle_controller:set_pause(is_pause)
    if is_pause then
        self.is_running = false
        self:set_time_scale(0)
        wwise_util.do_pause_battle_event()
    else
        self.is_running = true
        self:set_time_scale(self.database:get_speed_up_num())
        wwise_util.do_resume_battle_event()
    end
end

---停止战斗
---@public
---@param exit_type battle_exit_type 退出战斗类型（0-普通退出；1-特殊退出流程；2-重新挑战；3-跳转（指定场景退出））
function battle_controller:end_battle(exit_type)
    self.exit_type = exit_type
    self.is_finished = true
end

---设置连续战斗
---@public
function battle_controller:set_continuous_battle()
    ---@type battle_mode_type 战斗模式
    local mode_type = self.database:get_mode_type()

    -- 清理战场数据
    system_manager.battle:clear_battlefield()
    -- 连战，重新初始化战斗
    system_manager.battle:init_battle()

    -- 连战无需loading，直接战斗UI
    if mode_type == battle_mode_type.PVP or mode_type == battle_mode_type.PVE then
        window_mgr.open(table_names.Window.ids.Battle)
    else
        window_mgr.open(table_names.Window.ids.BattlePlayback)
    end
end

---检测战斗步骤
---@public
---@return boolean
---@param step battle_step_type
function battle_controller:check_in_battle_step(step)
    return self.world:check_in_battle_step(step)
end

---检测战斗步骤是否已经初始化
---@public
---@return boolean
function battle_controller:check_battle_initialized()
    return self.world:check_battle_initialized()
end
---战斗操作模式改变
---@public
function battle_controller:operation_mode_changed()
    return self.world:operation_mode_changed()
end

---释放技能前设置镜头设置：镜头升起(战场观察位)或落下(远程观察位)
---@public
---@param caster_uid Ident 施法者UID
---@param is_rise_up boolean 镜头是否升起，否则落下
function battle_controller:set_camera_up_or_down(caster_uid, is_rise_up)
    local action_name
    if is_rise_up then
        action_name = battle_constant.CAMERA_CAMERA_UP_EVENT
    else
        action_name = battle_constant.CAMERA_CAMERA_DOWN_EVENT
    end
    battle_utility.set_skill_camera_other_flow(self.world:get_battle_context(), caster_uid, action_name)
end

---获取战斗回放数据
---@public
---@param index number 战斗回放索引
function battle_controller:get_replay_battle_data(index)
    local context = self.world:get_battle_context()
    ---@type battle_components
    local battle_components = require(helper.path.battle_components)
    local battlefield, _ = context:get_unique_component(battle_components.battle_field)
    battlefield:replace_component(battle_components.replay_idx, index)
end

--region 时间管理
---添加执行一次的计时器
---@public
---@param interval number 间隔时间(毫秒)
---@param action function 回调方法
---@vararg any 回调时的参数
---@return number 返回TimerId
function battle_controller:add_timer(interval, action, ...)
    return self.timer_ctrl:add_timer(interval, action, 1, ...)
end

---主动移除计时器
---@public
---@param timer_id number 计时器Id
function battle_controller:remove_timer(timer_id)
    if timer_id == nil then
        return
    end

    self.timer_ctrl:remove_timer(timer_id)
end

---添加执行一次的计时器(时间未缩放)
---@public
---@param interval number 间隔时间(毫秒)
---@param action function 回调方法
---@vararg any 回调时的参数
---@return number 返回TimerId
function battle_controller:add_timer_unscale(interval, action, ...)
    return self.timer_ctrl_unscale:add_timer(interval, action, 1, ...)
end

---主动移除计时器(时间未缩放)
---@public
---@param timer_id number 计时器Id
function battle_controller:remove_timer_unscale(timer_id)
    if timer_id == nil then
        return
    end

    self.timer_ctrl_unscale:remove_timer(timer_id)
end

---设置时间缩放
---@public
---@param value number
function battle_controller:set_time_scale(value, hide_log)
    if not hide_log then
        helper.log('set the battle time scale, value = ', value) 
    end

    if self.time_scale ~= value then
        self.time_scale = value
        self.renderer:set_battle_time_speed(value)
    end
end

---获取时间缩放
---@public
---@return number
function battle_controller:get_time_scale()
    return self.time_scale
end

---获取deltaTime(毫秒)
---@public
---@return number
function battle_controller:get_delta_time()
    local delta_time = self:get_unscaled_time() * self:get_time_scale()
    if delta_time > MAXIMUM_DELTA_TIME then
        delta_time = MAXIMUM_DELTA_TIME
    end
    return delta_time
end

---获取unscaled deltaTime(毫秒)
---@public
---@return number
function battle_controller:get_unscaled_time()
    return self.unscale_delta_time
end

---计算帧间隔时间
---@private
function battle_controller:calculate_frame_interval()
    --local current = socket.gettime() * 1000
    --self.unscale_delta_time = current - self.elapse_time
    --self.elapse_time = current
    self.unscale_delta_time = Time.unscaledDeltaTime * 1000
end
--endregion

---更新
---@public
function battle_controller:on_update()
    -- delta time
    self:calculate_frame_interval()

    -- 运行中
    if self.is_running then
        -- world
        self.world:on_update()

        local unscale_delta_time = self.unscale_delta_time
        local delta_time = unscale_delta_time * self.time_scale

        -- render
        self.renderer:on_update(delta_time, unscale_delta_time)
        -- timer
        self.timer_ctrl:on_update(delta_time)
        self.timer_ctrl_unscale:on_update(unscale_delta_time)
    end

    -- 结束战斗时清理并退出
    if self.is_finished then
        self:on_exit_battlefield()
    end
end

---退出战场
---@private
function battle_controller:on_exit_battlefield()
    if not self.is_finished  then return end
    self.is_finished = nil
    
    -- 设置结束状态
    self:set_battle_step(battle_step_type.FINISHED)

    local database = self.database
    ---@type EBattleType 战斗类型
    local battle_type = database:get_battle_type() or EBattleType.BATTLE_TYPE_NONE
    ---@type boolean 是否胜利
    local is_victory = false
    local result_data = database:get_battle_result_data()
    if result_data ~= nil then
        is_victory = result_data.is_victory == 1
    end

    -- 清理战场数据
    local exit_type = self.exit_type
    local game_id = database:get_game_id()
    system_manager.battle:clear_battlefield()
    game_data_manager.battle_record:clear_continue_battle_reward()
    if ui_cache_data:get_cache_data(cache_keys.enter_battle_needed_data) then
        ui_cache_data:del_cache_data(cache_keys.enter_battle_needed_data)
    end
    if exit_type == 0 then
        game_scene_manager.go_back()
    else
        message.broadcast(enum.message_type.BATTLE_CUSTOM_EXIT_BATTLE_FLOW, exit_type, battle_type, is_victory, game_id)
    end
end

---销毁
---@private
function battle_controller:dispose()
    if helper.is_debug then
        local LogType = CS.UnityEngine.LogType
        local StackTraceLogType = CS.UnityEngine.StackTraceLogType
        cs.Application.SetStackTraceLogType(LogType.Log, StackTraceLogType.ScriptOnly)
    end
    
    self.is_running = nil
    self.is_finished = nil
    self.exit_type = nil

    self.renderer:clear()

    self.message:dispose()
    self.message = nil
    self.database:dispose()
    self.database = nil
    self.world:dispose()
    self.world = nil
    self.renderer:dispose()
    self.renderer = nil

    self.timer_ctrl:dispose()
    self.timer_ctrl = nil
    self.timer_ctrl_unscale:dispose()
    self.timer_ctrl_unscale = nil

    self.network = nil

    self.elapse_time = nil
    self.unscale_delta_time = nil
    self.time_scale = nil
    self.unit_complete_number = nil
end

return battle_controller