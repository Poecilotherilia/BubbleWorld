---
--- Generated by wuhaijun
--- File name : context.lua.txt
--- DateTime : 2021/03/30
--- Description : 
---     The Context is the factory where you create and destroy entities.
---

local helper = ecs_helper
local table_remove = table.remove

---@type stack
local stack = require 'framework/basic/stack'
---@type entity
local entity_class = require(helper.path .. 'entity')
---@type group
local group_class = require(helper.path.. 'group')
---@type group_event
local group_event = require(helper.path .. 'group_event')
---@type matchers
local matchers = require(helper.path .. 'matchers')
---@type collector
local collector_class = require(helper.path .. 'collector')
---@type entity_index_primary
local entity_index_primary = require(helper.path .. 'entity_index_primary')
---@type callback
local callback = require(helper.path .. 'callback')

---@class context
local context = { cname = 'context' } -- class("context")
context.__index = context

---new
---@public
---@return context
function context.new()
    ---@type context
    local instance = setmetatable({}, context)
    instance:ctor()
    return instance
end

---构造函数
---@protected
function context:ctor()
    ---实体的组件改变回调
    ---@private
    self.entity_added_comp_callback = function(...) self:on_entity_added_comp_handle(...) end
    ---@private
    self.entity_removed_comp_callback = function(...) self:on_entity_removed_comp_handle(...) end
    ---@private
    self.entity_replaced_comp_callback = function(...) self:on_entity_replaced_comp_handle(...) end  
    ---@private
    self.entity_add_listener_callback = function(...) self:on_entity_add_listener_handle(...) end   
    ---@private
    self.entity_remove_listener_callback = function(...) self:on_entity_remove_listener_handle(...) end

    ---entity存储字典
    ---@private
    ---@type table<number, entity>
    self.entity_dict = {}
    ---@private
    ---@type entity[]
    self.entity_list = {}
    ---@private
    ---entity数量
    self.entity_size = 0
    ---@private
    ---eid计数器
    self.eid_counter = 100
    ---entity池
    ---@private
    ---@type stack
    self.entity_cache_stack = stack.new()

    ---实体索引存储字典
    ---@private
    ---@type table<component_type, entity_index>
    self.entity_index_dict = {}

    ---group存储字典
    ---@private
    ---@type table<matcher, group>
    self.group_dict = {}
    ---@private
    ---@type group[]
    self.group_list = {}

    ---收集器缓存
    ---@private
    ---@type stack
    self.collector_cache_stack = stack.new()

    ---监听器的collector字典
    ---@private
    ---@type table<component, collector>
    self.listener_collector_dict = {}
    ---监听器的callback字典
    ---@private
    ---@type table<component, table<number, callback>>
    self.listener_callback_dict = {}
    ---监听的组件类型列表
    ---@private
    ---@type component[]
    self.listener_comp_type_list = {}

    ---是否激活状态
    ---@private
    ---@type boolean
    self.is_actived = true
end

---是否是激活状态
---@public
---@return boolean
function context:is_active()
    return self.is_actived == true
end

--region Entity Index
---创建主键实体索引
---@public
---@param comp_type component_type
---@vararg string 字段
---@return entity_index_primary
function context:create_primary_entity_index(comp_type, ...)
    local group = self:get_group(matchers.all(comp_type))
    local primary_index = entity_index_primary.new(comp_type, group, ...)
    self:add_entity_index(primary_index)

    return primary_index
end

---获取实体根据主键实体索引
---@public
---@param comp_type component_type
---@vararg any 字段值
---@return entity
function context:get_entity_by_primary_index(comp_type, ...)
    ---@type entity_index_primary
    local primary_index = self:get_entity_index(comp_type)
    return primary_index:get_entity(...)
end

---添加实体索引
---@public
---@param index entity_index
function context:add_entity_index(index)
    helper.assert(index, "Invalid entity index")

    local type = index.comp_type
    if self.entity_index_dict[type] ~= nil then
        helper.error("entity index already exists, cname = ", type.cname)
    end
    self.entity_index_dict[type] = index
end

---获取实体索引
---@public
---@param comp_type component_type
---@return entity_index
function context:get_entity_index(comp_type)
    helper.assert(comp_type ~= nil, "Invalid component type")

    return self.entity_index_dict[comp_type]
end
--endregion

--region Unique Component
---设置唯一组件
---@public
---@param comp_type component_type
---@vararg any
---@return entity
function context:set_unique_component(comp_type, ...)
    helper.assert(comp_type ~= nil, "Invalid component type")

    local entity = self:create_entity()
    entity:add_component(comp_type, ...)
    
    return entity
end

---获取唯一的组件
---@public
---@param comp_type component_type
---@vararg any
---@return entity, component
function context:get_unique_component(comp_type)
    helper.assert(comp_type ~= nil, "Invalid component type")

    local group = self:get_group(matchers.all(comp_type))
    local entity = group:single_entity()
    return entity, entity:get_component(comp_type)
end
--endregion

--region Group
---获取组
---@public
---@param matcher matcher
---@return group
function context:get_group(matcher)
    helper.assert(matcher ~= nil, "Invalid matcher")
  
    local group = self.group_dict[matcher]
    if group == nil then
        group = group_class.new(matcher)

        for i = 1, self.entity_size do
            group:entity_added_or_removed_handle_silently(self.entity_list[i], true)
        end

        self.group_dict[matcher] = group
        self.group_list[#self.group_list + 1] = group
    end

    return group
end
--endregion

--region Collector
---获取收集器
---@public
---@param matcher matcher
---@return collector
function context:get_collector(matcher, event)
    local group = self:get_group(matcher)
    event = event or (group_event.ADDED | group_event.UPDATE)

    ---@type collector
    local collector = self.collector_cache_stack:pop()
    if collector == nil then
        collector = collector_class.new()
    end
    collector:add(group, event)

    return collector
end

---销毁收集器
---@public
---@param collector collector
function context:destroy_collector(collector)
    if collector == nil then return end
    
    collector:clear()
    self.collector_cache_stack:push(collector)
end
--endregion

--region Entity
---检测是否包含实体
---@public
---@param eid number
---@return boolean
function context:has_entity_eid(eid)
    return self.entity_dict[eid] ~= nil
end

---检测是否包含实体
---@public
---@param entity entity
function context:has_entity(entity)
    return self:has_entity_eid(entity.eid)
end

---创建实体
---@public
---@return entity
function context:create_entity()
    ---@type entity
    local entity = self.entity_cache_stack:pop()
    if entity == nil then
        entity = entity_class.new()
        entity:set_added_callback(self.entity_added_comp_callback)
        entity:set_removed_callback(self.entity_removed_comp_callback)
        entity:set_replaced_callback(self.entity_replaced_comp_callback)
        entity:set_add_listener_callback(self.entity_add_listener_callback)
        entity:set_remove_listener_callback(self.entity_remove_listener_callback)
    end
    
    self.entity_dict[self.eid_counter] = entity
    
    local index = self.entity_size + 1
    self.entity_list[index] = entity
    self.entity_size = index
    
    entity:initialize(self.eid_counter)
    self.eid_counter = self.eid_counter + 1
    
    return entity
end

---销毁实体
---@public
---@param entity entity
function context:destroy_entity(entity)
    if not self:has_entity(entity) then
        helper.error("The context does not contain this entity.eid = ", entity.eid)
    end

    self.entity_dict[entity.eid] = nil
    local tmp_list = self.entity_list
    for i = 1, #tmp_list do
        if tmp_list[i].eid == entity.eid then
            table_remove(tmp_list, i)
            break
        end
    end
    
    entity:clear()
    self.entity_cache_stack.push(entity)
    self.entity_size = self.entity_size - 1
end

---实体数量
---@public
---@return number
function context:entity_count()
    return self.entity_size
end
--endregion

--region 监听器
---获取监听的组件列表
---@public
---@return component[]
function context:get_listener_list()
    return self.listener_comp_type_list
end

---获取监听器和回调
---@public
---@param comp_type component
---@return collector, table<number, callback>
function context:get_listener(comp_type)
    return self.listener_collector_dict[comp_type], self.listener_callback_dict[comp_type]
end
--endregion

--region Callback Handle
---实体添加组件后回调处理
---@private
function context:on_entity_added_comp_handle(entity, component)
    for i = 1, #self.group_list do
        local group = self.group_list[i]
        if group.matcher:match_one(component) then
            group:entity_added_or_removed_handle(entity, component, true)
        end
    end
end

---实体移除组件后回调处理
---@private
function context:on_entity_removed_comp_handle(entity, component)
    for i = 1, #self.group_list do
        local group = self.group_list[i]
        if group.matcher:match_one(component) then
            group:entity_added_or_removed_handle(entity, component, false)
        end
    end
end

---实体替换组件后回调处理
---@private
---@param entity entity
---@param component component
function context:on_entity_replaced_comp_handle(entity, component)
    for i = 1, #self.group_list do
        local group = self.group_list[i]
        if group.matcher:match_one(component) then
            group:entity_updated_handle(entity, component)
        end
    end
end

---实体添加监听器处理
---@private
---@param eid number
---@param comp_type component
---@param action fun(e:entity, ...)
---@param instance table
function context:on_entity_add_listener_handle(eid, comp_type, action, instance)
    -- 生成监听器
    local collector_dict = self.listener_collector_dict
    if collector_dict[comp_type] == nil then
        collector_dict[comp_type] = self:get_collector(matchers.all(comp_type))
        self.listener_comp_type_list[#self.listener_comp_type_list + 1] = comp_type
    end

    -- 添加监听回调
    local callback_dict = self.listener_callback_dict
    local data = callback_dict[comp_type]
    if data == nil then
        callback_dict[comp_type] = { [eid] = callback.new(action, instance) }
    else
        ---@type callback
        local cb = data[eid]
        if cb == nil then
            data[eid] = callback.new(action, instance)
        else
            if not cb:add(action, instance) then
                helper.error("Why add listener callback repeatedly? comp_type = ", comp_type.cname, ", action = ", action)
            end
        end
    end
end

---实体移除监听器处理
---@private
---@param eid number
---@param comp_type component
---@param action fun(e:entity, ...)
function context:on_entity_remove_listener_handle(eid, comp_type, action)
    local collector_dict = self.listener_collector_dict
    local callback_dict = self.listener_callback_dict
    
    local collector = collector_dict[comp_type]
    local callback_data = callback_dict[comp_type]
    
    if collector == nil or callback_data == nil then
        -- helper.error('The listener to be removed does not exist, comp_type = ', comp_type.cname)
        return
    end

    local listener = callback_data[eid]
    if listener == nil then
        -- helper.error('The listener to be removed does not exist, comp_type = ', comp_type.cname, ', eid = ', eid)
        return
    end

    -- 销毁监听回调
    listener:remove(action)
    if listener:count() <= 0 then
        listener:dispose()
        callback_data[eid] = nil
    end

    -- 销毁收集器
    local data_count = 0
    for _, _ in pairs(callback_data) do
        data_count = data_count + 1
    end
    if data_count == 0 then
        self:destroy_collector(collector)

        collector_dict[comp_type] = nil
        callback_dict[comp_type] = nil

        local comp_type_list = self.listener_comp_type_list
        for i = 1, #comp_type_list do
            if comp_type_list[i].check_same_type(comp_type) then
                table_remove(comp_type_list, i)
                break
            end
        end
    end
end
--endregion

---清理
---@public
function context:clear()
    local table_clear = helper.clear

    -- 清理实体
    for i = 1, self.entity_size do
        self:destroy_entity(self.entity_list[i])
    end
    table_clear(self.entity_list)
    table_clear(self.entity_dict)
    self.entity_size = 0
    self.eid_counter = 100
    
    -- 清理实体索引
    for _, index in pairs(self.entity_index_dict) do
        index:dispose()
    end
    table_clear(self.entity_index_dict)

    -- 清理监听器
    local callback_dict = self.listener_callback_dict
    for i = 1, #self.listener_comp_type_list do
        local comp_type = self.listener_comp_type_list[i]
        if comp_type ~= nil then
            self:destroy_collector(self.listener_collector_dict[comp_type])
            self.listener_collector_dict[comp_type] = nil

            local eid_dict = callback_dict[comp_type]
            for _, cb in pairs(eid_dict) do
                cb:dispose()
            end
            callback_dict[comp_type] = nil
        end
    end
    table_clear(self.listener_comp_type_list)
    
    -- 清理组
    for i = 1, #self.group_list do
        self.group_list[i]:clear()
    end
    table_clear(self.group_list)
    table_clear(self.group_dict)
end

---销毁
---@public
function context:dispose()
    self.is_actived = nil
    
    -- 销毁实体
    for i = 1, self.entity_size do
        local tmp_entity = self.entity_list[i]
        if tmp_entity ~= nil then
            self:destroy_entity(tmp_entity)
        end
    end
    self.entity_dict = nil
    self.entity_list = nil
    self.entity_size = nil
    self.eid_counter = nil
    
    -- 销毁实体索引
    for _, index in pairs(self.entity_index_dict) do
        index:dispose()
    end
    self.entity_index_dict = nil

    -- 销毁监听器
    for i = 1, #self.listener_comp_type_list do
        local comp_type = self.listener_comp_type_list[i]
        if comp_type ~= nil then
            self:destroy_collector(self.listener_collector_dict[comp_type])
            self.listener_collector_dict[comp_type] = nil

            for _, cb in pairs(self.listener_callback_dict[comp_type]) do
                cb:dispose()
            end
            self.listener_callback_dict[comp_type] = nil
        end
    end
    self.listener_collector_dict = nil
    self.listener_callback_dict = nil
    self.listener_comp_type_list = nil
    
    -- 销毁组
    for i = 1, #self.group_list do
        self.group_list[i]:dispose()
    end
    self.group_list = nil
    self.group_dict = nil

    -- 销毁收集器缓存池
    self.collector_cache_stack:foreach(function(item) item:dispose() end)
    self.collector_cache_stack:dispose()
    self.collector_cache_stack = nil
    
    -- 销毁实体缓存池
    self.entity_cache_stack:foreach(function(item) item:dispose() end)
    self.entity_cache_stack:dispose()
    self.entity_cache_stack = nil

    -- 销毁回调
    self.entity_added_comp_callback = nil
    self.entity_removed_comp_callback = nil
    self.entity_replaced_comp_callback = nil
end

return context