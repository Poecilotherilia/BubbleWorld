---
--- Generated by wuhaijun
--- File name : group.lua.txt
--- DateTime : 2021/03/30
--- Description : 
---     Use context.GetGroup(matcher) to get a group of entities which match
---     the specified matcher. Calling context.GetGroup(matcher) with the
---     same matcher will always return the same instance of the group.
---     The created group is managed by the context and will always be up to date.
---     It will automatically add entities that match the matcher or
---     remove entities as soon as they don't match the matcher anymore.
---

local helper = ecs_helper
local table_remove = table.remove
local table_clear = helper.clear

---@type callback
local callback = require(helper.path .. 'callback')
---@type component_type
local component_type = require(helper.path .. 'component_type')

---@class group
local group = class("group")
group.__tostring = function(t) return "<Group [{" .. t.matcher:__tostring() .. "}]>" end

---构造函数
---@protected
---@param matcher matcher
function group:ctor(matcher)
    ---@private
    ---@type table<number, entity>
    self.entity_dict = {}
    ---@private
    ---@type entity[]
    self.entity_list = {}
    ---@private
    ---@type number
    self.entity_size = 0

    ---匹配器
    ---@private
    ---@type matcher
    self.matcher = matcher

    -- event callback
    ---@private
    ---@type callback
    self.entity_added_callback = callback.new()
    ---@private
    ---@type callback
    self.entity_updated_callback = callback.new()
    ---@private
    ---@type callback
    self.entity_removed_callback = callback.new()
end

---获取单例实体
---@public
---@return entity
function group:single_entity()
    local count = self:entity_count()
    helper.assert(count == 1, "Cannot get a single entity from the group, count = ", count)
    
    return self.entity_list[1]
end

---获取索取所有实体
---@public
---@type entity[]
---@return entity[], number
function group:get_entity_list(buff_list)
    table_clear(self.buff_list)
    
    local count = self:entity_count()
    for i = 1, count do
        buff_list[i] = self.entity_list[i]
    end

    return buff_list, count
end

---数量
---@public
---@return number
function group:entity_count()
    return self.entity_size
end

---实体添加或移除后处理
---@public
---@param entity entity
---@param component component
---@param is_add boolean
function group:entity_added_or_removed_handle(entity, component, is_add)
    helper.assert(entity ~= nil, "Invalid entity, is_add = ", is_add)

    if not self.matcher:match_entity(entity) then return end

    if is_add then
        self:add_entity(entity, component)
    else
        self:remove_entity(entity, component)
    end
end

---实体添加或移除后静默处理
---@public
---@param entity entity
---@param is_add boolean
function group:entity_added_or_removed_handle_silently(entity, is_add)
    helper.assert(entity ~= nil, "Invalid entity, is_add = ", is_add)
    
    if not self.matcher:match_entity(entity) then return end

    if is_add then
        self:add_entity_silently(entity)
    else
        self:remove_entity_silently(entity)
    end
end

---实体更新后处理
---@private
---@param entity entity
---@param component component
function group:entity_updated_handle(entity, component)
    helper.assert(entity ~= nil, "Invalid entity")

    if not self.matcher:match_entity(entity) then return end

    self:update_entity(entity, component)
end

--region Callback Handler
---是否存在添加回调
---@public
---@param action function
---@return boolean
function group:has_added_callback(action)
    return self.entity_added_callback:contains(action)
end

---是否存在更新回调
---@public
---@param action function
---@return boolean
function group:has_updated_callback(action)
    return self.entity_updated_callback:contains(action)
end

---是否存在移除回调
---@public
---@param action function
---@return boolean
function group:has_removed_callback(action)
    return self.entity_removed_callback:contains(action)
end

---设置添加回调
---@public
---@param action function
---@param is_add boolean
---@param instance table
function group:set_added_callback(action, is_add, instance)
    if is_add then
        self.entity_added_callback:add(action, instance)
    else
        self.entity_added_callback:remove(action)
    end
end

---设置更新回调
---@public
---@param action function
---@param is_add boolean
---@param instance table
function group:set_updated_callback(action, is_add, instance)
    if is_add then
        self.entity_updated_callback:add(action, instance)
    else
        self.entity_updated_callback:remove(action)
    end
end

---设置移除回调
---@public
---@param action function
---@param is_add boolean
---@param instance table
function group:set_removed_callback(action, is_add, instance)
    if is_add then
        self.entity_removed_callback:add(action, instance)
    else
        self.entity_removed_callback:remove(action)
    end
end
--endregion

--region entity handle
---添加实体
---@private
---@param entity entity
---@param component component
function group:add_entity(entity, component)
    if self:add_entity_silently(entity) then
        self.entity_added_callback(entity, component)
    else
        helper.error('entity to be added already exists, eid = ', entity.eid, ', component = ', component.cname)
    end
end

---实体更新处理
---@private
---@param entity entity
---@param component component
function group:update_entity(entity, component)
    if self.entity_dict[entity.eid] ~= nil then
        self.entity_updated_callback(entity, component)
    else
        helper.error('entity to be updated does not exist, eid = ', entity.eid, ', component = ', component.cname)
    end
end

---移除实体
---@private
---@param entity entity
---@param component component
function group:remove_entity(entity, component)
    if self:remove_entity_silently(entity) then
        self.entity_removed_callback(entity, component)
    else
        helper.error('entity to be removed does not exist, eid = ', entity.eid, ', component = ', component.cname)
    end
end

---静默添加实体
---@private
---@param entity entity
---@return boolean
function group:add_entity_silently(entity)
    if self.entity_dict[entity.eid] == nil then
        self.entity_dict[entity.eid] = entity
        local count = self.entity_size + 1
        self.entity_list[count] = entity
        self.entity_size = count
        return true
    end
    return false
end

---静默移除实体
---@private
---@param entity entity
---@return boolean
function group:remove_entity_silently(entity)
    local eid = entity.eid
    if self.entity_dict[eid] ~= nil then
        self.entity_dict[eid] = nil
        for i = 1, self.entity_size do
            if self.entity_list[i].eid == eid then
                table_remove(self.entity_list, i)
                self.entity_size = self.entity_size - 1
                break
            end
        end
        return true
    end
    return false
end
--endregion

---清理
---@public
function group:clear()
    self.entity_updated_callback:clear()
    self.entity_removed_callback:clear()
    self.entity_added_callback:clear()
    
    table_clear(self.entity_dict)
    table_clear(self.entity_list)
    self.entity_size = 0
end

---销毁
---@public
function group:dispose()
    self:clear()

    self.entity_updated_callback:dispose()
    self.entity_updated_callback = nil

    self.entity_removed_callback:dispose()
    self.entity_removed_callback = nil

    self.entity_added_callback:dispose()
    self.entity_added_callback = nil
    
    self.matcher:dispose()
    self.matcher = nil

    self.entity_size = nil
    self.entity_list = nil
    self.entity_dict = nil
end

return group