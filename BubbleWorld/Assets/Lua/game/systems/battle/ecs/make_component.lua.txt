---
--- Generated by wuhaijun
--- File name : component.lua.txt
--- DateTime : 2021/03/30
--- Description : 
---      the raw data for one aspect of the object, and how it interacts with the world.
---      "Labels the Entity as possessing this particular aspect". 
---      Implementations typically use structs, classes, or associative arrays.
---

local helper = ecs_helper
local rawset = rawset
local rawget = rawget
local select = select
local setmetatable = setmetatable
local table_unpack = table.unpack

---@type stack
local stack = require 'framework/basic/stack'
local tmp_data = {}

--region function
---@see component#__tostring
---to string
local function on_to_string(t)
    local keys = t._keys
    local s = ''
    for i = 1, #keys do
        if #s > 0 then
            s = s .. ', '
        end
        
        local key = keys[i]
        s = s .. key.. '=' .. tostring(rawget(t, key))
    end
    return '[' .. t.cname .. '(' .. s .. ')]'
end

---替换数据
---@see component#replace_handle
---@param comp component
---@param cur component
local function on_check_same(comp, cur)
    -- helper.assert(comp.cname ~= nil, 'must be a component, comp = ', comp)
    return comp.cname == cur.cname
end

---替换数据
---@see component#replace_handle
---@param t component
local function on_replace(t, ...)
    local has_data = ... ~= nil
    local keys = t._keys
    for i = 1, #keys do
        if has_data then
            local value = select(i, ...)
            rawset(t, keys[i], value)
        else
            rawset(t, keys[i], nil)
        end
    end
end

---实例化目标类型的组件
---@see component#new
---@param comp_type component
---@return component
local function on_new(comp_type, ...)
    local component = comp_type._cache_pool:pop()
    if component == nil then
        component = setmetatable({}, comp_type)
    end
    on_replace(component, ...)
    return component
end

---清理该组件实例
---@see component#get_all_data
---@param t component
local function on_get_all_data(t)
    helper.clear(tmp_data)
    local keys = t._keys
    for i = 1, #keys do
        tmp_data[i] = rawget(t, keys[i])
    end
    return table_unpack(tmp_data)
end

---清理该组件实例
---@see component#clear
---@param t component
local function on_clear(t)
    on_replace(t)
    t._cache_pool:push(t)
end

---销毁该类型的组件
---@see component#dispose
---@param t component
local function on_dispose(t)
    local keys = t._keys
    for i = 1, #keys do
        local k = keys[i]
        local data = rawget(t, k)
        if data ~= nil and data.dispose ~= nil then
            data:dispose()
        end
        rawset(t, k, nil)
    end
    
    t.new = nil
    t.clear = nil
    t.check_same_type = nil
    t.replace_handle = nil
    t.__tostring = nil

    t._cache_pool:dispose()
    t._cache_pool = nil
    t._keys = nil
    t.cname = nil
end
--endregion

---创建组件
---@param name string 组件名字
---@vararg string 字段名
local function create(name, ...)
    ---@class component
    local comp_type = 
    {
        cname = name, -- Component Name
        ---@private
        _keys = { ... }, -- 字段key
        ---@private
        _cache_pool = stack.new(),
        
        replace_handle = on_replace,
    }
    ---@private
    comp_type.__index = comp_type
    ---@private
    comp_type.__tostring = on_to_string
    
    ---实例化目标类型的组件 
    comp_type.new = function(...) return on_new(comp_type, ...) end
    ---检测是否与该组件为同一个类型
    comp_type.check_same_type = function(t) return on_check_same(t, comp_type) end
    ---获取该组件所有数据 
    comp_type.get_all_data = function(...) return on_get_all_data(...) end
    ---清理该组件实例
    comp_type.clear = function(t) return on_clear(t) end
    ---销毁该类型的组件
    comp_type.dispose = function(t) return on_dispose(t) end

    return comp_type
end

return create