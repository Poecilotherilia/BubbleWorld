---
--- Generated by wuhaijun
--- File name : entity_index.lua.txt
--- DateTime : 2021/03/31
--- Description : 
---     The interface for accessing keys and entities via a primary or secondary index.
---

local helper = ecs_helper
local table_clear = helper.clear

---@class entity_index
local entity_index = class("entity_index")

---构造函数
---@protected
---@param comp_type component_type
---@param group group
---@vararg string 字段名
function entity_index:ctor(comp_type, group, ...)
    self.entity_added_callback = function(...) return self:on_entity_added_handle(...) end
    self.entity_update_callback = function(...) return self:on_entity_update_handle(...) end
    self.entity_removed_callback = function(...) return self:on_entity_removed_handle(...) end
    
    self.comp_type = comp_type
    self.group = group
    self.field_list = { ... }
    
    ---@type entity[]
    ---@private
    self.buff_list = {}

    ---当前实体字典
    ---@protected
    ---@type entity[]
    self.entity_list = {}
    
    -- 激活
    self:activate()
end

---激活
---@public
function entity_index:activate()
    self.group:set_added_callback(self.entity_added_callback, true)
    self.group:set_removed_callback(self.entity_removed_callback, true)
    self.group:set_updated_callback(self.entity_update_callback, true)
    
    self:init_entity_list()
end

---停止
---@public
function entity_index:deactivate()
    self.group:set_added_callback(self.entity_added_callback, false)
    self.group:set_removed_callback(self.entity_removed_callback, false)
    self.group:set_updated_callback(self.entity_update_callback, false)
    
    self:clear()
end

---初始化时处理已存在的实体
---@private
function entity_index:init_entity_list()
    local list, _ = self.group:get_entity_list(self.buff_list)
    
    for _, entity in ipairs(list) do
        local comp = entity:get_component(self.comp_type)
        self:add_entity(comp, entity)
    end
end

---实体添加组件处理
---@private
---@param entity entity
---@param comp component
function entity_index:on_entity_added_handle(entity, comp)
    if not comp.check_same_type(self.comp_type) then return end

    self:add_entity(comp, entity)
end

---实体更新组件处理
---@private
---@param entity entity
---@param comp component
function entity_index:on_entity_update_handle(entity, comp)
    if not comp.check_same_type(self.comp_type) then return end

    self:update_entity(comp, entity)
end

---实体移除组件处理
---@private
---@param entity entity
---@param comp component
function entity_index:on_entity_removed_handle(entity, comp)
    if not comp.check_same_type(self.comp_type) then return end

    self:remove_entity(comp, entity)
end

---添加实体
---@protected
---@param comp component
---@param entity entity
function entity_index:add_entity(comp, entity) 
    helper.error(self.cname, " 'add_entity' not implemented, comp.name = ", comp.cname, ", eid = ", entity.eid)
end

---添加实体
---@protected
---@param comp component
---@param entity entity
function entity_index:update_entity(comp, entity)
    helper.error(self.cname, " 'add_entity' not implemented, comp.name = ", comp.cname, ", eid = ", entity.eid)
end

---移除实体
---@protected
---@param comp component
---@param entity entity
function entity_index:remove_entity(comp, entity)
    helper.error(self.cname," 'remove_entity' not implemented, comp.name = ", comp.cname, ", eid = ", entity.eid)
end
---清理
---@public
function entity_index:clear()
    table_clear(self.entity_list)
end

---销毁
---@public
function entity_index:dispose()
    self:deactivate()

    self.entity_list = nil

    self.field_list = nil
    self.group = nil
    self.comp_type = nil

    self.entity_update_callback = nil
    self.entity_removed_callback = nil
    self.entity_added_callback = nil
end

return entity_index