---
--- Generated by wuhaijun
--- File name : collector.lua.txt
--- DateTime : 2021/03/31
--- Description : 
---         A Collector can observe one or more groups from the same context
---         and collects changed entities based on the specified GroupEvent.
---

local helper = ecs_helper

---@type group_event
local group_event = require(helper.path .. 'group_event')

---@class collector
local collector = class("collector")

---构造函数
---@protected
function collector:ctor()
    -- event
    ---@private
    self.set_entity_callback = function(e) return self:on_set_entity(e) end

    ---组的存储字典
    ---@private
    ---@type table<group, group_event>
    self.group_dict = {}
    
    -- 实体容器
    ---@private
    ---@type table<number, entity>
    self.entity_dict = {}
    ---@private
    ---@type entity[]
    self.entity_list = {}
    ---@private
    ---@type number
    self.entity_count = 0
end

---添加收集器
---@public
---@param group group
---@param event group_event
function collector:add(group, event)
    if group == nil then return end
    
    if self.group_dict[group] == event then
        helper.error("Why repeatedly add the group, group = ", group:__tostring(), ", event = ", event)
    end

    self.group_dict[group] = event
    self:on_activate_handle(group, event)
end

---激活收集器
---@public
function collector:activate()
    for group, event in pairs(self.group_dict) do
        self:on_activate_handle(group, event)
    end
end

---激活收集器并开始收集当实体改变时
---@private
---@param group group
---@param event group_event
function collector:on_activate_handle(group, event)
    if 0 ~= (event & group_event.ADDED) and not group:has_added_callback(self.set_entity_callback) then
        group:set_added_callback(self.set_entity_callback, true)
    end

    if 0 ~= (event & group_event.UPDATE) and not group:has_updated_callback(self.set_entity_callback) then
        group:set_updated_callback(self.set_entity_callback, true)
    end

    if 0 ~= (event & group_event.REMOVED) and not group:has_removed_callback(self.set_entity_callback) then
        group:set_removed_callback(self.set_entity_callback, true)
    end
end

---停止收集并清理已收集的实体
---@public
function collector:deactivate()
    for group, _ in pairs(self.group_dict) do
        group:set_added_callback(self.set_entity_callback, false)
        group:set_updated_callback(self.set_entity_callback, false)
        group:set_removed_callback(self.set_entity_callback, false)
    end

    self:clear_entity()
end

---获取已收集的实体
---@public
---@param buff_list entity[]
---@return entity[], number
function collector:get_entity_list(buff_list)
    helper.clear_array(buff_list)
    
    local count = self.entity_count
    for i = 1, count do
        buff_list[i] = self.entity_list[i]
    end

    return buff_list, count
end

---获取已收集的实体根据过滤方法
---@public
---@param buff_list entity[]
---@param filter_func function
---@return entity[], number
function collector:get_entity_list_by_filter(buff_list, filter_func)
    helper.clear_array(buff_list)
    
    local count = 0
    for i = 1, self.entity_count do
        local entity = self.entity_list[i]
        
        if filter_func(entity) then
            count = count + 1
            buff_list[count] = entity
        end
    end

    return buff_list, count
end

---清理已收集的实体
---@public
function collector:clear_entity()
    helper.clear(self.entity_dict)
    helper.clear_array(self.entity_list)
    self.entity_count = 0
end

---有实体存在吗
---@public
---@return boolean
function collector:has_entity()
    return self.entity_count > 0
end

---设置实体到容器中
---@private
---@param entity entity
function collector:on_set_entity(entity)
    if self.entity_dict[entity.eid] ~= nil then return end

    self.entity_dict[entity.eid] = entity
    local count = self.entity_count + 1
    self.entity_list[count] = entity
    self.entity_count = count
end

---清理
---@public
function collector:clear()
    self:deactivate()

    helper.clear(self.group_dict)
end

---销毁
---@public
function collector:dispose()
    self:deactivate()
    self.group_dict = nil
    
    self.entity_dict = nil
    self.entity_list = nil
    self.entity_count = nil
    
    self.set_entity_callback = nil
end

return collector