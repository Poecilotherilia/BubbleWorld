---
--- Generated by wuhaijun
--- File name : systems.lua.txt
--- DateTime : 2021/03/31
--- Description : 
---     Each System runs continuously (as though each System had its own private thread) 
---     and performs global actions on every Entity that possesses a Component of the same aspect as that System.
---
---     Systems provide a convenient way to group systems.
---     You can add :
---         initialize
---         execute
---         cleanup
---         tear_down
---     and other nested Systems instances.
---     All systems will be initialized and executed based on the order
---     you added them.
---

local helper = ecs_helper

---@class systems
local systems = class("systems")

---构造函数
---@protected
function systems:ctor(context)
    ---@private
    ---@type table<table, boolean>
    self.system_dict = {}

    ---@private
    ---@type function[]
    self.initialize_systems = {}
    ---@private
    ---@type function[]
    self.execute_systems = {}
    ---@private
    ---@type function[]
    self.cleanup_systems = {}
    ---@private
    ---@type function[]
    self.tear_down_systems = {}

    self:add_system(context)
    self:add_render_system(context)
end

---添加系统
---@protected
function systems:add_system(_)
end

---添加渲染层System
---@protected
function systems:add_render_system(_)
end

---添加System
---@protected
function systems:add(system)
    if not self.system_dict[system] then
        self.system_dict[system] = true
    else
        helper.error('Add system repeatedly, name = ', system.cname)
        return
    end

    if system.initialize ~= nil then
        self.initialize_systems[#self.initialize_systems + 1] = system
    end

    if system.execute ~= nil then
        self.execute_systems[#self.execute_systems + 1] = system
    end

    if system.cleanup ~= nil then
        self.cleanup_systems[#self.cleanup_systems + 1] = system
    end

    if system.tear_down ~= nil then
        self.tear_down_systems[#self.tear_down_systems + 1] = system
    end
end

--region life cycle
---初始化
---@public
function systems:initialize()
    for i = 1, #self.initialize_systems do
        self.initialize_systems[i]:initialize()
    end
end

---执行(每帧)
---@public
function systems:execute()
    for i = 1, #self.execute_systems do
        self.execute_systems[i]:execute()
    end
end

---清理(每帧)
---@public
function systems:cleanup()
    for i = 1, #self.cleanup_systems do
        self.cleanup_systems[i]:cleanup()
    end
end

---卸载
---@public
function systems:tear_down()
    for i = 1, #self.tear_down_systems do
        self.tear_down_systems[i]:tear_down()
    end

    helper.clear_array(self.initialize_systems)
    helper.clear_array(self.execute_systems)
    helper.clear_array(self.cleanup_systems)
    helper.clear_array(self.tear_down_systems)
    self.initialize_systems = nil
    self.execute_systems = nil
    self.cleanup_systems = nil
    self.tear_down_systems = nil
    
    helper.clear(self.system_dict)
    self.system_dict = nil
end
--endregion

return systems