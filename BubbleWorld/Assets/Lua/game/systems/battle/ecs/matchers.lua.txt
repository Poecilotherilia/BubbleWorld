---
--- Generated by wuhaijun
--- File name : matcher.lua.txt
--- DateTime : 2021/03/30
--- Description : 
---     A matcher is a way to describe what kind of entitas we are interested in.
---     They can be used to create Group and Collector
--      Which in turn can be used as Filters in Systems for example
---

local helper = ecs_helper
local table_clear = helper.clear
local table_concat = table.concat
local is_empty = string.is_nil_or_empty
---@type string[]
local temp_table_str = {}

--region 匹配器实现
---获取组件列表字符串
local function string_components(components)
    if not components then return '' end

    local str = ''
    for i = 1, #components do
        if #str > 0 then
            str = str .. ', '
        end

        if components[i] ~= nil then
            str = str .. components[i].cname
        end
    end
   
    return str
end

---@class matcher
local matcher = class("matcher")

matcher.__tostring = function(t)
    local all = string_components(t.all)
    local any = string_components(t.any)
    local none = string_components(t.none)

    if not is_empty(all) then
        all = "all=(" .. all .. ") " 
    end
    if not is_empty(any) then
        any = "any=(" .. any .. ") "
    end
    if not is_empty(none) then
        none = "none=(" .. none .. ") "
    end
    
    return "<Matcher [ " .. all .. any .. none .. " ]>"
end

---初始化
---@protected
---@param all_tb component[]
---@param any_tb component[]
---@param none_tb component[]
function matcher:ctor(all_tb, any_tb, none_tb)
    helper.assert(all_tb ~= nil or any_tb ~= nil or none_tb ~= nil, "matcher ctor, invalid parameter")
    
    self.all = all_tb
    self.any = any_tb
    self.none =  none_tb
end

---比较实体
---@public
---@param entity entity
---@return boolean
function matcher:match_entity(entity)
    local all_cond = not self.all or self:has_all(entity)
    local any_cond = not self.any or self:has_any(entity)
    local non_cond = not self.none or self:has_none(entity)
    
    return all_cond and any_cond and non_cond
end

---比较一个组件
---@public
---@param component component
---@return boolean
function matcher:match_one(component)
    local all_cond = not self.all or self:components_has_target(self.all, component)
    local any_cond = not self.any or self:components_has_target(self.any, component)
    local none_cond = not self.none or not self:components_has_target(self.none, component)

    -- helper.log(all_cond,any_cond,none_cond)
    return all_cond and any_cond and none_cond
end

---是否全部包含
---@public
---@param entity entity
function matcher:has_all(entity)
    for i = 1, #self.all do
        if not entity:has_component(self.all[i]) then
            return false
        end
    end

    return true
end

---是否部分包含
---@public
---@param entity entity
function matcher:has_any(entity)
    for i = 1, #self.any do
        if entity:has_component(self.any[i]) then
            return true
        end
    end

    return false
end

---是否不包含
---@public
---@param entity entity
function matcher:has_none(entity)
    for i = 1, #self.none do
        if entity:has_component(self.none[i]) then
            return false
        end
    end

    return true
end

---列表中是否包含target
---@private
---@param comp_list component[]
---@param target component
function matcher:components_has_target(comp_list, target)
    for i = 1, #comp_list do
        if comp_list[i].check_same_type(target) then
            return true
        end
    end

    return false
end

---销毁
---@public
function matcher:dispose()
    self.all = nil
    self.any = nil
    self.none = nil
end
--endregion

--region 管理匹配器
---根据组件列表生成唯一标识
---@vararg component
---@return string
local function string_components_ex(...)
    helper.assert(... ~= nil, 'matchers invalid parameter')

    table_clear(temp_table_str)
    local count = 0
    
    for i = 1, select('#', ...) do
        if i > 1 then
            count = count + 1
            temp_table_str[count] = ','
        end

        ---@type component
        local comp = select(i, ...)
        if comp ~= nil then
            count = count + 1
            temp_table_str[count] = comp.cname
        end
    end
    
    return table_concat(temp_table_str)
end

---@class matchers
local matchers = 
{
    ---@private
    ---@type number
    cache_size = 0,
    ---@private
    ---@type table<string, matcher>
    cache_dict = {},
}

---获取匹配器-全部匹配
---@vararg component
---@return matcher
function matchers.all(...)
    local key = string_components_ex(...)
    local result = matchers.cache_dict[key]

    if result == nil then
        result = matcher.new({ ... })
        matchers.cache_size = matchers.cache_size + 1
        matchers.cache_dict[matchers.cache_size] = result
    end

    return result
end

---获取匹配器-部分匹配
---@vararg component
---@return matcher
function matchers.any(...)
    local key = string_components_ex(...)
    local result = matchers.cache_dict[key]

    if result == nil then
        result = matcher.new(nil, { ... })
        matchers.cache_size = matchers.cache_size + 1
        matchers.cache_dict[matchers.cache_size] = result
    end

    return result
end

---获取匹配器-全部不匹配
---@vararg component
---@return matcher
function matchers.none(...)
    local key = string_components_ex(...)
    local result = matchers.cache_dict[key]

    if result == nil then
        result = matcher.new(nil, nil, { ... })
        matchers.cache_size = matchers.cache_size + 1
        matchers.cache_dict[matchers.cache_size] = result
    end

    return result
end

---获取匹配器
---@param all_tb string[]
---@param any_tb string[]
---@param none_tb string[]
---@return matcher
function matchers.__call(all_tb, any_tb, none_tb)
    local key1 = string_components_ex(all_tb)
    local key2 = string_components_ex(any_tb)
    local key3 = string_components_ex(none_tb)
    local result = matchers.cache_dict[key1 .. key2 .. key3]

    if result == nil then
        result = matcher.new(all_tb, any_tb, none_tb)
        matchers.cache_size = matchers.cache_size + 1
        matchers.cache_dict[matchers.cache_size] = result
    end

    return result
end

---销毁
---@public
function matchers.dispose()
    local cache_list = matchers.cache_list
    for _, v in pairs(cache_list) do
        v:dispose()
    end
    table_clear(cache_list)
    matchers.cache_size = 0
end


return matchers
--endregion