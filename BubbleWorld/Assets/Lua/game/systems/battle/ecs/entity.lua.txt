---
--- Generated by wuhaijun
--- File name : entity.lua.txt
--- DateTime : 2021/03/29
--- Description :
---     The entity is a general purpose object. Usually, it only consists of a unique eid. 
---     They "tag every coarse gameobject as a separate item". 
---     Implementations typically use a plain integer for this.
---

local helper = ecs_helper

---@type callback
local callback = require(helper.path .. 'callback')

---@class entity
local entity = class("entity")

entity.__tostring = function(t)
    local str = ""
    for _, v in pairs(t.component_dict) do
        if #str > 0 then
            str = str .. ', '
        end

        if v then
            str = str .. v.cname
        end
    end
    return string.format("<entity_%d=%s>", t.eid, str)
end

---构造函数
---@protected
function entity:ctor()
    ---实体唯一id
    ---@public
    self.eid = 0

    ---是否激活
    ---@private
    ---@type boolean
    self.activated = false

    ---组件存储字典
    ---@private
    ---@type table<component_type, component>
    self.component_dict = {}

    ---当添加 component时触发回调
    ---@private
    ---@type callback
    self.component_added_callback = callback.new()
    ---当移除 component时触发回调
    ---@private
    ---@type callback
    self.component_removed_callback = callback.new()
    ---当替换 component时触发回调
    ---@private
    ---@type callback
    self.component_replaced_callback = callback.new()

    ---添加监听器回调
    ---@private
    ---@type callback
    self.add_listener_callback = callback.new()
    ---移除监听器回调
    ---@private
    ---@type callback
    self.remove_listener_callback = callback.new()
end

---初始化
---@public
---@param eid number
function entity:initialize(eid)
    self.eid = eid
    self.activated = true
end

---是否是激活状态
---@public
---@return boolean
function entity:is_active()
    return self.activated
end

--region 组件相关
---是否存在该组件
---@public
---@param comp_type component_type 组件名字
---@return component
function entity:has_component(comp_type)
    return self.component_dict[comp_type] ~= nil
end

---添加组件
---@public
---@param comp_type component_type 组件类型
---@return component
function entity:add_component(comp_type, ...)
    if not self:is_active() then
        helper.error("Cannot add component, the entity is not active, eid = ", self.eid, ", comp_type = ", comp_type)
        return
    end

    if self:has_component(comp_type) then
        helper.error("Cannot add component, already contains this component, eid = ", self.eid, ", comp_type = ", comp_type)
        return
    end

    local component = comp_type.new(...)
    self.component_dict[comp_type] = component
    self.component_added_callback(self, component)
    
    return component
end

---移除组件
---@public
---@param comp_type component_type 组件类型
function entity:remove_component(comp_type)
    if not self:is_active() then
        helper.error("Cannot remove component, the entity is not active, eid = ", self.eid, ", cname = ", comp_type.cname)
        return 
    end

    local component = self:get_component(comp_type)
    if component ~= nil then
        self:remove_component_handle(comp_type, component)
    end
end

---替换组件
---@public
---@param comp_type component_type 组件类型
function entity:replace_component(comp_type, ...)
    if not self:is_active() then
        helper.error("Cannot replace component, the entity is not active, eid = ", self.eid, ", cname = ", comp_type.cname)
        return
    end

    local component = self:get_component(comp_type)
    if component ~= nil then
        component:replace_handle(...)
        self.component_replaced_callback(self, component)
    else
        self:add_component(comp_type, ...)
    end
end

---获取组件
---@public
---@param comp_type component_type 组件类型
---@return component
function entity:get_component(comp_type)
    return self.component_dict[comp_type]
end

---移除组件处理
---@private
---@param comp_type component_type component实例
---@param component component component实例
function entity:remove_component_handle(comp_type, component)
    self.component_removed_callback(self, component)
    self.component_dict[comp_type] = nil
    component:clear()
end
--endregion

--region 组件监听
---添加组件监听，当组件数据发生变化时，回调action
---@public
---@param comp_type component_type 组件类型
---@param action fun(e:entity, v:any) 回调方法，参数：e=组件所在实体, v=组件参数
---@param observer table 【可选】观察者实例
function entity:add_listener(comp_type, action, observer)
    helper.assert(comp_type ~= nil, "Add listener component type invalid")
    helper.assert(action ~= nil, "Add listener action invalid")

    -- 创建监听器
    self.add_listener_callback(self.eid, comp_type, action, observer)
end

---添加监听者
---@public
---@param comp_type component_type 组件类型
---@param action fun(e:entity, v:any) 回调方法，参数：e=组件所在实体, v=组件参数
function entity:remove_listener(comp_type, action)
    helper.assert(comp_type ~= nil, "Remove listener component type invalid")
    helper.assert(action ~= nil, "Remove listener action invalid")
    
    -- 移除监听器
    self.remove_listener_callback(self.eid, comp_type, action)
end
--endregion

--region 回调处理
---设置添加回调
---@public
---@param action function
---@param instance table
function entity:set_added_callback(action, instance)
    self.component_added_callback:add(action, instance)
end

---设置移除回调
---@public
---@param action function
---@param instance table
function entity:set_removed_callback(action, instance)
    self.component_removed_callback:add(action, instance)
end

---设置替换回调
---@public
---@param action function
---@param instance table
function entity:set_replaced_callback(action, instance)
    self.component_replaced_callback:add(action, instance)
end

---设置添加监听回调
---@public
---@param action fun(eid:number, comp_type:component, action:function, instance:table)
function entity:set_add_listener_callback(action)
    self.add_listener_callback:add(action)
end

---设置移除监听回调
---@public
---@param action fun(eid:number, comp_type:component, action:function)
function entity:set_remove_listener_callback(action)
    self.remove_listener_callback:add(action)
end
--endregion

---clear
---@public
function entity:clear()
    self.activated = false
    
    for type, comp in pairs(self.component_dict) do
        self:remove_component_handle(type, comp)
    end

    self.component_added_callback:clear()
    self.component_removed_callback:clear()
    self.component_replaced_callback:clear()
    
    self.add_listener_callback:clear()
    self.remove_listener_callback:clear()

    self.eid = -1
end

---销毁
---@public
function entity:dispose()
    if not self:is_active() then
        helper.error("Cannot dispose, the entity is not active, eid = ", self.eid)
    end
    
    self:clear()
    self.component_dict = nil
    
    self.component_added_callback = nil
    self.component_removed_callback = nil
    self.component_replaced_callback = nil

    self.add_listener_callback = nil
    
    self.eid = nil
end

return entity