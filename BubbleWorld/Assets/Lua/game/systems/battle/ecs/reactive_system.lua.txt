---
--- Generated by wuhaijun
--- File name : reactive_system.lua.txt
--- DateTime : 2021/03/31
--- Description : 
---     A reactive_system calls execute(entity_list) if there were changes based on
---     the specified Collector and will only pass in changed entities.
---     A common use-case is to react to changes, e.g. a change of the position
---     of an entity to update the gameObject.transform.position
---     of the related gameObject.
---    

local helper = ecs_helper
local table_clear = helper.clear_array

---@type component_type
local component_type = require(helper.path .. 'component_type')

---@class reactive_system
local reactive_system = class("reactive_system")

---构造函数
---@protected
---@param context context
function reactive_system:ctor(context)
    ---@protected
    self.context = context
    
    ---@private
    self.filter_callback = function(e) return not e:has_component(component_type.destroyed) and self:filter(e) end

    ---@private
    ---@type entity[]
    self.collector_entity_list = {}

    ---@private
    ---@type collector
    self.collector = self:get_trigger(context)
end

---激活收集器
---@public
function reactive_system:activate()
    self.collector:activate()
end

---停用收集器
---@public
function reactive_system:deactivate()
    self.collector:deactivate()
end

---[必须子类实现]获取触发配置
---@protected
---@param context context
---@return collector
function reactive_system:get_trigger(context)
    helper.error(self.cname, " 'get_trigger' not implemented, context = ", context ~= nil)
end

---[必须子类实现]过滤
---@protected
---@param entity entity
---@return boolean
function reactive_system:filter(entity)
    helper.error(self.cname, " 'filter' not implemented, list_count = ", entity:__tostring())
end

---[必须子类实现]组件变化时执行
---@protected
---@param list entity[]
---@param count number
function reactive_system:executes(list, count)
    helper.error(self.cname, " 'executes' not implemented, count = ", count, ", list = ", list)
end

---执行, 每帧执行后清理收集器
---@public
function reactive_system:execute()
    if not self.collector:has_entity() then return end

    local list, count = self.collector:get_entity_list_by_filter(self.collector_entity_list, self.filter_callback)
    self.collector:clear_entity()
    
    if count > 0 then
        self:executes(list, count)
    end
end

---卸载
---@public
function reactive_system:tear_down()
    self.context:destroy_collector(self.collector)
    self.collector = nil
    
    table_clear(self.collector_entity_list)
    self.collector_entity_list = nil

    self.context = nil
    self.filter_callback = nil
end

return reactive_system