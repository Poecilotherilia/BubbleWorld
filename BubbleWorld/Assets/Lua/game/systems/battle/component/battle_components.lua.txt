---
--- Generated by wuhaijun
--- File name : battle_components.lua.txt
--- DateTime : 2021/04/20
--- Description : 
---

local helper = battle_helper
local make_component = require(helper.path.ecs .. 'make_component')
---@type component_type
local component_type = require(helper.path.ecs .. 'component_type')

---@class battle_components : component_type
local battle_components = 
{
    ---uid组件
    ---@type { value:ident } 单位唯一标识
    uid = make_component('uid', 'value'),
    
    ---战场组件(唯一)
    ---@type { value:battle_mode_type } 战斗模式
    battle_field = make_component("battle_field", "value"),
    ---战斗步骤
    ---@type { value:battle_step_type } 战斗步骤
    battle_step = make_component("battle_step", "value"),
    ---单位数据
    ---@type { value:battle_unit_info }
    unit_info = make_component("unit_data", "value"),
    ---本地坐标
    ---@type { value:vector3 }
    local_position = make_component("local_position", "value"),
    ---资源数据
    ---@type battle_asset_data_data
    asset_data = make_component("asset_data", "res_path", "render_script", "parent_eid", "parent_point_name"),
    ---子弹数据
    ---@type { eid:number, data:generate_bullet_data } 施法者实体eid，子弹配置
    bullet_info = make_component("bullet_info", 'data'),
    ---看向目标位置
    ---@type { x:number, y:number, z:number } 目标实体eid
    look_at_position = make_component("look_at_position", 'x', 'y', 'z'),
    ---单位播放动画
    ---@type unit_action_component_data 
    unit_action = make_component("unit_action", "name", 'is_loop', 'fade_time', 'callback'),
    ---显示特效
    ---@type { value:queue } render_effect_data 特效数据队列
    show_effect = make_component("show_effect", "value"),
    ---移除特效
    ---@type { value:queue } string 特效表ID队列
    remove_effect = make_component("remove_effect", "value"),
    ---单位死亡
    ---@type { value:number } 死亡类型
    unit_death = make_component("unit_death", 'value'),
    ---胜利特写
    victory_closeup = make_component("victory_closeup"),
    ---单位激活
    ---@type { value:boolean }
    unit_active = make_component("unit_active", "value"),
    ---队伍组
    ---@type { value:table<team_type_flag, table<number, number>> }
    team_group = make_component("team_group", 'value'),
    ---队伍标识
    ---@type { value:team_type_flag }
    team_flag = make_component("team_flag", 'value'),
    ---单位隐藏
    ---@type { value:boolean }
    unit_hidden = make_component("unit_hidden", 'value'),
    ---单位材质球数据
    ---@type  { value:queue } battle_material_operation_config 队列
    material_data = make_component("material_data", 'value'),
    ---战斗回放索引
    ---@type { value:number }
    replay_idx = make_component("replay_idx", 'value'),
    ---播放音效
    ---@type { value:string }
    play_audio = make_component("play_audio", 'value'),
    
--region 回合相关
    -- 回合中使用的组件
    ---检测战斗结束
    ---@type { value:AckBTLEndInfo } 战斗结束数据
    over_condition = make_component("over_condition", "value"),
    ---尝试获取数据
    ---@type { value:battle_wait_data_type, uid:Ident } 数据类型
    try_get_data = make_component("try_get_data", "value", "uid"),
    ---行动数据
    ---@type { value:BTLAction } 当前行动数据
    action_data = make_component("action_data", "value"),
    ---检测行动阶段
    ---@type { value:queue } BTLEffect[]效果数据列表队列
    check_action_stage = make_component("check_action_stage", "value"),
    ---单位行动前
    ---@type { value:BTLEntityStateInTurn }
    action_before = make_component("action_before", "value"),
    ---战斗操作模式
    ---@type { value:battle_operation_mode }
    operation_mode = make_component("operation_mode", "value"),
    ---视觉追随
    ---@type visual_follow_component_data
    visual_follow = make_component("visual_follow", "tar_x", "tar_y", "tar_z", "time"),
    ---看向目标数据
    ---@type visual_follow_running_component_data
    visual_follow_running = make_component("visual_follow_running", "start_qua", "end_qua", "duration", "elapsed"),
--endregion
    
--region 技能相关
    -- 技能中使用的组件
    ---用于获取技能全局唯一实体
    ---@type skill_entity_component_data
    skill_entity = make_component("skill_entity", 'effect_list', 'used_count'),
    ---技能处理
    ---@type skill_handler_component_data
    skill_handler = make_component("skill_handler", "queue_stack", "skill_hash"),
    ---技能处理后
    ---@type { value:table<number, number>, entities:BTLEntity[] } 魔力色相
    skill_after = make_component("skill_after", "value", "entities"),
    ---技能运行
    ---@type skill_running_component_data
    skill_running = make_component("skill_running", 'skill_data', 'running_queue'),
    ---技能行为
    ---@type skill_running_component_data
    skill_behavior = make_component("skill_behavior", 'skill_data', 'running_queue'),
    ---激活的技能行为们
    ---@type { value:string[] }
    actived_behaviors = make_component("actived_behaviors", 'value'),
    ---技能相机
    ---@type { value:skill_camera_component_data }
    skill_camera = make_component("skill_camera", 'value'),
    ---预加载技能
    ---@type preload_skill_component_data
    preload_skill = make_component("preload_skill", "skill_list", "skill_mid", "target_uid", "ignore_effect"),
    ---单位身上的Buff数据
    ---@type { value:buff_data_component_data[] } buff列表
    buff_data = make_component("buff_data", "value"),
    ---Buff行为
    ---@type { value:queue } buff_behavior_component_data 数据队列
    buff_behavior = make_component("buff_behavior", 'value'),
    ---替换渲染层
    ---@type { res_path:string, render_script:string }
    replace_render = make_component("replace_render", "res_path", "render_script"),
    ---技能触发器
    ---@type { value:BTLTriggerInfo }
    skill_trigger = make_component("skill_trigger", 'value'),
    ---会心一击
    ---@type table
    critical_hit = make_component("critical_hit"),
    ---震屏
    ---@type { duration:number, direction:skill_pos_info, curve:animation_curve_keyframe[], force:number }
    shake_screen = make_component("shake_screen", 'duration', 'direction', 'curve', 'force'),
    ---顿屏
    ---@type { duration:number, time_scale:number }
    freeze_battle = make_component("freeze_battle", 'duration', 'time_scale'),
    ---顿帧
    ---@type { duration:number, time_scale:number }
    freeze_frame = make_component("freeze_frame", 'duration', 'time_scale'),
    ---顿帧
    final_attack = make_component("final_attack"),
    ---战斗地图
    ---@type battle_map_component_data
    battle_map = make_component("battle_map", 'is_show', 'begin_value', 'end_value', 'duration'),
 --endregion
    
--region 状态相关
    ---单位状态
    ---@type unit_state_component_data
    unit_state = make_component("unit_state", "current", "history"),
    ---状态限制
    ---@type state_constraint_component_data
    state_constraint = make_component("state_constraint", "value"),
--endregion
}

local meta =
{
    cname = 'battle_components',
    __index = component_type,
}

return setmetatable(battle_components, meta)