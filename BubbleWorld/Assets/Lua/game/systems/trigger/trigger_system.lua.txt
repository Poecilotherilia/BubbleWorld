---
--- Generated by lvyuqiang
--- File name : trigger_system.lua.txt
--- DateTime : 2022/05/12
--- Description : 触发器管理器
---

local array = array_table
local data = data
local t = tables
local log = log
local nav_trigger_class = require "game/systems/trigger/model/nav_trigger"
local collider_trigger_class = require "game/systems/trigger/model/collider_trigger"
local func_trigger_class = require "game/systems/trigger/model/func_trigger"
local distance_trigger_class = require "game/systems/trigger/model/nav_distance_trigger"
local data_manager = game_data_manager
local hero_manager = require 'game/hero/hero_manager'

---@class trigger_system
local trigger_system = class("trigger_system")

function trigger_system:ctor()
    self.triggers = {}
end

---初始化居所触发器
function trigger_system:init_home_triggers()
    array.clear(self.triggers)
    local trigger_datas = data.get_all(t.Trigger.name)
    for _, trigger_data in pairs(trigger_datas) do
        local is_trigger_valid = true
        if trigger_data.Id == 'Trigger_001' then
            ---魔药学
            is_trigger_valid = data_manager.college:is_in_homework_of_subject("Subject_1")
        elseif trigger_data.Id == "Trigger_002" then
            is_trigger_valid = data_manager.player:check_system_function_open(t.SystemFunction.ids.SystemFunction_Quintus)
        elseif trigger_data.Id == "Trigger_003" then
            is_trigger_valid = data_manager.player:check_system_function_open(t.SystemFunction.ids.SystemFunction_Dispatch)
        elseif trigger_data.Id == "Trigger_011" then
            is_trigger_valid = data_manager.player:check_system_function_open(t.SystemFunction.ids.SystemFunction_HouseKeeper)
        elseif trigger_data.Id == 'Trigger_009' then
            ---占卜学
            is_trigger_valid = data_manager.college:is_in_homework_of_subject("Subject_2")
        elseif trigger_data.Id == 'Trigger_017' then
            ---黑市商人
            is_trigger_valid = data_manager.player:check_system_function_open(t.SystemFunction.ids.SystemFunction_BlackMarket)
        end

        if is_trigger_valid then
            local trigger = nil
            if trigger_data.Type == 1 then
                --寻路
                trigger = nav_trigger_class.new(trigger_data.Id, trigger_data.Id)
            elseif trigger_data.Type == 2 then
                --碰撞
                trigger = collider_trigger_class.new(trigger_data.Id, trigger_data.Id)
            end
            if trigger then
                array.insert(self.triggers, trigger)
            end
        end
    end
end

---寻路至触发器
---@param trigger_id string 触发器Id
---@param param any 参数
---@public
function trigger_system:path_finding_trigger(trigger_id, param)
    local target_trigger
    for i = 1, #self.triggers do
        local trigger = self.triggers[i]
        if trigger.id == trigger_id then
            target_trigger = trigger
            break
        end
    end

    if target_trigger ~= nil then
        if target_trigger.start_path_finding ~= nil then
            target_trigger.param = param
            target_trigger:start_path_finding()
        else
            log.error("path_finding_trigger error, trigger type error")
        end
    else
        log.error("path_finding_trigger error, trigger doesn't exist: ", trigger_id)
    end
end

---为触发器游戏对象添加障碍物
---@param go UnityEngine.GameObject 游戏对象
---@public
function trigger_system:add_nav_mesh_obstacle(go)
    if go then
        ---@type UnityEngine.AI.NavMeshObstacle
        local obstacle = go:GetOrAddComponent(typeof(cs.NavMeshObstacle))
        obstacle.shape = cs.NavMeshObstacleShape.Box
        obstacle.center = cs.Vector3.zero
        obstacle.size = cs.Vector3(0.2, 2, 0.2)
        obstacle.carving = true
        obstacle.carvingMoveThreshold = 0.1
        obstacle.carvingTimeToStationary = 0.5
        obstacle.carveOnlyStationary = true
    end
end

---初始化战团触发器
function trigger_system:init_guild_triggers()
    array.clear(self.triggers)
    local GuildTrigger_name = t.GuildTrigger.name
    local trigger_datas = data.get_all(GuildTrigger_name)
    for _, trigger_data in pairs(trigger_datas) do
        local trigger
        if trigger_data.Type == 1 then
            --寻路
            trigger = nav_trigger_class.new(trigger_data.Id, trigger_data.Id, GuildTrigger_name)
        elseif trigger_data.Type == 2 then
            --碰撞
            trigger = collider_trigger_class.new(trigger_data.Id, trigger_data.Id, GuildTrigger_name)
        end
        if trigger then
            array.insert(self.triggers, trigger, GuildTrigger_name)
        end
    end
end

---设置可见触发器入口显隐
---@public
function trigger_system:set_triggers_entry_visible(visible)
    for i = 1, #self.triggers do
        local trigger = self.triggers[i]
        if trigger.set_entry_visible then
            trigger:set_entry_visible(visible)
        end
    end
end

---清理触发器
function trigger_system:clear_triggers()
    for i = 1, #self.triggers do
        self.triggers[i]:dispose()
    end
    array.clear(self.triggers)
end

---执行触发器
---@param trigger_id string 触发器id
---@param callback function 回调
---@public
function trigger_system:execute_trigger(trigger_id, callback)
    for i = 1, #self.triggers do
        local trigger = self.triggers[i]
        if trigger.id == trigger_id then
            trigger:execute(callback)
            return
        end
    end

    local trigger = func_trigger_class.new(trigger_id, trigger_id)
    trigger:execute(callback)
end

---更新
---@public
function trigger_system:update()
    for i = 1, #self.triggers do
        self.triggers[i]:update()
    end
end

---检测到碰撞
---@param collider UnityEngine.Collider 碰撞盒
---@public
function trigger_system:on_trigger_enter(collider)
    for i = 1, #self.triggers do
        local trigger = self.triggers[i]
        if trigger.trigger_data.Type == 2 and trigger.collider == collider then
            trigger:execute()
        end
    end
end

--region explore dungeon

---探索材料副本触发器
---@public
---@param distance_target UnityEngine.Transform
--function trigger_system:init_explore_dungeon_triggers(distance_target)
--    ---@type table<number, record_row>
--    local dict = data_manager.explore_dungeon:get_cur_dungeon_monster_dict()
--    for i, v in pairs(dict) do
--        local index = v:get_value(t.Player.records.ExploreDungeonMonsters.columns.Index)
--        local is_complete = v:get_value(t.Player.records.ExploreDungeonMonsters.columns.IsComplete)
--        if is_complete == 0 then
--            local trigger_id = self:get_explore_dungeon_trigger_id(index)
--            if nil ~= trigger_id then
--                local trigger = distance_trigger_class.new(trigger_id, trigger_id, nil, distance_target)
--                array.insert(self.triggers, trigger)
--            end
--        end
--    end
--end

---探索材料副本触发器
---@param
---@param distance_target UnityEngine.Transform
---@param index number
function trigger_system:init_explore_dungeon_triggers_by_index(distance_target, index)
    local trigger_id = self:get_explore_dungeon_trigger_id(index)
    if nil ~= trigger_id then
        local trigger = distance_trigger_class.new(trigger_id, trigger_id, nil, distance_target)
        array.insert(self.triggers, trigger)
    end
end

---材料副本移除触发器
---@public
---@param index number
function trigger_system:remove_dungeon_trigger_by_index(index)
    local trigger_id = self:get_explore_dungeon_trigger_id(index)
    ---@type base_trigger
    local trigger = self:get_trigger(trigger_id)
    if nil ~= trigger then
        array.remove(self.triggers, trigger)
        trigger:dispose()
    end
end

---设置材料副本触发器额外绑定
---@public
---@param index number
---@param obj UnityEngine.GameObject
function trigger_system:set_explore_dungeon_trigger_bind_object(index, obj)
    local trigger_id = self:get_explore_dungeon_trigger_id(index)
    if nil ~= trigger_id then
        local trigger = self:get_trigger(trigger_id)
        if nil ~= trigger then
            trigger:set_bind_object(obj)
        end
    end
end

---获得指定Trigger
---@public
---@param id string
---@return base_trigger
function trigger_system:get_trigger(id)
    for i = 1, #self.triggers do
        local trigger = self.triggers[i]
        if trigger.id == id then
            return trigger
        end
    end
    return nil
end

---获得材料副本触发器ID
---@public
---@return string
function trigger_system:get_explore_dungeon_trigger_id(index)
    local trigger_id = nil
    if index == 1 then
        trigger_id = "Trigger_Dungeon_01_01"
    elseif index == 2 then
        trigger_id = "Trigger_Dungeon_01_02"
    elseif index == 3 then
        trigger_id = "Trigger_Dungeon_01_03"
    elseif index == 4 then
        trigger_id = "Trigger_Dungeon_01_04"
    elseif index == 5 then
        trigger_id = "Trigger_Dungeon_01_05"
    elseif index == 6 then
        trigger_id = "Trigger_Dungeon_01_06"
    elseif index == 7 then
        trigger_id = "Trigger_Dungeon_01_07"
    elseif index == 8 then
        trigger_id = "Trigger_Dungeon_01_08"
    elseif index == 9 then
        trigger_id = "Trigger_Dungeon_01_09"
    elseif index == 10 then
        trigger_id = "Trigger_Dungeon_01_10"
    end

    return trigger_id
end

--endregion

return trigger_system