---
--- Generated by chenmingzhu
--- File name : dispatch_controller.lua.txt
--- DateTime : 2023/11/13
--- Description : 派遣主角、猫头鹰控制器
---

local role_res_util = require 'game/utils/role_res_util'
local string = string
local get_file_name_without_extension = string.get_file_name_without_extension
local ipairs = ipairs
local math_random = math.random
local data = data
local tables = tables
local res = res
local cs = cs
local LuaUtil = cs.LuaUtil
local GameObject = cs.GameObject
local GameUnitLuaBehaviour = cs.GameUnitLuaBehaviour
local BattleCameraLuaBehaviour = cs.BattleCameraLuaBehaviour
local log = log
local typeof = typeof
local timer_manager = timer_manager
local add_timer = timer_manager.add_timer
local remove_timer = timer_manager.remove_timer
local enum = enum
local camera_manager = camera_manager
local message = message
local message_type = enum.message_type
---@class dispatch_controller
local dispatch_controller = class("dispatch_controller")

local interval

---构造函数
---@private
function dispatch_controller:ctor()
    interval = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_BIRD_LEADER_RELEX_ACTION_CD).Int

    local pool_root = GameObject.Find("Faker/PoolRoot")
    ---@private
    self.res_loader = res.create_res_loader()
    ---@private
    self.res_pool = res.create_res_pool(self.res_loader, pool_root.transform)
    ---@type UnityEngine.GameObject
    local model_root = GameObject.Find("Faker/ModelRoot")
    ---@private
    self.model_root = model_root.transform

    --- 主角坐下动作回调
    ---@private
    self.hero_sit_callback = function()
        self:start_play_hero_sit_animation()
    end
    --- 播放主角、猫头鹰待机休闲动作回调
    ---@private
    self.play_relax_action_callback = function()
        self:play_sit_relax_action()
    end
    --- 猫头鹰待机动作播放回调
    ---@private
    self.owl_idle_callback = function()
        role_res_util.play_animation(self.owl_game_unit_behavior, self.owl_idle_action_id, 1, nil, self.res_loader, self.res_pool)
    end
    --- 主角站起动作回调
    ---@private
    self.hero_stand_up_finished_callback = function()
        -- todo cmz 
        --self:do_ground_move_anim()
        message.broadcast(message_type.DISPATCH_ON_DISPATCH_GROUND_MOVE)
        self:start_play_hero_walk_animation()
    end
    --- 主角切换走路动作回调
    ---@private
    self.hero_walk_callback = function()
        self:start_play_hero_walk_animation()
    end
    --- 播放主角、猫头鹰行走休闲动作回调
    ---@private
    self.play_walk_relax_action_callback = function()
        self:play_walk_relax_action()
    end
    --- 猫头鹰飞行动作回调
    ---@private
    self.owl_fly_callback = function()
        role_res_util.play_animation(self.owl_game_unit_behavior, self.owl_fly_action_id, 1, nil, self.res_loader, self.res_pool)
    end
end

--region 初始化、预加载

---初始化主角模型和猫头鹰模型
---@private
function dispatch_controller:init_hero_owl_model(is_moving)
    local hero_res_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_HERO_RES_ID).String
    local role_res_data = data.get(tables.RoleRes.name, hero_res_id)
    local model_path = role_res_data.ModelPath
    --加载模型
    local parent_trans = self.model_root.transform
    -- 主角
    local hero_res_go = res.load_instance_sync(model_path, get_file_name_without_extension(model_path), parent_trans, nil, self.res_loader, self.res_pool)
    if LuaUtil.IsNull(hero_res_go) then
        log.error("hero model obj is nil")
        return
    end

    self.hero_res_go = hero_res_go
    self.hero_game_unit_behavior = hero_res_go:GetComponent(typeof(GameUnitLuaBehaviour))
    self.hero_game_unit_behavior:InitLua(self)
    local hero_point_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DISPATCH_HERO_SET).String
    local point_data = data.get(tables.Point.name, hero_point_id)
    hero_res_go:SetLocalPosition(point_data.PositionX / 10000, point_data.PositionY / 10000, point_data.PositionZ / 10000)
    hero_res_go:SetLocalRotation(point_data.RotationX / 10000, point_data.RotationY / 10000, point_data.RotationZ / 10000)

    -- 猫头鹰
    local owl_model_path = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DISPATCH_OWL_MOD_DATA).String
    local owl_res_go = res.load_instance_sync(owl_model_path, get_file_name_without_extension(owl_model_path), parent_trans, nil, self.res_loader, self.res_pool)
    if LuaUtil.IsNull(owl_res_go) then
        log.error("owl model obj is nil")
        return
    end

    self.owl_res_go = owl_res_go
    self.owl_game_unit_behavior = owl_res_go:GetComponent(typeof(GameUnitLuaBehaviour))
    self.owl_game_unit_behavior:InitLua(self)
    owl_res_go:SetLocalPosition(point_data.PositionX / 10000, point_data.PositionY / 10000, point_data.PositionZ / 10000)
    owl_res_go:SetLocalRotation(point_data.RotationX / 10000, point_data.RotationY / 10000, point_data.RotationZ / 10000)

    self:preload_action()
    self:play_init_animation(is_moving)

    --message.add_listener(message_type.DISPATCH_APPOINT_STATE_CHANGED, self.on_appoint_state_changed, self)
end

---加载相机模型
---@private
function dispatch_controller:load_camera_obj()
    local camera_path = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_COMMON_UI_CAMERA_DATA).String
    ---@type UnityEngine.GameObject
    local camera_root = GameObject.Find("Faker/CameraRoot")
    local camera_obj = res.load_instance_sync(camera_path,
            get_file_name_without_extension(camera_path),
            camera_root.transform,
            nil,
            self.res_loader,
            self.res_pool)
    if camera_obj then
        local camera_lua_behaviour = camera_obj:GetComponent(typeof(BattleCameraLuaBehaviour))
        if camera_lua_behaviour == nil then
            log.error("not found BattleCameraLuaBehaviour, path = ", camera_path)
            return
        end

        ---@type UnityEngine.Camera
        local camera = camera_lua_behaviour.normalCamera
        if camera == nil then
            log.error("not found BattleCameraLuaBehaviour.normalCamera, path = ", camera_path)
            return
        end
        self.camera_lua_behaviour = camera_lua_behaviour
        local _, r_tex = camera_lua_behaviour:SetRenderTexture()
        if r_tex then
            message.broadcast(message_type.DISPATCH_ON_DISPATCH_CAMERA_LOAD_FINISH, r_tex)
        end
    end
end

---预加载动作
---@public
function dispatch_controller:preload_action()
    -- 预加载主角动作
    -- 1.主角常规、切换动作
    local hero_actions = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DISPATCH_HERO_ACTION).Array_String
    self.hero_walk_action_id = hero_actions[1]
    self.hero_sit_down_action_id = hero_actions[2]
    self.hero_sit_action_id = hero_actions[3]
    self.hero_stand_up_action_id = hero_actions[4]
    for _, v in ipairs(hero_actions) do
        role_res_util.preload_action(v, self.res_pool)
    end
    -- 2.主角待机休闲动作
    local hero_relax_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DISPATCH_LEADER_SITRELEX_ACTION).String
    self.hero_relax_action_id = hero_relax_action_id
    role_res_util.preload_action(hero_relax_action_id, self.res_pool)
    -- 3.主角行走休闲动作
    local hero_relax_ids = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DISPATCH_LEADER_RELEX_ACTION).Array_String
    self.hero_relax_ids = hero_relax_ids
    for _, v in ipairs(hero_relax_ids) do
        role_res_util.preload_action(v, self.res_pool)
    end

    -- 预加载猫头鹰动作
    -- 1.猫头鹰常规、切换动作
    local owl_actions = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DISPATCH_BIRD_ACTION).Array_String
    self.owl_fly_action_id = owl_actions[1]
    self.owl_fly_down_action_id = owl_actions[2]
    self.owl_idle_action_id = owl_actions[3]
    self.owl_fly_up_action_id = owl_actions[4]
    for _, v in ipairs(owl_actions) do
        role_res_util.preload_action(v, self.res_pool)
    end
    -- 2.猫头鹰待机休闲动作
    local owl_relax_action_id = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DISPATCH_BIRD_SITRELEX_ACTION).String
    self.owl_relax_action_id = owl_relax_action_id
    role_res_util.preload_action(owl_relax_action_id, self.res_pool)
    -- 3猫头鹰行走休闲动作
    local owl_relax_ids = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DISPATCH_BIRD_RELEX_ACTION).Array_String
    self.owl_relax_ids = owl_relax_ids
    for _, v in ipairs(owl_relax_ids) do
        role_res_util.preload_action(v, self.res_pool)
    end
end

--endregion

--region public functions

---@public
function dispatch_controller:init_controller(is_moving)
    self.hero_walk_speed = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_DISPATCH_HERO_MOVE_SPEED).Float
    self:init_hero_owl_model(is_moving)
    self:load_camera_obj()
end

---播放默认动作
---public
---@param type number (0:idle 1:walk)
function dispatch_controller:play_hero_owl_animation(type)
    type = type or 0
    -- idle
    if type == 0 then
        role_res_util.play_animation(self.hero_game_unit_behavior, self.hero_sit_down_action_id, 1, nil, self.res_loader, self.res_pool,
                self.hero_sit_callback)
        role_res_util.play_animation(self.owl_game_unit_behavior, self.owl_fly_down_action_id, 1, nil, self.res_loader, self.res_pool,
                self.owl_idle_callback)
    else
        role_res_util.play_animation(self.hero_game_unit_behavior, self.hero_stand_up_action_id, 1, nil, self.res_loader, self.res_pool,
                self.hero_stand_up_finished_callback)
        role_res_util.play_animation(self.owl_game_unit_behavior, self.owl_fly_up_action_id, 1, nil, self.res_loader, self.res_pool,
                self.owl_fly_callback)
    end
end

---@public
function dispatch_controller:clear_controller()
    --message.remove_listener(message_type.DISPATCH_APPOINT_STATE_CHANGED, self.on_appoint_state_changed, self)
    self:reset_state()
    self:remove_virtual_camera()
    self:clear_objs()
    self.owl_idle_action_id = nil
    self.owl_relax_action_id = nil
    self.hero_game_unit_behavior = nil
    self.owl_game_unit_behavior = nil
    self.hero_walk_action_id = nil
    self.hero_sit_down_action_id = nil
    self.hero_sit_action_id = nil
    self.hero_stand_up_action_id = nil
    self.owl_fly_action_id = nil
    self.owl_fly_down_action_id = nil
    self.owl_fly_up_action_id = nil
    self.model_root = nil
    self.hero_walk_speed = nil
    self.owl_relax_ids = nil
    self.hero_relax_ids = nil
end

--endregion

--region private functions

---初始化后播放动作
---@private
function dispatch_controller:play_init_animation(is_moving)
    -- 播放动作
    if is_moving then
        self:start_play_hero_walk_animation()
        role_res_util.play_animation(self.owl_game_unit_behavior, self.owl_fly_action_id, 1, nil, self.res_loader, self.res_pool)
    else
        self:start_play_hero_sit_animation()
        role_res_util.play_animation(self.owl_game_unit_behavior, self.owl_idle_action_id, 1, nil, self.res_loader, self.res_pool)
    end
end

---开始播放主角坐下待机动作（计时）
---@private
function dispatch_controller:start_play_hero_sit_animation()
    self:reset_state()
    role_res_util.play_animation(self.hero_game_unit_behavior, self.hero_sit_action_id, 1, nil, self.res_loader, self.res_pool)
    local timer = add_timer(interval, self.play_relax_action_callback)
    self.change_relax_timer = timer
end

---播放主角、猫头鹰待机休闲动作
---@private
function dispatch_controller:play_sit_relax_action()
    self:reset_state()
    role_res_util.play_animation(self.hero_game_unit_behavior, self.hero_relax_action_id, 1, nil, self.res_loader, self.res_pool, self.hero_sit_callback)
    role_res_util.play_animation(self.owl_game_unit_behavior, self.owl_relax_action_id, 1, nil, self.res_loader, self.res_pool, self.owl_idle_callback)
end

---播放主角行走动作（计时）
---@private
function dispatch_controller:start_play_hero_walk_animation()
    self:reset_state()
    role_res_util.play_animation(self.hero_game_unit_behavior, self.hero_walk_action_id, self.hero_walk_speed, nil, self.res_loader, self.res_pool)
    local timer = add_timer(interval, self.play_walk_relax_action_callback)
    self.change_relax_timer = timer
end

---播放主角、猫头鹰行走休闲动作
---@private
function dispatch_controller:play_walk_relax_action()
    self:reset_state()
    local index = math_random(1, 3)
    role_res_util.play_animation(self.hero_game_unit_behavior, self.hero_relax_ids[index], 1, nil, self.res_loader, self.res_pool, self.hero_walk_callback)
    role_res_util.play_animation(self.owl_game_unit_behavior, self.owl_relax_ids[index], 1, nil, self.res_loader, self.res_pool, self.owl_fly_callback)
end

---移除相机
---@private
function dispatch_controller:remove_virtual_camera()
    if self.view_camera_id then
        camera_manager.remove_virtual_camera(self.view_camera_id)
        res.unload_instance(self.camera_behaviour.gameObject, self.res_loader)
        self.camera_lua_behaviour:ReleaseTexture()
        self.camera_lua_behaviour = nil
        self.view_camera_id = nil
    end
end

---重置状态 清理计时器
---@private
function dispatch_controller:reset_state()
    if self.change_relax_timer then
        remove_timer(self.change_relax_timer)
        self.change_relax_timer = nil
    end
end

---@public
function dispatch_controller:dispose()
    self:clear_controller()
    self.res_pool:Clear()
    self.res_pool = nil
    self.res_loader:Dispose()
    self.res_loader = nil
    self.play_relax_action_callback = nil
    self.hero_sit_callback = nil
    self.owl_idle_callback = nil
    self.hero_stand_up_finished_callback = nil
    self.hero_walk_callback = nil
    self.owl_fly_callback = nil
    self.play_walk_relax_action_callback = nil
end

---清理obj
---@private
function dispatch_controller:clear_objs()
    if self.hero_res_go then
        res.unload_instance(self.hero_res_go, self.res_loader)
        self.hero_res_go = nil
    end
    if self.owl_res_go then
        res.unload_instance(self.owl_res_go, self.res_loader)
        self.owl_res_go = nil
    end
end

--endregion

return dispatch_controller