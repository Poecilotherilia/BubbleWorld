---
--- Generated by chenmingzhu
--- File name : dispatch_owl_controller.lua.txt
--- DateTime : 2023/09/05
--- Description : 居所猫头鹰控制器
---

local role_res_util = require 'game/utils/role_res_util'
local wwise_util = require 'game/utils/wwise_util/wwise_util'
local table_is_table_nil_or_empty = table.is_table_nil_or_empty
local table_count = table.count
local string = string
local string_is_nil_or_empty = string.is_nil_or_empty
local data = data
local tables = tables
local res = res
local cs = cs
local GameObject = cs.GameObject
local GameUnitLuaBehaviour = cs.GameUnitLuaBehaviour
local typeof = typeof
local ConstClient = tables.ConstClient
local ConstClient_name = ConstClient.name
local ConstClient_ids = ConstClient.ids
local timer_manager = timer_manager
local add_timer = timer_manager.add_timer
local remove_timer = timer_manager.remove_timer
local enum = enum
local home_owl_action_state = enum.dispatch.home_owl_action_state
local enum_common = enum.common
local camera_layer = enum_common.camera_layer
local camera_blend_type = enum_common.camera_blend_type
local camera_manager = camera_manager

---@class dispatch_owl_controller
local dispatch_owl_controller = class("dispatch_owl_controller")

---构造函数
---@private
function dispatch_owl_controller:ctor()
    local tag = data.get(ConstClient_name, ConstClient_ids.KW_DISPATCH_OWLROOT_TAG).String
    local parent_node = GameObject.FindWithTag(tag)
    self.parent_node = parent_node
    self.parent_node_transform = parent_node.transform
    self.res_loader = res.create_res_loader()
    self.pool = res.create_res_pool(self.res_loader, self.parent_node_transform)

    self.load_camera_callback = function(obj) self:on_load_v_camera_callback(obj) end
    self.play_owl_idle_callback = function() self:play_owl_idle_animation() end
    self.play_relax_action_callback = function()
        self:play_owl_relax_animation(self.play_owl_idle_callback)
    end
    self.play_sleep_action_callback = function()
        self:play_owl_sleep_animation()
    end
    self.play_awake_action_callback = function()
        self:start_play_owl_idle_animation()
    end
end

---初始化猫头鹰模型动作
---@public
---@param active boolean 派遣是否开启
function dispatch_owl_controller:init_owl_model_and_action(active, is_reminder_state)
    if self.parent_node_transform then
        if active then
            -- 开启时如果存在完成的事务或者委派奖励达上限 猫头鹰播放活泼动作
            local owl_obj = self.parent_node_transform:GetChild(0)
            if owl_obj then
                self.game_unit_behavior = owl_obj:GetComponent(typeof(GameUnitLuaBehaviour))
                self.owl_obj = owl_obj
                self:preload_action()
                self:play_default_animation(is_reminder_state)
            end
        else
            self.parent_node:SetActive(false)
        end
    end
end

---初始化镜头
---@private
function dispatch_owl_controller:init_virtual_camera()
    local camera_path = data.get(tables.ConstClient.name, tables.ConstClient.ids.KW_SKILL_CAMERA_NODE_PATH).String
    res.load_instance_async(camera_path,
            string.get_file_name_without_extension(camera_path),
            self.owl_obj.transform,
            nil,
            self.res_loader,
            nil,
            self.load_camera_callback)
end

---镜头加载完毕
---@private
function dispatch_owl_controller:on_load_v_camera_callback(obj)
    ---@type UnityEngine.GameObject
    local v_camera = obj:FindChildObject("Camera_node/v_camera"):GetOrAddComponent(typeof(cs.CinemachineVirtualCamera))
    local camera_id = camera_manager.add_virtual_camera(v_camera, camera_layer.UI)
    self.camera_behaviour = obj:GetOrAddComponent(typeof(GameUnitLuaBehaviour))

    camera_manager.show_virtual_camera(camera_id, camera_blend_type.Cut)
    self.view_camera_id = camera_id
    local anim_path = "Assets/Art/Character/Scene/Owl_home/Animation/maotouying_weituo_feichu_camera.anim"
    self.camera_behaviour:PlayAnimationAsync(anim_path, 1, nil, self.res_loader, self.pool)
end

---移除相机
---@public
function dispatch_owl_controller:remove_virtual_camera()
    if self.view_camera_id then
        camera_manager.remove_virtual_camera(self.view_camera_id)
        res.unload_instance(self.camera_behaviour.gameObject, self.res_loader)
    end
    self.view_camera_id = nil
    self.camera_behaviour = nil
end

--region 预加载

---预加载动作
---@public
function dispatch_owl_controller:preload_action()
    -- 常规待机
    local owl_idle_action_id = data.get(ConstClient_name, ConstClient_ids.KW_HOME_BIRD_ACTION_IDLE).String
    self.owl_idle_action_id = owl_idle_action_id
    role_res_util.preload_action(owl_idle_action_id, self.pool)
    -- 奖励提醒
    local owl_remind_action_id = data.get(ConstClient_name, ConstClient_ids.KW_HOME_BIRD_ACTION_CALL).String
    self.owl_remind_action_id = owl_remind_action_id
    role_res_util.preload_action(owl_remind_action_id, self.pool)
    -- 待机休闲
    local owl_relax_action_id = data.get(ConstClient_name, ConstClient_ids.KW_HOME_BIRD_ACTION_IDLE_RELAX).String
    self.owl_relax_action_id = owl_relax_action_id
    role_res_util.preload_action(owl_relax_action_id, self.pool)
    -- 打盹儿
    local owl_sleep_action_id = data.get(ConstClient_name, ConstClient_ids.KW_HOME_BIRD_ACTION_SLEEP).String
    self.owl_sleep_action_id = owl_sleep_action_id
    role_res_util.preload_action(owl_sleep_action_id, self.pool)
    -- 惊醒
    local owl_awake_action_id = data.get(ConstClient_name, ConstClient_ids.KW_HOME_BIRD_ACTION_AWAKE).String
    self.owl_awake_action_id = owl_awake_action_id
    role_res_util.preload_action(owl_awake_action_id, self.pool)
    -- 飞走
    local owl_flyaway_action_id = data.get(ConstClient_name, ConstClient_ids.KW_HOME_BIRD_ACTION_FLYAWAY).String
    self.owl_flyaway_action_id = owl_flyaway_action_id
    role_res_util.preload_action(owl_flyaway_action_id, self.pool)
end

--endregion

---播放默认动作
---@public
function dispatch_owl_controller:play_default_animation(is_reminder_state)
    -- 播放默认动作：常规待机/提醒
    if is_reminder_state then
        self:play_owl_active_animation()
    else
        self:start_play_owl_idle_animation()
    end
end

---开始播放猫头鹰站立动作（计时）
---@public
function dispatch_owl_controller:start_play_owl_idle_animation(dispatch_state_changed)
    if dispatch_state_changed and self.state == home_owl_action_state.FLYAWAY then
        return
    end
    self:play_owl_idle_animation()
    self:reset_sleep_timer()
end

---重置休眠计时器
---@private
function dispatch_owl_controller:reset_sleep_timer()
    -- 切换至休眠动作计时
    if self.change_sleep_internal == nil then
        self.change_sleep_internal = data.get(tables.ConstClient.name, ConstClient_ids.KW_BIRD_SLEEP_ACTION_CD).Int
    end
    if self.change_sleep_timer then
        remove_timer(self.change_sleep_timer)
        self.change_sleep_timer = nil
    end
    local timer = add_timer(self.change_sleep_internal, self.play_sleep_action_callback)
    self.change_sleep_timer = timer
end

---播放猫头鹰站立动作
---@private
function dispatch_owl_controller:play_owl_idle_animation()
    if self.game_unit_behavior then
        role_res_util.play_animation(self.game_unit_behavior, self.owl_idle_action_id, 1, 0, self.res_loader, self.pool)
    end
    -- 切换至休闲待机动作计时
    if self.change_relax_internal == nil then
        self.change_relax_internal = data.get(tables.ConstClient.name, ConstClient_ids.KW_BIRD_RELAX_ACTION_CD).Int
    end
    if self.change_relax_timer then
        remove_timer(self.change_relax_timer)
        self.change_relax_timer = nil
    end
    local timer = add_timer(self.change_relax_internal, self.play_relax_action_callback)
    self.change_relax_timer = timer
    self.state = home_owl_action_state.DEFAULT
end

---播放猫头鹰活跃动作
---@public
function dispatch_owl_controller:play_owl_active_animation()
    self:reset_state()
    if self.game_unit_behavior then
        role_res_util.play_animation(self.game_unit_behavior, self.owl_remind_action_id, 1, 0, self.res_loader, self.pool)
    end
    self.state = home_owl_action_state.REMINDER
end

---播放猫头鹰待机休闲动作
---@private
function dispatch_owl_controller:play_owl_relax_animation(finish_callback)
    if self.game_unit_behavior then
        role_res_util.play_animation(self.game_unit_behavior, self.owl_relax_action_id, 1, 0, self.res_loader, self.pool, finish_callback)
    end
    self.state = home_owl_action_state.DEFAULT
end

---播放猫头鹰睡觉动作
---@private
function dispatch_owl_controller:play_owl_sleep_animation()
    self:reset_state()
    if self.game_unit_behavior then
        role_res_util.play_animation(self.game_unit_behavior, self.owl_sleep_action_id, 1, 0, self.res_loader, self.pool)
    end
    self.state = home_owl_action_state.SLEEP
end

---播放猫头鹰惊醒动作
---@private
function dispatch_owl_controller:play_owl_awake_animation(callback)
    if self.game_unit_behavior then
        role_res_util.play_animation(self.game_unit_behavior, self.owl_awake_action_id, 1, 0, self.res_loader, self.pool, callback)
    end
    self.state = home_owl_action_state.DEFAULT
end

---播放猫头鹰飞走动作
---@public
function dispatch_owl_controller:play_owl_flyaway_animation(callback)
    self:reset_state()
    if self.game_unit_behavior then
        role_res_util.play_animation(self.game_unit_behavior, self.owl_flyaway_action_id, 1, 0, self.res_loader, self.pool, callback)
    end
    self.state = home_owl_action_state.FLYAWAY
end

---重置状态 清理计时器
---@private
function dispatch_owl_controller:reset_state()
    if self.change_relax_timer then
        remove_timer(self.change_relax_timer)
        self.change_relax_timer = nil
    end
    if self.change_sleep_timer then
        remove_timer(self.change_sleep_timer)
        self.change_sleep_timer = nil
    end
end

---玩家移动时
---@public
function dispatch_owl_controller:on_hero_moving()
    if self.state == home_owl_action_state.DEFAULT then
        self:reset_sleep_timer()
    elseif self.state == home_owl_action_state.SLEEP then
        self:play_owl_awake_animation(self.play_awake_action_callback)
    end
end

---@public
function dispatch_owl_controller:dispose()
    self:reset_state()
    self:remove_virtual_camera()
    self.pool:Clear()
    self.pool = nil
    self.res_loader:Dispose()
    self.res_loader = nil
    self.parent_node = nil
    self.parent_node_transform = nil
    self.owl_obj = nil
    self.game_unit_behavior = nil
    self.owl_idle_action_id = nil
    self.owl_relax_action_id = nil
    self.owl_remind_action_id = nil
    self.owl_sleep_action_id = nil
    self.owl_awake_action_id = nil
    self.owl_flyaway_action_id = nil
    self.change_relax_internal = nil
    self.change_sleep_internal = nil
    self.play_owl_idle_callback = nil
    self.play_relax_action_callback = nil
    self.play_awake_action_callback = nil
    self.play_sleep_action_callback = nil
end

return dispatch_owl_controller