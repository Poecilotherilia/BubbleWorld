---
--- Generated by chenmingzhu
--- File name : dispatch_system.lua.txt
--- DateTime : 2022/07/20
--- Description : 派遣系统
---

local dispatch_owl_controller = require 'game/systems/dispatch/dispatch_owl_controller'
local dispatch_controller = require 'game/systems/dispatch/dispatch_controller'
local tables = tables
local game_data_manager = game_data_manager
local dispatch_data = game_data_manager.dispatch
local appoint_state_flag = enum.dispatch.appoint_state_flag
local message = message
---@type message_type
local message_type = enum.message_type
local window = window
---@class dispatch_system
local dispatch_system = class("dispatch_system")

---构造函数
---@protected
function dispatch_system:ctor()
    ---居所猫头鹰控制器
    ---@type dispatch_owl_controller
    self.dispatch_owl_ctrl = nil

    ---派遣内主角、猫头鹰控制器
    ---@type dispatch_controller
    self.dispatch_ctrl = nil
end

--region home functions

---初始化猫头鹰模型动作
---@public
function dispatch_system:init_owl_model_and_action()
    self.dispatch_owl_ctrl = dispatch_owl_controller.new()
    -- 派遣是否开启
    local is_dispatch_open = game_data_manager.player:check_system_function_open(tables.SystemFunction.ids.SystemFunction_Dispatch)
    if is_dispatch_open then
        message.add_listener(message_type.DISPATCH_APPOINT_STATE_CHANGED, self.dispatch_appoint_state_changed, self)
        message.add_listener(message_type.HERO_MOVING_IN_THE_ROOM, self.on_hero_moving, self)
    end
    self.is_dispatch_open = is_dispatch_open
    if self.dispatch_owl_ctrl then
        self.dispatch_owl_ctrl:init_owl_model_and_action(is_dispatch_open, self:check_dispatch_reward_waiting_to_be_getting())
    end
    self.play_default_action_callback = function()
        self:play_default_action()
        if self.dispatch_owl_ctrl then
            self.dispatch_owl_ctrl:remove_virtual_camera()
        end
        ---显示场景中的英雄
        message.broadcast(message_type.COLLEGE_CONTROL_HERO_SHOW_HIDDEN, true)
    end
end

---播放默认动作
---@public
function dispatch_system:play_default_action()
    if self.is_dispatch_open then
        if self.dispatch_owl_ctrl then
            self.dispatch_owl_ctrl:play_default_animation(self:check_dispatch_reward_waiting_to_be_getting())
        end
    end
end

---播放猫头鹰飞走动作
---@public
function dispatch_system:play_owl_flyaway_action(wait_for_show)
    if self.dispatch_owl_ctrl then
        self.dispatch_owl_ctrl:play_owl_flyaway_animation(self.play_default_action_callback)
        self.dispatch_owl_ctrl:init_virtual_camera()
        ---隐藏场景中的英雄
        message.broadcast(message_type.COLLEGE_CONTROL_HERO_SHOW_HIDDEN, false)
        self:set_home_window_enable(false, wait_for_show)
    end
end

---设置居所界面显隐
---@public
function dispatch_system:set_home_window_enable(enable, wait_for_show)
    if self.home_window == nil then
        self.home_window = window.get_window(tables.Window.ids.Home)
    end
    if not enable and wait_for_show then
        local callback = function()
            self.home_window:wait_show_sync()
            if self.home_window then
                self.home_window:set_enable(enable)
            end
            if self.trigger_window == nil then
                self.trigger_window = window.get_window(tables.Window.ids.Trigger)
            end
            self.trigger_window:wait_show_sync()
            if self.trigger_window then
                self.trigger_window:set_enable(enable)
            end
        end
        lua.start_coroutine(callback)
        return
    end
    if self.home_window then
        self.home_window:set_enable(enable)
    end
    if self.trigger_window == nil then
        self.trigger_window = window.get_window(tables.Window.ids.Trigger)
    end
    if self.trigger_window then
        self.trigger_window:set_enable(enable)
    end
end

---清理猫头鹰模型动作
---@public
function dispatch_system:clear_owl_model_and_action()
    message.remove_listener(message_type.DISPATCH_APPOINT_STATE_CHANGED, self.dispatch_appoint_state_changed, self)
    message.remove_listener(message_type.HERO_MOVING_IN_THE_ROOM, self.on_hero_moving, self)
    if self.dispatch_owl_ctrl then
        self.dispatch_owl_ctrl:dispose()
        self.dispatch_owl_ctrl = nil
    end
    self.is_dispatch_open = nil
    self.play_default_action_callback = nil
end

---销毁
---@public
function dispatch_system:dispose()
    self:clear_owl_model_and_action()
    self.home_window = nil
    self.trigger_window = nil
end

---委派状态改变时
---@private
function dispatch_system:dispatch_appoint_state_changed(value)
    -- 委派奖励达上限
    if value == appoint_state_flag.FINISHED then
        -- 播放居所猫头鹰活跃动作
        if self.dispatch_owl_ctrl then
            self.dispatch_owl_ctrl:play_owl_active_animation()
        end
    else
        -- 播放居所猫头鹰待机动作
        if self.dispatch_owl_ctrl then
            self.dispatch_owl_ctrl:start_play_owl_idle_animation(true)
        end
    end
end

---玩家移动时
---@public
function dispatch_system:on_hero_moving()
    if self.dispatch_owl_ctrl then
        self.dispatch_owl_ctrl:on_hero_moving()
    end
end

---检测派遣是否有奖励待领取
---@private
function dispatch_system:check_dispatch_reward_waiting_to_be_getting()
    -- 委派奖励达上限
    if dispatch_data.appoint_state == appoint_state_flag.FINISHED then
        return true
    end
end

--endregion

--region dispatch functions

---初始化派遣内控制器
---@public
function dispatch_system:init_dispatch_ctrl(is_moving)
    self.dispatch_ctrl = dispatch_controller.new()
    self.dispatch_ctrl:init_controller(is_moving)
end

---dispose派遣内控制器
---@public
function dispatch_system:dispose_dispatch_ctrl()
    if self.dispatch_ctrl then
        self.dispatch_ctrl:clear_controller()
        self.dispatch_ctrl = nil
    end
end

---播放默认动作
---public
---@param type number (0:idle 1:walk)
function dispatch_system:play_hero_owl_animation(type)
    if self.dispatch_ctrl then
        self.dispatch_ctrl:play_hero_owl_animation(type)
    end
end

--endregion

return dispatch_system